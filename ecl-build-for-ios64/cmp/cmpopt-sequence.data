static const char compiler_data_text[] = 
"(quote . #1=#'lambda) #1# #2=(lambda) c::constant-function-expression #'eql c::s"
 "eq-opt-test-function #'identity c::seq-opt-key-function 'eql :from-end c::seq-op"
 "t-parse-args (:output :end :start) si::make-seq-iterator :read-only si::seq-iter"
 "ator-ref si::seq-iterator-next c::do-in-seq c::cons-cdr c::optional-type-check c"
 "::cons-car c::do-in-list :start-end 'eq 0 #'eq 0 ((:object :object) :object \"si_"
 "memq(#0,#1)\" :one-liner t :side-effects nil) 0 0 ((:object :object) :object \"ecl"
 "_memql(#0,#1)\" :one-liner t :side-effects nil) 'equal 0 #'equal 0 ((:object :obj"
 "ect) :object \"ecl_member(#0,#1)\" :one-liner t :side-effects nil) c::expand-membe"
 "r ((:object :object) :object \"ecl_assq(#0,#1)\" :one-liner t :side-effects nil) ("
 "(:object :object) :object \"ecl_assql(#0,#1)\" :one-liner t :side-effects nil) ((:"
 "object :object) :object \"ecl_assoc(#0,#1)\" :one-liner t :side-effects nil) 'equa"
 "lp 0 #'equalp 0 ((:object :object) :object \"ecl_assqlp(#0,#1)\" :one-liner t :sid"
 "e-effects nil) c::expand-assoc c::expand-find 0 0 0 0 c::cmpwarn 0 0 0 c::consta"
 "nt-expression-p c::cmp-eval c::policy-inline-sequence-functions 0 0 ";
#define compiler_data_text_size 1108
