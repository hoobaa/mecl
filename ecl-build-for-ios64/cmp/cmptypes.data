static const char compiler_data_text[] = 
"c::ref c::copy-ref c::print-ref c::ref-p 0 c::make-ref #1=(not (or fixnum charac"
 "ter float)) c::var c::copy-var c::print-var c::var-p c::*current-function* 0 c::"
 "%make-var c::fun c::copy-fun c::fun-p (values &rest t) c::*compile-file-position"
 "* 0 c::make-fun c::blk c::copy-blk c::blk-p 0 c::make-blk c::tag c::copy-tag c::"
 "tag-p 0 c::make-tag c::info c::copy-info c::info-p 0 c::make-info c::inline-info"
 " c::copy-inline-info c::inline-info-p 0 c::make-inline-info c::c1form c::copy-c1"
 "form c::print-c1form c::c1form-p 0 c::do-make-c1form c::vv c::copy-vv c::vv-p 0 "
 "c::make-vv 0 :name :ref :ref-ccb :ref-clb :read-nodes 0 :name :ref :ref-ccb :ref"
 "-clb :read-nodes :set-nodes :kind :function :functions-setting :functions-readin"
 "g :loc :type :index :ignorable 0 c::cmp-env-copy :name :ref :ref-ccb :ref-clb :r"
 "ead-nodes :cfun :level :env :global :exported :no-entry :shares-with :closure :v"
 "ar :description :lambda :lambda-expression :minarg :maxarg :return-type :parent "
 ":local-vars :referenced-vars :referenced-funs :referencing-funs :child-funs :fil"
 "e :file-position :cmp-env :required-lcls 0 :name :ref :ref-ccb :ref-clb :read-no"
 "des :exit :destination :var :type 0 :name :ref :ref-ccb :ref-clb :read-nodes :la"
 "bel :unwind-exit :var :index 0 :local-vars :type :sp-change :volatile 0 :name :a"
 "rg-rep-types :return-rep-type :arg-types :return-type :exact-return-type :multip"
 "le-values :expansion :one-liner 0 :local-vars :type :sp-change :volatile :name :"
 "parents :env :args :side-effects :form :toplevel-form :file :file-position 0 :lo"
 "cation :used-p :permanent-p :value (c::name (c::ref 0 :type fixnum) c::ref-ccb c"
 "::ref-clb c::read-nodes) ((c::name nil t nil 0 nil) (c::ref 0 fixnum nil 1 nil) "
 "(c::ref-ccb nil t nil 2 nil) (c::ref-clb nil t nil 3 nil) (c::read-nodes nil t n"
 "il 4 nil)) (c::make-ref) (deftype ffi::object nil `#1#) (c::set-nodes c::kind #'"
 "c::*current-function* (c::functions-setting nil) (c::functions-reading nil) (c::"
 "loc #2='ffi::object) (type t) (c::index -1) (ignorable nil)) (#3=(c::name nil t "
 "nil 0 c::ref-name) #4=(c::ref 0 fixnum nil 1 c::ref-ref) #5=(c::ref-ccb nil t ni"
 "l 2 c::ref-ref-ccb) #6=(c::ref-clb nil t nil 3 c::ref-ref-clb) #7=(c::read-nodes"
 " nil t nil 4 c::ref-read-nodes) (c::set-nodes nil t nil 5 nil) (c::kind nil t ni"
 "l 6 nil) (function c::*current-function* t nil 7 nil) (c::functions-setting nil "
 "t nil 8 nil) (c::functions-reading nil t nil 9 nil) (c::loc #2# t nil 10 nil) (t"
 "ype t t nil 11 nil) (c::index -1 t nil 12 nil) (ignorable nil t nil 13 nil)) (c:"
 ":%make-var) (c::cfun (c::level 0) (c::env 0) (c::global nil) (c::exported nil) ("
 "c::no-entry nil) (c::shares-with nil) c::closure c::var c::description lambda c:"
 ":lambda-expression (c::minarg 0) (c::maxarg call-arguments-limit) (c::return-typ"
 "e #8='(values &rest t)) (c::parent c::*current-function*) (c::local-vars nil) (c"
 "::referenced-vars nil) (c::referenced-funs nil) (c::referencing-funs nil) (c::ch"
 "ild-funs nil) (c::file #9=(car ext::*source-location*)) (file-position #10=(or ("
 "cdr ext::*source-location*) c::*compile-file-position*)) (c::cmp-env #11=(c::cmp"
 "-env-copy)) c::required-lcls) (#3# #4# #5# #6# #7# (c::cfun nil t nil 5 nil) (c:"
 ":level 0 t nil 6 nil) (c::env 0 t nil 7 nil) (c::global nil t nil 8 nil) (c::exp"
 "orted nil t nil 9 nil) (c::no-entry nil t nil 10 nil) (c::shares-with nil t nil "
 "11 nil) (c::closure nil t nil 12 nil) (c::var nil t nil 13 nil) (c::description "
 "nil t nil 14 nil) (lambda nil t nil 15 nil) (c::lambda-expression nil t nil 16 n"
 "il) (c::minarg 0 t nil 17 nil) (c::maxarg call-arguments-limit t nil 18 nil) (c:"
 ":return-type #8# t nil 19 nil) (c::parent c::*current-function* t nil 20 nil) (c"
 "::local-vars nil t nil 21 nil) (c::referenced-vars nil t nil 22 nil) (c::referen"
 "ced-funs nil t nil 23 nil) (c::referencing-funs nil t nil 24 nil) (c::child-funs"
 " nil t nil 25 nil) (c::file #9# t nil 26 nil) (file-position #10# t nil 27 nil) "
 "(c::cmp-env #11# t nil 28 nil) (c::required-lcls nil t nil 29 nil)) (c::make-fun"
 ") (ext::exit c::destination c::var (type #12='(values &rest t))) (#3# #4# #5# #6"
 "# #7# (ext::exit nil t nil 5 nil) (c::destination nil t nil 6 nil) (c::var nil t"
 " nil 7 nil) (type #12# t nil 8 nil)) (c::make-blk) (c::label c::unwind-exit c::v"
 "ar c::index) (#3# #4# #5# #6# #7# (c::label nil t nil 5 nil) (c::unwind-exit nil"
 " t nil 6 nil) (c::var nil t nil 7 nil) (c::index nil t nil 8 nil)) (c::make-tag)"
 " ((c::local-vars nil) (type #13='(values &rest t)) (c::sp-change nil) (c::volati"
 "le nil)) ((c::local-vars nil t nil 0 nil) (type #13# t nil 1 nil) (c::sp-change "
 "nil t nil 2 nil) (c::volatile nil t nil 3 nil)) (c::make-info) (c::name c::arg-r"
 "ep-types c::return-rep-type c::arg-types c::return-type c::exact-return-type c::"
 "multiple-values c::expansion c::one-liner) ((c::name nil t nil 0 nil) (c::arg-re"
 "p-types nil t nil 1 nil) (c::return-rep-type nil t nil 2 nil) (c::arg-types nil "
 "t nil 3 nil) (c::return-type nil t nil 4 nil) (c::exact-return-type nil t nil 5 "
 "nil) (c::multiple-values nil t nil 6 nil) (c::expansion nil t nil 7 nil) (c::one"
 "-liner nil t nil 8 nil)) (c::make-inline-info) ((c::name nil) (c::parents nil) ("
 "c::env #14=(c::cmp-env-copy)) (c::args #15='nil) (c::side-effects nil) (c::form "
 "nil) (c::toplevel-form nil) (c::file nil) (file-position 0)) ((c::local-vars nil"
 " t nil 0 c::info-local-vars) (type '(values &rest t) t nil 1 c::info-type) (c::s"
 "p-change nil t nil 2 c::info-sp-change) (c::volatile nil t nil 3 c::info-volatil"
 "e) (c::name nil t nil 4 nil) (c::parents nil t nil 5 nil) (c::env #14# t nil 6 n"
 "il) (c::args #15# t nil 7 nil) (c::side-effects nil t nil 8 nil) (c::form nil t "
 "nil 9 nil) (c::toplevel-form nil t nil 10 nil) (c::file nil t nil 11 nil) (file-"
 "position 0 t nil 12 nil)) (c::do-make-c1form) ((ext::location nil) (c::used-p ni"
 "l) (c::permanent-p t) (c::value nil)) ((ext::location nil t nil 0 nil) (c::used-"
 "p nil t nil 1 nil) (c::permanent-p t t nil 2 nil) (c::value nil t nil 3 nil)) (c"
 "::make-vv) ";
#define compiler_data_text_size 5851
