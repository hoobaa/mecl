static const char compiler_data_text[] = 
"c::+c1-form-hash+ c::+c1-dispatch-alist+ c::+t1-dispatch-alist+ c::+set-loc-disp"
 "atch-alist+ c::+wt-loc-dispatch-alist+ c::+c2-dispatch-alist+ c::+t2-dispatch-al"
 "ist+ c::+p1-dispatch-alist+ c::make-dispatch-table c::*c1-dispatch-table* c::*t1"
 "-dispatch-table* c::*c2-dispatch-table* c::*set-loc-dispatch-table* c::*wt-loc-d"
 "ispatch-table* c::*t2-dispatch-table* c::*p1-dispatch-table* c::*p0-dispatch-tab"
 "le* c::*cinline-dispatch-table* 0 0 ((multiple-value-setq 2 t nil nil) (block 2 "
 "nil t nil) (tagbody 2 nil t nil) (psetq 2 t nil nil) (ext::compiler-let 3 nil ni"
 "l nil) (catch 2 t nil nil) (values 1 nil t nil) (throw 2 t nil nil) (ext::locati"
 "on 1 nil t t) (ffi::c-inline 6 nil nil nil) (c::with-stack 1 t nil nil) (ext::co"
 "mpiler-typecase 2 nil nil nil) (c::make-form 2 t nil nil) (c::stack-push-values "
 "2 t nil nil) (progv 3 t nil nil) (multiple-value-bind 3 nil t nil) (c::init-form"
 " 2 t nil nil) (c::call-local 2 t nil nil) (load-time-value 2 nil t t) (if 3 nil "
 "t nil) (lambda 3 nil nil nil) (c::ordinary 1 nil t nil) (c::fmla-not 1 nil t nil"
 ") (progn 1 nil t nil) (ext::checked-value 3 nil nil nil) (function 3 nil nil t) "
 "(let* 3 nil t nil) (c::fmla-and nil nil t nil) (return-from 4 t nil nil) (go 2 t"
 " nil nil) (c::call-global 2 nil nil nil) (si::structure-set 4 t nil nil) (rplacd"
 " 1 t nil nil) (c::fmla-or nil nil t nil) (c::locals 3 nil t nil) (c::var 1 nil n"
 "il t) (setq 2 t nil nil) (si::fset 5 t nil nil) (unwind-protect 2 t nil nil) (si"
 "::structure-ref 4 nil t nil) (funcall 2 t nil nil)) ((block . c::c1block) (retur"
 "n-from . c::c1return-from) (funcall . c::c1funcall) (catch . c::c1catch) (unwind"
 "-protect . c::c1unwind-protect) (throw . c::c1throw) (ffi::defcallback . c::c1-d"
 "efcallback) (progn . c::c1progn) (ext::with-backend . c::c1with-backend) (ffi::c"
 "lines . c::c1clines) (ffi::c-inline . c::c1c-inline) (flet . c::c1flet) (labels "
 ". c::c1labels) (locally . c::c1locally) (macrolet . c::c1macrolet) (symbol-macro"
 "let . c::c1symbol-macrolet) (if . c::c1if) (not . c::c1not) (and . c::c1and) (or"
 " . c::c1or) (let . c::c1let) (let* . c::c1let*) (multiple-value-call . c::c1mult"
 "iple-value-call) (multiple-value-prog1 . c::c1multiple-value-prog1) (values . c:"
 ":c1values) (multiple-value-setq . c::c1multiple-value-setq) (multiple-value-bind"
 " . c::c1multiple-value-bind) (ext::compiler-typecase . c::c1compiler-typecase) ("
 "ext::checked-value . c::c1checked-value) (quote . c::c1quote) (function . c::c1f"
 "unction) (the . c::c1the) (ext::truly-the . c::c1truly-the) (eval-when . c::c1ev"
 "al-when) (declare . c::c1declare) (ext::compiler-let . c::c1compiler-let) (c::wi"
 "th-stack . c::c1with-stack) (c::innermost-stack-frame . c::c1innermost-stack-fra"
 "me) (c::stack-push . c::c1stack-push) (c::stack-push-values . c::c1stack-push-va"
 "lues) (c::stack-pop . c::c1stack-pop) (si::apply-from-stack-frame . c::c1apply-f"
 "rom-stack-frame) (tagbody . c::c1tagbody) (go . c::c1go) (setq . c::c1setq) (pro"
 "gv . c::c1progv) (psetq . c::c1psetq) (load-time-value . c::c1load-time-value) ("
 "si::fset . c::c1fset) (apply . c::c1apply)) ((ext::with-backend . c::c1with-back"
 "end) (defmacro . c::t1defmacro) (ext::compiler-let . c::c1compiler-let) (eval-wh"
 "en . c::c1eval-when) (progn . c::c1progn) (macrolet . c::c1macrolet) (locally . "
 "c::c1locally) (symbol-macrolet . c::c1symbol-macrolet)) ((c::bind . c::bind) (c:"
 ":jump-true . c::set-jump-true) (c::jump-false . c::set-jump-false) (values . c::"
 "set-values-loc) (c::value0 . c::set-value0-loc) (return . c::set-return-loc) (c:"
 ":trash . c::set-trash-loc) (the . c::set-the-loc)) ((c::call-normal . c::wt-call"
 "-normal) (c::call-indirect . c::wt-call-indirect) (ffi::c-inline . c::wt-c-inlin"
 "e-loc) (c::coerce-loc . c::wt-coerce-loc) (c::temp . c::wt-temp) (c::lcl . c::wt"
 "-lcl-loc) (c::fixnum-value . c::wt-number) (c::long-float-value . c::wt-number) "
 "(c::double-float-value . c::wt-number) (c::single-float-value . c::wt-number) (c"
 "::short-float-value . c::wt-number) (c::character-value . c::wt-character) (c::v"
 "alue . c::wt-value) (c::keyvars . c::wt-keyvars) (the . c::wt-the) (fdefinition "
 ". c::wt-fdefinition) (c::make-cclosure . c::wt-make-closure) (c::structure-ref ."
 " c::wt-structure-ref) (nil . \"ECL_NIL\") (t . \"ECL_T\") (return . \"value0\") (value"
 "s . \"cl_env_copy->values[0]\") (c::va-arg . \"va_arg(args,cl_object)\") (c::cl-va-a"
 "rg . \"ecl_va_arg(args)\") (c::value0 . \"value0\")) ((block . c::c2block) (return-f"
 "rom . c::c2return-from) (funcall . c::c2funcall) (c::call-global . c::c2call-glo"
 "bal) (catch . c::c2catch) (unwind-protect . c::c2unwind-protect) (throw . c::c2t"
 "hrow) (progn . c::c2progn) (ffi::c-inline . c::c2c-inline) (c::locals . c::c2loc"
 "als) (c::call-local . c::c2call-local) (if . c::c2if) (c::fmla-not . c::c2fmla-n"
 "ot) (c::fmla-and . c::c2fmla-and) (c::fmla-or . c::c2fmla-or) (let* . c::c2let*)"
 " (values . c::c2values) (multiple-value-setq . c::c2multiple-value-setq) (multip"
 "le-value-bind . c::c2multiple-value-bind) (function . c::c2function) (ext::compi"
 "ler-let . c::c2compiler-let) (c::with-stack . c::c2with-stack) (c::stack-push-va"
 "lues . c::c2stack-push-values) (tagbody . c::c2tagbody) (go . c::c2go) (c::var ."
 " c::c2var/location) (ext::location . c::c2var/location) (setq . c::c2setq) (prog"
 "v . c::c2progv) (psetq . c::c2psetq) (si::fset . c::c2fset) (ext::compiler-typec"
 "ase . c::c2compiler-typecase) (ext::checked-value . c::c2checked-value)) ((ext::"
 "compiler-let . c::t2compiler-let) (progn . c::t2progn) (c::ordinary . c::t2ordin"
 "ary) (load-time-value . c::t2load-time-value) (c::make-form . c::t2make-form) (c"
 "::init-form . c::t2init-form)) ((block . c::p1block) (return-from . c::p1return-"
 "from) (c::call-global . c::p1call-global) (c::call-local . c::p1call-local) (cat"
 "ch . c::p1catch) (throw . c::p1throw) (if . c::p1if) (c::fmla-not . c::p1fmla-no"
 "t) (c::fmla-and . c::p1fmla-and) (c::fmla-or . c::p1fmla-or) (lambda . c::p1lamb"
 "da) (let* . c::p1let*) (c::locals . c::p1locals) (multiple-value-bind . c::p1mul"
 "tiple-value-bind) (multiple-value-setq . c::p1multiple-value-setq) (progn . c::p"
 "1progn) (progv . c::p1progv) (setq . c::p1setq) (psetq . c::p1psetq) (tagbody . "
 "c::p1tagbody) (go . c::p1go) (unwind-protect . c::p1unwind-protect) (c::ordinary"
 " . c::p1ordinary) (si::fset . c::p1fset) (c::var . c::p1var) (values . c::p1valu"
 "es) (ext::location . c::p1trivial) (ffi::c-inline . c::p1trivial) (function . c:"
 ":p1trivial) (funcall . c::p1trivial) (load-time-value . c::p1trivial) (c::make-f"
 "orm . c::p1trivial) (c::init-form . c::p1trivial) (c::with-stack . c::p1with-sta"
 "ck) (c::stack-push-values . c::p1stack-push-values) (ext::compiler-typecase . c:"
 ":p1compiler-typecase) (ext::checked-value . c::p1checked-value)) ";
#define compiler_data_text_size 6545
