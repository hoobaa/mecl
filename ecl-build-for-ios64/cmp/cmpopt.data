static const char compiler_data_text[] = 
"si::type-predicate si::+known-typep-predicates+ ((single-float . c::single-float"
 "-p) (short-float . c::short-float-p) (double-float . c::double-float-p) (long-fl"
 "oat . c::long-float-p)) si::deftype-definition 0 0 :read-only (integer rational "
 "float real single-float double-float long-float) (declare (optimize (speed 3) (s"
 "afety 0) (space 0))) c::expand-typep c::+coercion-table+ c::x c::y ((declare (:r"
 "ead-only c::y)) (complex (realpart c::y) (imagpart c::y))) si::coerce-to-list si"
 "::coerce-to-vector (c::x) (declare (:read-only c::y)) (realpart c::y) (imagpart "
 "c::y) (nil \"coerced value\") c::value (declare (:read-only c::value)) (c::value) "
 "(:object) :long-double (:double :float :long-double) (:one-liner t :side-effects"
 " nil) 0 c::cmp-eval c::known-type-p c::cmp-env-search-var c::var-type c::cmpwarn"
 " si::type= c::policy-inline-type-checks c::policy-assume-no-errors c::cmperror s"
 "i::closest-sequence-type c::constant-value-p c::lisp-type->rep-type ((integer le"
 "t ((c::y c::x)) (check-type c::y integer) c::y) (float float c::x) (short-float "
 "float c::x #1=0.0) (single-float float c::x #1#) (double-float float c::x 0.0d0)"
 " (long-float float c::x 0.0l0) (base-char character c::x) (character character c"
 "::x) (function si::coerce-to-function c::x)) ";
#define compiler_data_text_size 1245
