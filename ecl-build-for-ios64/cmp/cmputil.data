static const char compiler_data_text[] = 
"c::+note-format+ c::+warn-format+ c::+error-format+ c::+fatal-format+ c::brief-n"
 "amestring c::innermost-non-expanded-form c::|compiler preprocess| c::compiler-me"
 "ssage-report c::compiler-message c::*compile-file-position* c::*current-toplevel"
 "-form* c::*current-form* c::compiler-note c::compiler-debug-note c::compiler-war"
 "ning c::compiler-macro-expansion-failed c::compiler-error c::compiler-fatal-erro"
 "r c::compiler-internal-error c::compiler-style-warning c::compiler-undefined-var"
 "iable c::*suppress-compiler-messages* c::print-compiler-message c::handle-compil"
 "er-note c::*compiler-conditions* c::handle-compiler-warning c::handle-compiler-e"
 "rror c::*compiler-break-enable* c::handle-compiler-internal-error c::*active-pro"
 "tection* c::*pending-actions* c::do-compilation-unit with-compilation-unit ((c::"
 "*compiler-conditions* nil)) (declare (special c::*compiler-conditions*)) ((c::co"
 "mpiler-note #'c::handle-compiler-note) (warning #'c::handle-compiler-warning) (c"
 "::compiler-error #'c::handle-compiler-error) (c::compiler-internal-error #'c::ha"
 "ndle-compiler-internal-error) (serious-condition #'c::handle-compiler-internal-e"
 "rror)) (mp::+load-compile-lock+) c::+init-env-form+ (abort nil) c::with-compiler"
 "-env c::*c1form-level* c::print-c1forms c::print-ref c::print-var c::cmpprogress"
 " c::cmperr c::cmpck c::cmpassert c::cmperr c::safe-list-length c::check-args-num"
 "ber c::too-many-args c::too-few-args :report-function si::*condition-restarts* c"
 "::cmpwarn-style c::cmpwarn c::cmpnote c::cmpdebug c::print-current-form c::print"
 "-emitting c::undefined-variable c::baboon ((si::*break-enable* c::*compiler-brea"
 "k-enable*) (c::throw-flag t)) ((error #'invoke-debugger)) (setf c::throw-flag ni"
 "l) c::throw-flag c::with-cmp-protection c::*cmp-env* c::cmp-eval c::cmp-macro-fu"
 "nction c::cmp-expand-macro c::cmp-expand-compiler-macro c::t1 c::t2 c::t3 c::c1 "
 "c::c2 c::c1conditional :inline-always :inline-unsafe :inline-safe c::lfun si::co"
 "mpiler-clear-compiler-properties c::lisp-to-c-name 0 0 0 c::compiler-message-fil"
 "e-position c::compiler-message-prefix c::compiler-message-file c::compiler-messa"
 "ge-toplevel-form c::compiler-message-format 0 0 0 0 0 0 :override 0 0 0 c::c1for"
 "m-p c::c1form-parent c::c1form-args 0 c::ref-name 0 c::var-name c::var-kind 0 0 "
 "0 0 0 0 0 0 si::make-restart 0 0 0 0 0 0 c::fun-name c::fun-description 0 0 :for"
 "mat-control :format-arguments 0 0 0 c::cmp-env-search-macro 0 0 0 0 (simple-cond"
 "ition) (:initform (lambda (c::c stream) (apply #'c::compiler-message-report stre"
 "am c::c (simple-condition-format-control c::c) (simple-condition-format-argument"
 "s c::c))) :name si::report-function) (:writers ((setf c::compiler-message-prefix"
 ")) :readers (c::compiler-message-prefix) :initform \"Note\" :name c::prefix) (:wri"
 "ters ((setf c::compiler-message-format)) :readers (c::compiler-message-format) :"
 "initform c::+note-format+ :name format) (:writers ((setf c::compiler-message-fil"
 "e)) :readers (c::compiler-message-file) :initform *compile-file-pathname* :inita"
 "rgs (:file) :name c::file) (:writers ((setf c::compiler-message-file-position)) "
 ":readers (c::compiler-message-file-position) :initform c::*compile-file-position"
 "* :initargs (:file) :name position) (:writers ((setf c::compiler-message-topleve"
 "l-form)) :readers (c::compiler-message-toplevel-form) :initform c::*current-topl"
 "evel-form* :initargs (:form) :name c::toplevel-form) (:writers ((setf c::compile"
 "r-message-form)) :readers (c::compiler-message-form) :initform c::*current-form*"
 " :initargs (:form) :name c::form) (c::compiler-message) (c::compiler-note) (c::c"
 "ompiler-message style-warning) ((:initform \"Warning\" :name c::prefix) (:initform"
 " c::+warn-format+ :name format)) (c::compiler-warning) ((:initform \"Error\" :name"
 " c::prefix) (:initform c::+error-format+ :name format)) (c::compiler-error) ((:i"
 "nitform c::+fatal-format+ :name format)) (c::compiler-fatal-error) ((:initform \""
 "Internal error\" :name c::prefix)) ((:initform \"Style warning\" :name c::prefix) ("
 ":initform c::+warn-format+ :name format)) (c::compiler-style-warning) (:initform"
 " (lambda (c::c stream) (c::compiler-message-report stream c::c \"Variable ~A was "
 "undefined. ~\n                               Compiler assumes it is a global.\" (s"
 "lot-value c::c 'variable))) :name si::report-function) (:initform nil :initargs "
 "(:name) :name variable) ";
#define compiler_data_text_size 4264
