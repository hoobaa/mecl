static const char compiler_data_text[] = 
"c::proclaimed-arg-types :no-sp-change c::no-sp-change 0 :pure 0 c::pure c::no-si"
 "de-effects :no-side-effects 0 0 c::parse-function-proclamation c::array-rank-ind"
 "ex c::bit-array c::association-list c::byte-specifier c::character-code c::chara"
 "cter-designator c::external-file-format c::declaration-specifier c::digit-weight"
 " c::environment c::form c::format-control c::function-designator c::function-nam"
 "e c::gen-bool c::natural c::package-designator c::pathname-designator c::proper-"
 "list c::property-list c::radix c::readtable-designator c::restart-designator c::"
 "sequence-index c::stream-designator c::string-designator c::tree c::type-specifi"
 "er c::universal-time c::time-zone 0 c::proclaim-function (deftype c::array-rank-"
 "index nil '#1=(integer 0 63)) #1# (deftype c::bit-array nil '#2=(array bit *)) #"
 "2# (deftype c::association-list nil 'list) (deftype c::byte-specifier nil '#3=(c"
 "ons integer-length integer-length)) #3# (deftype c::character-code nil '#4=(inte"
 "ger 0 1114111)) #4# (deftype c::character-designator nil '#5=(or character c::st"
 "ring-designator)) #5# (deftype c::external-file-format nil '#6=(or symbol list))"
 " #6# (deftype c::declaration-specifier nil 'list) (deftype c::digit-weight nil '"
 "#7=(integer 0 35)) #7# (deftype c::environment nil 'list) (deftype c::form nil t"
 ") (deftype c::format-control nil '#8=(or string function)) #8# (deftype c::funct"
 "ion-designator nil '#9=(or symbol function)) #9# (deftype c::function-name nil '"
 "#10=(or list symbol)) #10# (deftype c::gen-bool nil 't) (deftype integer-length "
 "nil 'ext::array-index) (deftype c::natural nil '#11=(integer 0 *)) #11# (deftype"
 " c::package-designator nil '#12=(or c::string-designator package)) #12# (deftype"
 " c::pathname-designator nil '#13=(or pathname string file-stream)) #13# (deftype"
 " pathname-device nil '#14=(or string (member nil :unspecific))) #14# (deftype pa"
 "thname-directory nil '#15=(or string list (member :wild :unspecific))) #15# (def"
 "type pathname-host nil '#16=(or string list (member nil :unspecific))) #16# (def"
 "type pathname-name nil '#17=(or string (member nil :wild :unspecific))) #17# (de"
 "ftype pathname-type nil '(or string (member nil :wild :unspecific))) (deftype pa"
 "thname-version nil '#18=(or unsigned-byte (member nil :wild :newest :unspecific)"
 ")) #18# (deftype c::proper-list nil 'list) (deftype c::property-list nil 'list) "
 "(deftype c::radix nil '#19=(integer 2 36)) #19# (deftype c::readtable-designator"
 " nil '#20=(or null readtable)) #20# (deftype c::restart-designator nil '#21=(or "
 "(and symbol (not null)) restart)) #21# (deftype c::sequence-index nil '#22=(inte"
 "ger 0 2305843009213693951)) #22# (deftype c::stream-designator nil '#23=(or stre"
 "am (member t nil))) #23# (deftype c::string-designator nil '#24=(or symbol strin"
 "g character)) #24# (deftype c::tree nil 't) (deftype c::type-specifier nil '#25="
 "(or symbol class list)) #25# (deftype c::universal-time nil 'unsigned-byte) (def"
 "type c::time-zone nil t) (deftype ext::instance nil 'standard-object) ((compile "
 "(c::function-name &optional (or list function)) (values (or c::function-name fun"
 "ction) c::gen-bool c::gen-bool)) (compiler-macro-function (c::function-name &opt"
 "ional c::environment) function) (constantp (t &optional c::environment) c::gen-b"
 "ool :no-side-effects) (eval (c::form) (values &rest t)) (macro-function (symbol "
 "&optional c::environment) function) (macroexpand (c::form &optional c::environme"
 "nt) (values c::form c::gen-bool)) (macroexpand-1 (c::form &optional c::environme"
 "nt) (values c::form c::gen-bool)) (proclaim (c::declaration-specifier) (values &"
 "rest t)) (special-operator-p (symbol) c::gen-bool :pure) (si::specialp (symbol) "
 "c::gen-bool :predicate) (si::do-defsetf (symbol (or symbol function)) t) (si::do"
 "-define-setf-method (symbol function) t) (coerce (t c::type-specifier) t) (subty"
 "pep (c::type-specifier c::type-specifier &optional c::environment) (values c::ge"
 "n-bool c::gen-bool)) (type-of (t) c::type-specifier) (typep (t c::type-specifier"
 " &optional c::environment) c::gen-bool) (si::coerce-to-vector (t c::type-specifi"
 "er t c::gen-bool) vector :no-side-effects) (si::coerce-to-function (c::function-"
 "designator) function :no-side-effects) (apply (c::function-designator &rest t) ("
 "values &rest t)) (fdefinition (c::function-name) (or list function (member 'spec"
 "ial)) :reader) (fboundp (c::function-name) c::gen-bool :reader) (fmakunbound (c:"
 ":function-name) c::function-name) (funcall (c::function-designator &rest t) (val"
 "ues &rest t)) (function-lambda-expression (function) (values list c::gen-bool t)"
 " :pure) (functionp (t) c::gen-bool :pure) (compiled-function-p (t) c::gen-bool :"
 "pure) (not (c::gen-bool) boolean :pure) (eq (t t) c::gen-bool :pure) (eql (t t) "
 "c::gen-bool :pure) (equal (t t) c::gen-bool :pure) (equalp (t t) c::gen-bool :pu"
 "re) (identity (t) t) (complement (function) function) (constantly (t) function) "
 "(every (c::function-designator sequence &rest sequence) c::gen-bool) (some (c::f"
 "unction-designator sequence &rest sequence) t) (notevery (c::function-designator"
 " sequence &rest sequence) c::gen-bool) (notany (c::function-designator sequence "
 "&rest sequence) c::gen-bool) (values-list (list) (values &rest t)) (get-setf-exp"
 "ansion (t &optional c::environment) (values t t t t t)) (si::fset (c::function-n"
 "ame function &optional c::gen-bool t) function) (si::setf-definition (c::functio"
 "n-name c::createp) list) (ext::compiled-function-name (function) (or null c::fun"
 "ction-name)) (si::compiled-function-block (function) (or null si::codeblock)) (e"
 "xt::compiled-function-file (function) (values t t)) (si::ihs-top nil si::index) "
 "(si::ihs-fun (si::index) (or null c::function-designator)) (si::ihs-env (si::ind"
 "ex) c::environment) (si::frs-top nil si::index) (si::frs-bds (si::index) si::ind"
 "ex) (si::frs-tag (si::index) t) (si::frs-ihs (si::index) si::index) (si::bds-top"
 " nil si::index) (si::bds-var (si::index) symbol) (si::bds-val (si::index) t) (si"
 "::sch-frs-base (si::index si::index) (or null si::index)) (si::ccase-error (t t "
 "t) t) (si::ecase-error (t t) t) (si::etypecase-error (t t) t) (si::ctypecase-err"
 "or (t t t) t) (si::do-check-type (t t t t) t) (si::dm-too-many-arguments (t) t) "
 "(si::dm-too-few-arguments (t) t) (ensure-generic-function (c::function-name &res"
 "t t) generic-function) (slot-boundp (ext::instance symbol) c::gen-bool) (slot-ex"
 "ists-p (ext::instance symbol) c::gen-bool) (slot-makunbound (ext::instance symbo"
 "l) ext::instance) (slot-value (ext::instance symbol) t) (make-load-form-saving-s"
 "lots (t &rest t) (values t t)) (find-class (symbol &optional c::gen-bool c::envi"
 "ronment) (or class null)) (class-of (t) class :no-side-effects) (clos::standard-"
 "instance-get (ext::instance t) t) (clos::standard-instance-set (t ext::instance "
 "t) t) (clos::std-compute-applicable-methods (generic-function list) list) (clos:"
 ":std-compute-effective-method (generic-function method-combination list) functio"
 "n) (clos::compute-effective-method-function (generic-function method-combination"
 " list) function) (clos::update-instance (ext::instance) (values)) (clos::slot-va"
 "lue-set (t ext::instance symbol) t) (copy-structure (t) t) (si::make-structure ("
 "t &rest t) structure-object) (si::structure-name (structure-object) symbol :read"
 "er) (si::structure-ref (structure-object t fixnum) t :reader) (si::structure-set"
 " (structure-object t fixnum t) t) (si::structurep (t) c::gen-bool :predicate) (s"
 "i::structure-subtype-p (t t) c::gen-bool :predicate) (error (t &rest t) (values)"
 ") (cerror (c::format-control t &rest t) (values &rest t)) (invalid-method-error "
 "(method c::format-control &rest t) (values)) (method-combination-error (c::forma"
 "t-control &rest t) (values)) (signal (t &rest t) null) (warn (t &rest t) null) ("
 "invoke-debugger (condition) (values)) (break (&optional c::format-control &rest "
 "t) null) (make-condition (c::type-specifier &rest t) condition) (compute-restart"
 "s (&optional (or null condition)) list) (find-restart (c::restart-designator &op"
 "tional (or null condition)) restart) (invoke-restart (c::restart-designator &res"
 "t t) (values &rest t)) (invoke-restart-interactively (c::restart-designator) (va"
 "lues &rest t)) (abort (&optional (or null condition)) (values)) (continue (&opti"
 "onal (or null condition)) null) (muffle-warning (&optional (or null condition)) "
 "(values)) (store-value (t &optional (or null condition)) null) (use-value (t &op"
 "tional (or null condition)) null) (ext::catch-signal (fixnum c::gen-bool &key) n"
 "ull) (si::bind-simple-restarts (t t) list) (si::bind-simple-handlers (t t) list)"
 " (symbolp (t) c::gen-bool :pure) (keywordp (t) c::gen-bool :reader) (make-symbol"
 " (string) symbol) (copy-symbol (symbol &optional c::gen-bool) symbol) (gensym (&"
 "optional (or string c::natural)) symbol) (gentemp (&optional string c::package-d"
 "esignator) symbol) (symbol-function (symbol) (or function list (member 'special)"
 ") :reader) (symbol-name (symbol) string :pure) (symbol-package (symbol) (or pack"
 "age null) :reader) (symbol-plist (symbol) list :reader) (symbol-value (symbol) t"
 " :reader) (get (symbol t &optional t) t :no-side-effects) (remprop (symbol t) c:"
 ":gen-bool) (boundp (symbol) c::gen-bool :reader) (makunbound (symbol) symbol) (s"
 "et (symbol t) t) (si::*make-special (symbol) symbol) (si::*make-constant (symbol"
 " t) symbol) (si::put-f (list t t) list) (si::rem-f (list t) (values list boolean"
 ")) (si::set-symbol-plist (symbol list) list) (si::putprop (symbol t t) t) (si::p"
 "ut-sysprop (t t t) t) (si::get-sysprop (t t) (values t boolean)) (si::rem-syspro"
 "p (t t) boolean) (si::put-properties (symbol &rest t) symbol :no-sp-change) (exp"
 "ort (list &optional c::package-designator) t) (find-symbol (string &optional c::"
 "package-designator) (values symbol (member :inherited :external :internal nil)))"
 " (find-package (c::package-designator) (or package null)) (find-all-symbols (c::"
 "string-designator) list) (import (list &optional c::package-designator) t) (list"
 "-all-packages nil list) (rename-package (c::package-designator c::package-design"
 "ator &optional list) package) (shadow (list &optional c::package-designator) t) "
 "(shadowing-import (list &optional c::package-designator) t) (delete-package (c::"
 "package-designator) c::gen-bool) (make-package (c::string-designator &rest t) pa"
 "ckage) (unexport (list &optional c::package-designator) t) (unintern (symbol &op"
 "tional c::package-designator) c::gen-bool) (unuse-package (list &optional c::pac"
 "kage-designator) t) (use-package (list &optional c::package-designator) t) (inte"
 "rn (string &optional c::package-designator) (values symbol (member :inherited :e"
 "xternal :internal nil))) (package-name (c::package-designator) (or string null) "
 ":reader) (package-nicknames (c::package-designator) list :reader) (package-shado"
 "wing-symbols (c::package-designator) list :reader) (package-use-list (c::package"
 "-designator) list :reader) (package-used-by-list (c::package-designator) list :r"
 "eader) (packagep (t) c::gen-bool :pure) (si::select-package (c::package-designat"
 "or) package) (si::package-hash-tables (c::package-designator) (values hash-table"
 " hash-table list) :reader) (ext::package-lock (c::package-designator c::gen-bool"
 ") package) (= (number &rest number) c::gen-bool :pure) (/= (number &rest number)"
 " c::gen-bool :pure) (< (real &rest real) c::gen-bool :pure) (> (real &rest real)"
 " c::gen-bool :pure) (<= (real &rest real) c::gen-bool :pure) (>= (real &rest rea"
 "l) c::gen-bool :pure) (max (real &rest real) real :pure) (min (real &rest real) "
 "real :pure) (minusp (real) c::gen-bool :pure) (plusp (real) c::gen-bool :pure) ("
 "zerop (number) c::gen-bool :pure) (floor (real &optional real) (values integer r"
 "eal) :pure) (ceiling (real &optional real) (values integer real) :pure) (truncat"
 "e (real &optional real) (values integer real) :pure) (round (real &optional real"
 ") (values integer real) :pure) (ffloor (real &optional real) (values float real)"
 " :pure) (fceiling (real &optional real) (values float real) :pure) (ftruncate (r"
 "eal &optional real) (values float real) :pure) (fround (real &optional real) (va"
 "lues float real) :pure) (cos (number) number :pure) (sin (number) number :pure) "
 "(tan (number) number :pure) (cosh (number) number :pure) (sinh (number) number :"
 "pure) (tanh (number) number :pure) (acos (number) number :pure) (asin (number) n"
 "umber :pure) (atan (number &optional real) number :pure) (acosh (number) number "
 ":pure) (asinh (number) number :pure) (atanh (number) number :pure) (* (&rest num"
 "ber) number :pure) (+ (&rest number) number :pure) (- (&rest number) number :pur"
 "e) (/ (number &rest number) number :pure) (1+ (number) number :pure) (1- (number"
 ") number :pure) (abs (number) (real 0 *) :pure) (evenp (integer) c::gen-bool :pu"
 "re) (oddp (integer) c::gen-bool :pure) (exp (number) number :pure) (expt (number"
 " number) number :pure) (gcd (&rest integer) unsigned-byte :pure) (lcm (&rest int"
 "eger) unsigned-byte :pure) (log (number &optional number) number :pure) (mod (re"
 "al real) real :pure) (rem (real real) real :pure) (signum (number) number :pure)"
 " (sqrt (number) number :pure) (isqrt (c::natural) c::natural :pure) (make-random"
 "-state (&optional (or random-state (member nil t))) random-state :no-side-effect"
 "s) (random ((or (integer 0 *) (float 0 *)) &optional random-state) (or (integer "
 "0 *) (float 0 *))) (random-state-p (t) c::gen-bool :pure) (numberp (t) c::gen-bo"
 "ol :pure) (cis (real) complex :pure) (complex (real &optional real) number :pure"
 ") (complexp (t) c::gen-bool :pure) (conjugate (number) number :pure) (phase (num"
 "ber) (real -3.1415926535897932385l0 3.1415926535897932385l0) :pure) (realpart (n"
 "umber) real :pure) (imagpart (number) real :pure) (upgraded-complex-part-type (c"
 "::type-specifier &optional c::environment) c::type-specifier :no-side-effects) ("
 "realp (t) c::gen-bool :pure) (numerator (rational) integer :pure) (denominator ("
 "rational) unsigned-byte :pure) (rational (real) rational :pure) (rationalize (re"
 "al) rational :pure) (rationalp (t) c::gen-bool :pure) (ash (integer integer) int"
 "eger :pure) (integer-length (integer) integer-length :pure) (integerp (t) c::gen"
 "-bool :pure) (parse-integer (string &rest t) (values integer ext::array-index) :"
 "no-side-effects) (boole ((integer 0 15) integer integer) integer :pure) (logand "
 "(&rest integer) integer :pure) (logandc1 (integer integer) integer :pure) (logan"
 "dc2 (integer integer) integer :pure) (logeqv (&rest integer) integer :pure) (log"
 "ior (&rest integer) integer :pure) (lognand (integer integer) integer :pure) (lo"
 "gnor (integer integer) integer :pure) (lognot (integer) integer :pure) (logorc1 "
 "(integer integer) integer :pure) (logorc2 (integer integer) integer :pure) (logx"
 "or (&rest integer) integer :pure) (logbitp (unsigned-byte integer) c::gen-bool :"
 "pure) (logcount (integer) integer-length :pure) (logtest (integer integer) c::ge"
 "n-bool :pure) (byte (unsigned-byte unsigned-byte) c::byte-specifier :pure) (byte"
 "-size (c::byte-specifier) integer-length :pure) (byte-position (c::byte-specifie"
 "r) integer-length :pure) (deposit-field (integer c::byte-specifier integer) inte"
 "ger :pure) (dpb (integer c::byte-specifier integer) integer :pure) (ldb (c::byte"
 "-specifier integer) unsigned-byte :pure) (ldb-test (c::byte-specifier integer) c"
 "::gen-bool :pure) (mask-field (c::byte-specifier integer) unsigned-byte :pure) ("
 "decode-float (float) (values float integer float) :pure) (scale-float (float int"
 "eger) float :pure) (float-radix (float) fixnum :pure) (float-sign (float &option"
 "al float) float :pure) (float-digits (float) (integer 0 64) :pure) (float-precis"
 "ion (float) (integer 0 64) :pure) (integer-decode-float (float) (values integer "
 "integer (member -1 1)) :pure) (float (number &optional float) float :pure) (floa"
 "tp (t) c::gen-bool :pure) (si::bit-array-op (t t t t) (array bit)) (ext::fixnump"
 " (t) c::gen-bool :pure) (c::shift>> (*) nil :pure) (c::shift<< (*) nil :pure) (c"
 "::short-float-p (*) nil :pure) (c::single-float-p (*) nil :pure) (c::double-floa"
 "t-p (*) nil :pure) (c::long-float-p (*) nil :pure) (c::ldb1 (fixnum fixnum fixnu"
 "m) fixnum :no-side-effects) (char= (character &rest character) c::gen-bool :pure"
 ") (char/= (character &rest character) c::gen-bool :pure) (char< (character &rest"
 " character) c::gen-bool :pure) (char> (character &rest character) c::gen-bool :p"
 "ure) (char<= (character &rest character) c::gen-bool :pure) (char>= (character &"
 "rest character) c::gen-bool :pure) (char-equal (character &rest character) c::ge"
 "n-bool :pure) (char-not-equal (character &rest character) c::gen-bool :pure) (ch"
 "ar-lessp (character &rest character) c::gen-bool :pure) (char-greaterp (characte"
 "r &rest character) c::gen-bool :pure) (char-not-greaterp (character &rest charac"
 "ter) c::gen-bool :pure) (char-not-lessp (character &rest character) c::gen-bool "
 ":pure) (character (c::character-designator) character) (characterp (t) c::gen-bo"
 "ol :pure) (alpha-char-p (character) c::gen-bool :pure) (alphanumericp (character"
 ") c::gen-bool :pure) (digit-char (c::digit-weight &optional c::radix) character "
 ":pure) (digit-char-p (character &optional c::radix) (or c::digit-weight null) :p"
 "ure) (graphic-char-p (character) c::gen-bool :pure) (standard-char-p (character)"
 " c::gen-bool :pure) (char-upcase (character) character :pure) (char-downcase (ch"
 "aracter) character :pure) (upper-case-p (character) c::gen-bool :pure) (lower-ca"
 "se-p (character) c::gen-bool :pure) (both-case-p (character) c::gen-bool :pure) "
 "(char-code (character) c::character-code :pure) (char-int (character) c::charact"
 "er-code :pure) (code-char (c::character-code) (or character null) :pure) (char-n"
 "ame (character) (or string null) :pure) (name-char (c::string-designator) (or ch"
 "aracter null) :pure) (si::base-char-p (t) c::gen-bool :predicate) (cons (t t) co"
 "ns :no-side-effects) (consp (t) c::gen-bool :pure) (atom (t) c::gen-bool :pure) "
 "(rplaca (cons t) cons) (rplacd (cons t) cons) (car (list) t :reader) (cdr (list)"
 " t :reader) (caar (list) t :reader) (cadr (list) t :reader) (cdar (list) t :read"
 "er) (cddr (list) t :reader) (caaar (list) t :reader) (caadr (list) t :reader) (c"
 "adar (list) t :reader) (caddr (list) t :reader) (cdaar (list) t :reader) (cdadr "
 "(list) t :reader) (cddar (list) t :reader) (cdddr (list) t :reader) (caaaar (lis"
 "t) t :reader) (caaadr (list) t :reader) (caadar (list) t :reader) (caaddr (list)"
 " t :reader) (cadaar (list) t :reader) (cadadr (list) t :reader) (caddar (list) t"
 " :reader) (cadddr (list) t :reader) (cdaaar (list) t :reader) (cdaadr (list) t :"
 "reader) (cdadar (list) t :reader) (cdaddr (list) t :reader) (cddaar (list) t :re"
 "ader) (cddadr (list) t :reader) (cdddar (list) t :reader) (cddddr (list) t :read"
 "er) (copy-tree (c::tree) c::tree :no-side-effects) (sublis (c::association-list "
 "c::tree &key) c::tree) (nsublis (c::association-list c::tree &key) c::tree) (sub"
 "st (t t c::tree &key) c::tree) (subst-if (t c::function-designator c::tree &key)"
 " c::tree) (subst-if-not (t c::function-designator c::tree &key) c::tree) (nsubst"
 " (t t c::tree &key) c::tree) (nsubst-if (t c::function-designator c::tree &key) "
 "c::tree) (nsubst-if-not (t c::function-designator c::tree &key) c::tree) (tree-e"
 "qual (c::tree c::tree &key) c::gen-bool :predicate) (copy-list (list) list :no-s"
 "ide-effects) (list (&rest t) list :no-side-effects) (list* (&rest t) t :no-side-"
 "effects) (list-length (list) (or null si::index) :no-side-effects) (listp (t) c:"
 ":gen-bool :pure) (make-list (si::index &key) list :no-side-effects) (first (list"
 ") t :reader) (second (list) t :reader) (third (list) t :reader) (fourth (list) t"
 " :reader) (fifth (list) t :reader) (sixth (list) t :reader) (seventh (list) t :r"
 "eader) (eighth (list) t :reader) (ninth (list) t :reader) (tenth (list) t :reade"
 "r) (nth (unsigned-byte list) t :reader) (endp (list) c::gen-bool :predicate) (nu"
 "ll (t) c::gen-bool :predicate) (nconc (&rest t) t) (append (&rest t) t :no-side-"
 "effects) (revappend (list t) t :no-side-effects) (nreconc (list t) t) (butlast ("
 "list &optional unsigned-byte) list :no-side-effects) (nbutlast (list &optional u"
 "nsigned-byte) list) (last (list &optional unsigned-byte) t :reader) (ldiff (list"
 " t) list :no-side-effects) (tailp (t list) c::gen-bool :reader) (nthcdr (fixnum "
 "list) t :reader) (rest (list) t :no-side-effects) (member (t c::proper-list &key"
 ") c::proper-list) (member-if (c::function-designator c::proper-list &key) c::pro"
 "per-list) (member-if-not (c::function-designator c::proper-list &key) c::proper-"
 "list) (mapc (c::function-designator c::proper-list &rest c::proper-list) c::prop"
 "er-list) (mapcar (c::function-designator c::proper-list &rest c::proper-list) c:"
 ":proper-list) (mapcan (c::function-designator c::proper-list &rest c::proper-lis"
 "t) c::proper-list) (mapl (c::function-designator c::proper-list &rest c::proper-"
 "list) c::proper-list) (maplist (c::function-designator c::proper-list &rest c::p"
 "roper-list) c::proper-list) (mapcon (c::function-designator c::proper-list &rest"
 " c::proper-list) c::proper-list) (acons (t t c::association-list) c::association"
 "-list :no-side-effects) (assoc (t c::association-list &key) t) (assoc-if (c::fun"
 "ction-designator c::association-list &key) t) (assoc-if-not (c::function-designa"
 "tor c::association-list &key) t) (copy-alist (c::association-list) c::associatio"
 "n-list :no-side-effects) (pairlis (c::proper-list c::proper-list &optional c::as"
 "sociation-list) c::association-list :no-side-effects) (rassoc (t c::association-"
 "list &key) t) (rassoc-if (c::function-designator c::association-list &key) t) (r"
 "assoc-if-not (c::function-designator c::association-list &key) t) (get-propertie"
 "s (c::property-list c::proper-list) (values t t list) :no-side-effects) (getf (c"
 "::property-list t &optional t) t :reader) (intersection (c::proper-list c::prope"
 "r-list &key) c::proper-list) (nintersection (c::proper-list c::proper-list &key)"
 " c::proper-list) (adjoin (t c::proper-list &key) c::proper-list) (set-difference"
 " (c::proper-list c::proper-list &key) c::proper-list) (nset-difference (c::prope"
 "r-list c::proper-list &key) c::proper-list) (set-exclusive-or (c::proper-list c:"
 ":proper-list &key) c::proper-list) (nset-exclusive-or (c::proper-list c::proper-"
 "list &key) c::proper-list) (subsetp (c::proper-list c::proper-list &key) c::gen-"
 "bool :predicate) (union (c::proper-list c::proper-list &key) c::proper-list) (nu"
 "nion (c::proper-list c::proper-list &key) c::proper-list) (si::member1 (t c::pro"
 "per-list t t t) list) (si::memq (t c::proper-list) list) (si::cons-car (cons) t "
 ":reader) (si::cons-cdr (cons) t :reader) (si::proper-list-p (t) c::gen-bool :pre"
 "dicate) (make-array ((or ext::array-index list) &key) array :no-side-effects) (a"
 "djust-array (array (or ext::array-index list) &key) array) (adjustable-array-p ("
 "array) c::gen-bool :pure) (aref (array &rest ext::array-index) t :reader) (array"
 "-dimension (array c::array-rank-index) ext::array-index :reader) (array-dimensio"
 "ns (array) list :reader) (array-element-type (array) c::type-specifier :pure) (a"
 "rray-has-fill-pointer-p (array) c::gen-bool :pure) (array-displacement (array) ("
 "values (or array null) ext::array-index) :reader) (array-in-bounds-p (array &res"
 "t ext::array-index) c::gen-bool :no-side-effects) (array-rank (array) c::array-r"
 "ank-index :reader) (array-row-major-index (array &rest ext::array-index) ext::ar"
 "ray-index :no-side-effects) (array-total-size (array) ext::array-index :reader) "
 "(arrayp (t) c::gen-bool :pure) (fill-pointer (vector) ext::array-index :reader) "
 "(row-major-aref (array ext::array-index) t :reader) (upgraded-array-element-type"
 " (c::type-specifier &optional c::environment) c::type-specifier :no-side-effects"
 ") (simple-vector-p (t) c::gen-bool :pure) (svref (simple-vector ext::array-index"
 ") t :reader) (vector (&rest t) vector :no-side-effects) (vector-pop (vector) t) "
 "(vector-push (t vector) (or ext::array-index null)) (vector-push-extend (t vecto"
 "r &optional ext::array-index) ext::array-index) (vectorp (t) c::gen-bool :pure) "
 "(bit (c::bit-array &rest ext::array-index) bit :reader) (sbit ((simple-array bit"
 ") &rest ext::array-index) bit :reader) (bit-and (c::bit-array c::bit-array &opti"
 "onal (or c::bit-array (member t nil))) c::bit-array :no-side-effects) (bit-andc1"
 " (c::bit-array c::bit-array &optional (or c::bit-array (member t nil))) c::bit-a"
 "rray :no-side-effects) (bit-andc2 (c::bit-array c::bit-array &optional (or c::bi"
 "t-array (member t nil))) c::bit-array :no-side-effects) (bit-eqv (c::bit-array c"
 "::bit-array &optional (or c::bit-array (member t nil))) c::bit-array :no-side-ef"
 "fects) (bit-ior (c::bit-array c::bit-array &optional (or c::bit-array (member t "
 "nil))) c::bit-array :no-side-effects) (bit-nand (c::bit-array c::bit-array &opti"
 "onal (or c::bit-array (member t nil))) c::bit-array :no-side-effects) (bit-nor ("
 "c::bit-array c::bit-array &optional (or c::bit-array (member t nil))) c::bit-arr"
 "ay :no-side-effects) (bit-orc1 (c::bit-array c::bit-array &optional (or c::bit-a"
 "rray (member t nil))) c::bit-array :no-side-effects) (bit-orc2 (c::bit-array c::"
 "bit-array &optional (or c::bit-array (member t nil))) c::bit-array :no-side-effe"
 "cts) (bit-xor (c::bit-array c::bit-array &optional (or c::bit-array (member t ni"
 "l))) c::bit-array :no-side-effects) (bit-not (c::bit-array &optional (or c::bit-"
 "array (member t nil))) c::bit-array :no-side-effects) (bit-vector-p (t) c::gen-b"
 "ool :pure) (simple-bit-vector-p (t) t :pure) (si::make-pure-array (t t t t t t) "
 "array) (si::make-vector (t t t t t t) vector) (si::aset (array t &rest t) t) (si"
 "::row-major-aset (array ext::array-index t) t) (si::svset (simple-vector ext::ar"
 "ray-index t) t) (si::fill-pointer-set (vector ext::array-index) ext::array-index"
 ") (si::replace-array (array array) array) (simple-string-p (t) c::gen-bool :pure"
 ") (char (string ext::array-index) character :reader) (schar (simple-string ext::"
 "array-index) character :reader) (string (c::string-designator) string :no-side-e"
 "ffects) (string-upcase (c::string-designator &key) string :no-side-effects) (str"
 "ing-downcase (c::string-designator &key) string :no-side-effects) (string-capita"
 "lize (c::string-designator &key) string :no-side-effects) (nstring-upcase (strin"
 "g &key) string) (nstring-downcase (string &key) string) (nstring-capitalize (str"
 "ing &key) string) (string-trim (sequence c::string-designator) string :no-side-e"
 "ffects) (string-left-trim (sequence c::string-designator) string :no-side-effect"
 "s) (string-right-trim (sequence c::string-designator) string :no-side-effects) ("
 "string= (c::string-designator c::string-designator &key) c::gen-bool :no-side-ef"
 "fects) (string/= (c::string-designator c::string-designator &key) (or ext::array"
 "-index null) :no-side-effects) (string< (c::string-designator c::string-designat"
 "or &key) (or ext::array-index null) :no-side-effects) (string> (c::string-design"
 "ator c::string-designator &key) (or ext::array-index null) :no-side-effects) (st"
 "ring<= (c::string-designator c::string-designator &key) (or ext::array-index nul"
 "l) :no-side-effects) (string>= (c::string-designator c::string-designator &key) "
 "(or ext::array-index null) :no-side-effects) (string-equal (c::string-designator"
 " c::string-designator &key) c::gen-bool :no-side-effects) (string-not-equal (c::"
 "string-designator c::string-designator &key) (or ext::array-index null) :no-side"
 "-effects) (string-lessp (c::string-designator c::string-designator &key) (or ext"
 "::array-index null) :no-side-effects) (string-greaterp (c::string-designator c::"
 "string-designator &key) (or ext::array-index null) :no-side-effects) (string-not"
 "-lessp (c::string-designator c::string-designator &key) (or ext::array-index nul"
 "l) :no-side-effects) (string-not-greaterp (c::string-designator c::string-design"
 "ator &key) (or ext::array-index null) :no-side-effects) (stringp (t) c::gen-bool"
 " :predicate) (make-string (ext::array-index &key) string :no-side-effects) (si::"
 "base-string-p (t) c::gen-bool :pure) (si::char-set (string ext::array-index char"
 "acter) character) (si::schar-set (string ext::array-index character) character) "
 "(si::base-string-concatenate (&rest base-string) base-string) (copy-seq (sequenc"
 "e) sequence :no-side-effects) (elt (sequence c::sequence-index) t :no-side-effec"
 "ts) (fill (sequence t &key) sequence) (make-sequence (c::type-specifier c::seque"
 "nce-index &key) sequence :no-side-effects) (subseq (sequence c::sequence-index &"
 "optional (or c::sequence-index null)) sequence :no-side-effects) (map (c::type-s"
 "pecifier c::function-designator sequence &rest sequence) sequence) (map-into (se"
 "quence c::function-designator &rest sequence) sequence) (reduce (c::function-des"
 "ignator sequence &key) t) (count (t sequence &key) c::sequence-index) (count-if "
 "(c::function-designator sequence &key) c::sequence-index) (count-if-not (c::func"
 "tion-designator sequence &key) c::sequence-index) (length (sequence) c::sequence"
 "-index :no-side-effects) (reverse (sequence) sequence :no-side-effects) (nrevers"
 "e (sequence) sequence) (sort (sequence c::function-designator &key) sequence) (s"
 "table-sort (sequence c::function-designator &key) sequence) (find (t sequence &k"
 "ey) t :no-side-effects) (find-if (c::function-designator sequence &key) t) (find"
 "-if-not (c::function-designator sequence &key) t) (position (t sequence &key) (o"
 "r null c::sequence-index)) (position-if (c::function-designator sequence &key) ("
 "or null c::sequence-index)) (position-if-not (c::function-designator sequence &k"
 "ey) (or null c::sequence-index)) (search (sequence sequence &key) (or null c::se"
 "quence-index) :no-side-effects) (mismatch (sequence sequence &key) (or null c::s"
 "equence-index) :no-side-effects) (replace (sequence sequence &key) sequence) (su"
 "bstitute (t t sequence &key) sequence) (substitute-if (t c::function-designator "
 "sequence &key) sequence) (substitute-if-not (t c::function-designator sequence &"
 "key) sequence) (nsubstitute (t t sequence &key) sequence) (nsubstitute-if (t c::"
 "function-designator sequence &key) sequence) (nsubstitute-if-not (t c::function-"
 "designator sequence &key) sequence) (concatenate (c::type-specifier &rest sequen"
 "ce) sequence :no-side-effects) (merge (c::type-specifier sequence sequence c::fu"
 "nction-designator &key) sequence) (remove (t sequence &key) sequence) (remove-if"
 " (c::function-designator sequence &key) sequence) (remove-if-not (c::function-de"
 "signator sequence &key) sequence) (delete (t sequence &key) sequence) (delete-if"
 " (c::function-designator sequence &key) sequence) (delete-if-not (c::function-de"
 "signator sequence &key) sequence) (remove-duplicates (sequence &key) sequence) ("
 "delete-duplicates (sequence &key) sequence) (si::elt-set (sequence c::sequence-i"
 "ndex t) t) (si::make-seq-iterator (sequence &optional c::sequence-index) t :no-s"
 "ide-effects) (si::seq-iterator-ref (sequence t) t :reader) (si::seq-iterator-set"
 " (sequence t t) t :no-sp-change) (si::seq-iterator-next (sequence t) t :reader) "
 "(si::sequence-start-end (t sequence c::sequence-index (or null c::sequence-index"
 ")) (values fixnum fixnum fixnum) :no-side-effects) (si::sequence-count ((or null"
 " integer)) fixnum :no-side-effects) (make-hash-table (&key) hash-table :no-side-"
 "effects) (hash-table-p (t) c::gen-bool :pure) (hash-table-count (hash-table) ext"
 "::array-index :reader) (hash-table-rehash-size (hash-table) (or (integer 1 *) (f"
 "loat (1.0) *)) :pure) (hash-table-rehash-threshold (hash-table) (real 0 1) :pure"
 ") (hash-table-size (hash-table) ext::array-index :reader) (hash-table-test (hash"
 "-table) c::function-designator :pure) (gethash (t hash-table &optional t) (value"
 "s t c::gen-bool) :reader) (remhash (t hash-table) c::gen-bool) (maphash (c::func"
 "tion-designator hash-table) null) (clrhash (hash-table) hash-table) (sxhash (t) "
 "(integer 0 2305843009213693951) :no-side-effects) (si::hash-set (t hash-table t)"
 " t) (pathname (c::pathname-designator) pathname :no-side-effects) (make-pathname"
 " (&key) pathname :no-side-effects) (pathnamep (t) c::gen-bool :pure) (pathname-h"
 "ost (c::pathname-designator) pathname-host :no-side-effects) (pathname-device (c"
 "::pathname-designator) pathname-device :no-side-effects) (pathname-directory (c:"
 ":pathname-designator) pathname-directory :no-side-effects) (pathname-name (c::pa"
 "thname-designator) pathname-name :no-side-effects) (pathname-type (c::pathname-d"
 "esignator) pathname-type :no-side-effects) (pathname-version (c::pathname-design"
 "ator) pathname-version :no-side-effects) (load-logical-pathname-translations (st"
 "ring) c::gen-bool) (logical-pathname-translations (string) list) (logical-pathna"
 "me (c::pathname-designator) logical-pathname) (namestring (c::pathname-designato"
 "r) (or string null) :no-side-effects) (file-namestring (c::pathname-designator) "
 "(or string null) :no-side-effects) (directory-namestring (c::pathname-designator"
 ") (or string null) :no-side-effects) (host-namestring (c::pathname-designator) ("
 "or string null) :no-side-effects) (enough-namestring (c::pathname-designator &op"
 "tional c::pathname-designator) (or string null) :no-side-effects) (parse-namestr"
 "ing (c::pathname-designator &optional pathname-host c::pathname-designator &key)"
 " (values (or pathname null) (or ext::array-index null)) :no-side-effects) (wild-"
 "pathname-p (c::pathname-designator &optional (member :host :device :directory :n"
 "ame :type :version nil)) c::gen-bool :no-side-effects) (pathname-match-p (c::pat"
 "hname-designator c::pathname-designator) c::gen-bool :no-side-effects) (translat"
 "e-logical-pathname (c::pathname-designator &key) pathname :no-side-effects) (tra"
 "nslate-pathname (c::pathname-designator c::pathname-designator c::pathname-desig"
 "nator &key) pathname :no-side-effects) (merge-pathnames (c::pathname-designator "
 "&optional c::pathname-designator pathname-version) pathname :no-side-effects) (d"
 "irectory (c::pathname-designator &key) list) (probe-file (c::pathname-designator"
 ") (or pathname null)) (ensure-directories-exist (pathname &key) (values pathname"
 " c::gen-bool)) (truename (c::pathname-designator) pathname) (file-author (c::pat"
 "hname-designator) (or string null)) (file-write-date (c::pathname-designator) (o"
 "r c::universal-time null)) (rename-file (c::pathname-designator c::pathname-desi"
 "gnator) (values pathname pathname pathname)) (delete-file (c::pathname-designato"
 "r) t) (ext::file-kind (c::pathname-designator c::gen-bool) symbol) (ext::chdir ("
 "c::pathname-designator &optional c::gen-bool) pathname) (ext::getcwd (&optional "
 "c::gen-bool) pathname) (ext::mkstemp (c::pathname-designator) (or null pathname)"
 ") (ext::copy-file (c::pathname-designator c::pathname-designator) c::gen-bool) ("
 "si::mkdir (c::pathname-designator unsigned-byte) string) (si::rmdir (c::pathname"
 "-designator) null) (input-stream-p (stream) c::gen-bool :reader) (output-stream-"
 "p (stream) c::gen-bool :reader) (interactive-stream-p (stream) c::gen-bool :read"
 "er) (open-stream-p (stream) c::gen-bool :reader) (stream-element-type (stream) c"
 "::type-specifier :reader) (streamp (t) c::gen-bool :pure) (read-byte (stream &op"
 "tional c::gen-bool t) t) (write-byte (integer stream) integer) (peek-char (&opti"
 "onal (or character boolean) c::stream-designator c::gen-bool t c::gen-bool) t) ("
 "read-char (&optional c::stream-designator c::gen-bool t c::gen-bool) t) (read-ch"
 "ar-no-hang (&optional c::stream-designator c::gen-bool t c::gen-bool) t) (terpri"
 " (&optional c::stream-designator) null) (fresh-line (&optional c::stream-designa"
 "tor) c::gen-bool) (unread-char (character &optional c::stream-designator) null) "
 "(write-char (character &optional c::stream-designator) character) (read-line (&o"
 "ptional c::stream-designator c::gen-bool t c::gen-bool) (values t c::gen-bool)) "
 "(write-string (string &optional c::stream-designator &key) string) (write-line ("
 "string &optional c::stream-designator &key) string) (read-sequence (sequence str"
 "eam &key) c::sequence-index) (write-sequence (sequence stream &key) sequence) (f"
 "ile-length (stream) (or unsigned-byte null)) (file-position (stream &optional c:"
 ":file-position-designator) t) (file-string-length (stream (or string character))"
 " (or unsigned-byte null)) (open (c::pathname-designator &key) (or file-stream nu"
 "ll)) (stream-external-format (stream) c::external-file-format :reader) (close (s"
 "tream &key) t) (listen (&optional c::stream-designator) c::gen-bool) (clear-inpu"
 "t (&optional c::stream-designator) null) (finish-output (&optional c::stream-des"
 "ignator) null) (force-output (&optional c::stream-designator) null) (clear-outpu"
 "t (&optional c::stream-designator) null) (y-or-n-p (&optional c::format-control "
 "&rest t) c::gen-bool) (yes-or-no-p (&optional c::format-control &rest t) c::gen-"
 "bool) (make-synonym-stream (symbol) synonym-stream) (synonym-stream-symbol (syno"
 "nym-stream) symbol) (broadcast-stream-streams (broadcast-stream) list :pure) (ma"
 "ke-broadcast-stream (&rest stream) broadcast-stream) (make-two-way-stream (strea"
 "m stream) two-way-stream) (two-way-stream-input-stream (two-way-stream) stream :"
 "pure) (two-way-stream-output-stream (two-way-stream) stream :pure) (echo-stream-"
 "output-stream (echo-stream) stream :pure) (echo-stream-input-stream (echo-stream"
 ") stream :pure) (make-echo-stream (stream stream) echo-stream) (concatenated-str"
 "eam-streams (concatenated-stream) list :reader) (make-concatenated-stream (&rest"
 " stream) concatenated-stream) (get-output-stream-string (string-stream) string :"
 "reader) (make-string-input-stream (string &optional ext::array-index (or ext::ar"
 "ray-index null)) string-stream :reader) (make-string-output-stream (&key) string"
 "-stream :reader) (si::make-string-output-stream-from-string (string) string-stre"
 "am :reader) (si::open-client-stream (t unsigned-byte) stream) (si::open-server-s"
 "tream (unsigned-byte) stream) (si::open-unix-socket-stream (base-string) stream)"
 " (si::lookup-host-entry (t) (values (or null string) list list)) (si::copy-strea"
 "m (stream stream) t) (copy-pprint-dispatch (&optional (or si::pprint-dispatch-ta"
 "ble null)) si::pprint-dispatch-table :no-side-effects) (pprint-dispatch (t &opti"
 "onal (or si::pprint-dispatch-table null)) (values c::function-designator c::gen-"
 "bool)) (pprint-fill (c::stream-designator t &optional c::gen-bool c::gen-bool) n"
 "ull) (pprint-linear (c::stream-designator t &optional c::gen-bool c::gen-bool) n"
 "ull) (pprint-tabular (c::stream-designator t &optional c::gen-bool c::gen-bool u"
 "nsigned-byte) null) (pprint-indent ((member :block :current) real &optional c::s"
 "tream-designator) null) (pprint-newline ((member :linear :fill :miser :mandatory"
 ") &optional c::stream-designator) null) (pprint-tab ((member :line :section :lin"
 "e-relative :section-relative) unsigned-byte unsigned-byte &optional c::stream-de"
 "signator) null) (set-pprint-dispatch (c::type-specifier (or c::function-designat"
 "or null) &optional real si::pprint-dispatch-table) null) (write (t &key) t) (pri"
 "n1 (t &optional c::stream-designator) t) (princ (t &optional c::stream-designato"
 "r) t) (print (t &optional c::stream-designator) t) (pprint (t &optional c::strea"
 "m-designator) (values)) (write-to-string (t &key) string) (prin1-to-string (t) s"
 "tring) (princ-to-string (t) string) (format ((or c::stream-designator string) c:"
 ":format-control &rest t) (or null string)) (copy-readtable (&optional c::readtab"
 "le-designator (or readtable null)) readtable :no-side-effects) (make-dispatch-ma"
 "cro-character (character &optional c::gen-bool readtable) (member t)) (read (&op"
 "tional c::stream-designator c::gen-bool t c::gen-bool) t) (read-preserving-white"
 "space (&optional c::stream-designator c::gen-bool t c::gen-bool) t) (read-delimi"
 "ted-list (character &optional c::stream-designator c::gen-bool) list) (read-from"
 "-string (string &optional c::gen-bool t &key) (values t ext::array-index)) (read"
 "table-case (readtable) (member :upcase :downcase :preserve :invert) :reader) (re"
 "adtablep (t) c::gen-bool :pure) (get-dispatch-macro-character (character charact"
 "er &optional c::readtable-designator) (or c::function-designator null) :reader) "
 "(set-dispatch-macro-character (character character c::function-designator &optio"
 "nal c::readtable-designator) (member t)) (get-macro-character (character &option"
 "al c::readtable-designator) (values (or c::function-designator null) c::gen-bool"
 ") :reader) (set-macro-character (character c::function-designator &optional c::g"
 "en-bool c::readtable-designator) (member t)) (set-syntax-from-char (character ch"
 "aracter &optional readtable c::readtable-designator) (member t)) (si::string-to-"
 "object (string &optional t) t) (si::standard-readtable nil readtable) (compile-f"
 "ile (c::pathname-designator &key) (values (or pathname null) c::gen-bool c::gen-"
 "bool)) (compile-file-pathname (c::pathname-designator &key) pathname :no-side-ef"
 "fects) (load ((or stream c::pathname-designator) &key) c::gen-bool) (provide (c:"
 ":string-designator) t) (require (c::string-designator &optional list) t) (si::cl"
 "ear-compiler-properties (symbol) t) (decode-universal-time (c::universal-time &o"
 "ptional c::time-zone) (values (integer 0 59) (integer 0 59) (integer 0 23) (inte"
 "ger 1 31) (integer 1 12) unsigned-byte (integer 0 6) c::gen-bool c::time-zone) :"
 "pure) (encode-universal-time ((integer 0 59) (integer 0 59) (integer 0 23) (inte"
 "ger 1 31) (integer 1 12) unsigned-byte &optional c::time-zone) c::universal-time"
 " :pure) (get-universal-time nil c::universal-time :no-side-effects) (get-decoded"
 "-time nil (values (integer 0 59) (integer 0 59) (integer 0 23) (integer 1 31) (i"
 "nteger 1 12) unsigned-byte (integer 0 6) c::gen-bool c::time-zone) :no-side-effe"
 "cts) (sleep ((real 0 *)) null) (apropos (c::string-designator &optional (or null"
 " c::package-designator)) (values)) (apropos-list (c::string-designator &optional"
 " (or null c::package-designator)) list) (describe (t &optional c::stream-designa"
 "tor) (values)) (get-internal-real-time nil unsigned-byte :no-side-effects) (get-"
 "internal-run-time nil unsigned-byte :no-side-effects) (disassemble ((or c::funct"
 "ion-designator list)) null) (room (&optional (member t nil :default)) (values &r"
 "est t)) (ed (&optional (or null pathname string c::function-name)) (values &rest"
 " t)) (inspect (t) (values &rest t)) (dribble (&optional c::pathname-designator) "
 "(values &rest t)) (lisp-implementation-type nil (or string null) :pure) (lisp-im"
 "plementation-version nil (or string null) :pure) (short-site-name nil (or string"
 " null) :pure) (long-site-name nil (or string null) :pure) (machine-instance nil "
 "(or string null) :pure) (machine-type nil (or string null) :pure) (machine-versi"
 "on nil (or string null) :pure) (software-type nil (or string null) :pure) (softw"
 "are-version nil (or string null) :pure) (user-homedir-pathname (&optional pathna"
 "me-host) (or pathname null) :no-side-effects) (si::room-report nil (values t t t"
 " t t t t t)) (si::reset-gbc-count nil t) (ext::gc (&optional c::gen-bool) t) (ex"
 "t::quit (&optional fixnum) t) (ext::argc nil c::sequence-index) (ext::argv (unsi"
 "gned-byte) base-string) (ext::getenv (string) (or null string)) (ext::environ ni"
 "l list) (ext::system (string) fixnum) (ext::getpid nil si::index) (ext::make-pip"
 "e nil (or two-way-stream null)) (ext::run-program (string list &key) (values (or"
 " null two-way-stream) (or null integer) ext::external-process)) (ext::make-weak-"
 "pointer (t) ext::weak-pointer :no-side-effects) (ext::weak-pointer-value (ext::w"
 "eak-pointer) t) (si::unbound nil t :pure) (si::traced-old-definition (t) t :no-s"
 "ide-effects) (si::allocate-raw-instance (t t fixnum) ext::instance) (clos::safe-"
 "instance-ref (t fixnum) t) (si::instance-ref (t fixnum) t :reader) (si::instance"
 "-sig (standard-object) list :reader) (si::instance-set (t fixnum t) t) (si::inst"
 "ance-class (t) class :reader) (si::instance-class-set (t t) t) (si::instancep (t"
 ") t :pure) (si::sl-boundp (t) t :reader) (si::sl-makunbound (t fixnum) t) (clos:"
 ":standard-instance-access (standard-object fixnum) t :reader) (clos::funcallable"
 "-standard-instance-access (clos::funcallable-standard-object fixnum) t :reader) "
 "(c::associate-methods-to-gfun (generic-function *) generic-function) (clos::need"
 "-to-make-load-form-p (t t) c::gen-bool :pure) (clos::load-defclass (t t t t) t) "
 "(si::pointer (t) unsigned-byte) (si::foreign-data-p (t) c::gen-bool :pure) (ext:"
 ":negative-fixnum-p (t) c::gen-bool :pure) (ext::non-negative-fixnum-p (t) c::gen"
 "-bool :pure) (ext::non-positive-fixnum-p (t) c::gen-bool :pure) (ext::positive-f"
 "ixnum-p (t) c::gen-bool :pure) (ext::array-index-p (t) c::gen-bool :pure) (ext::"
 "negative-integer-p (t) c::gen-bool :pure) (ext::non-negative-integer-p (t) c::ge"
 "n-bool :pure) (ext::non-positive-integer-p (t) c::gen-bool :pure) (ext::positive"
 "-integer-p (t) c::gen-bool :pure) (ext::negative-rational-p (t) c::gen-bool :pur"
 "e) (ext::non-negative-rational-p (t) c::gen-bool :pure) (ext::non-positive-ratio"
 "nal-p (t) c::gen-bool :pure) (ext::positive-rational-p (t) c::gen-bool :pure) (e"
 "xt::negative-ratio-p (t) c::gen-bool :pure) (ext::non-negative-ratio-p (t) c::ge"
 "n-bool :pure) (ext::non-positive-ratio-p (t) c::gen-bool :pure) (ext::positive-r"
 "atio-p (t) c::gen-bool :pure) (ext::negative-real-p (t) c::gen-bool :pure) (ext:"
 ":non-negative-real-p (t) c::gen-bool :pure) (ext::non-positive-real-p (t) c::gen"
 "-bool :pure) (ext::positive-real-p (t) c::gen-bool :pure) (ext::negative-float-p"
 " (t) c::gen-bool :pure) (ext::non-negative-float-p (t) c::gen-bool :pure) (ext::"
 "non-positive-float-p (t) c::gen-bool :pure) (ext::positive-float-p (t) c::gen-bo"
 "ol :pure) (ext::negative-short-float-p (t) c::gen-bool :pure) (ext::non-negative"
 "-short-float-p (t) c::gen-bool :pure) (ext::non-positive-short-float-p (t) c::ge"
 "n-bool :pure) (ext::positive-short-float-p (t) c::gen-bool :pure) (ext::negative"
 "-single-float-p (t) c::gen-bool :pure) (ext::non-negative-single-float-p (t) c::"
 "gen-bool :pure) (ext::non-positive-single-float-p (t) c::gen-bool :pure) (ext::p"
 "ositive-single-float-p (t) c::gen-bool :pure) (ext::negative-double-float-p (t) "
 "c::gen-bool :pure) (ext::non-negative-double-float-p (t) c::gen-bool :pure) (ext"
 "::non-positive-double-float-p (t) c::gen-bool :pure) (ext::positive-double-float"
 "-p (t) c::gen-bool :pure) (ext::negative-long-float-p (t) c::gen-bool :pure) (ex"
 "t::non-negative-long-float-p (t) c::gen-bool :pure) (ext::non-positive-long-floa"
 "t-p (t) c::gen-bool :pure) (ext::positive-long-float-p (t) c::gen-bool :pure)) ";
#define compiler_data_text_size 45439
