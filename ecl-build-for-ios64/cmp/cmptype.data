static const char compiler_data_text[] = 
":safe c::c1form c::and-form-type ((fixnum . 0) (character . #\\ ) (long-float 0.0"
 "l0) (double-float . 0.0d0) (single-float . 0.0)) :only-small-values c::default-i"
 "nit si::deftype-definition c::expand-deftype c::*cmp-env* c::lambda-type-check-a"
 "ssociate c::lambda-type-check-precise (si::c-global) si::no-check-type c::var c:"
 ":type-assertion c::*current-function* c::extract-lambda-type-checks ((:object) :"
 "void \"@0;if (ecl_unlikely(ECL_ATOM(#0))) FEtype_error_cons(#0);\" :one-liner nil)"
 " ((:object) :void \"if (ecl_unlikely(!ECL_ARRAYP(#0))) FEtype_error_array(#0);\" :"
 "one-liner nil) ((:object) :void \"if (ecl_unlikely(!ECL_LISTP(#0))) FEtype_error_"
 "list(#0);\" :one-liner nil) ((:object) :void \"if (ecl_unlikely(!(ECL_LISTP(#0) ||"
 " ECL_VECTORP(#0))))\n           FEtype_error_sequence(#0);\" :one-liner nil) ((:bo"
 "ol :object :object) :void \"if (ecl_unlikely(!(#0)))\n         FEwrong_type_argume"
 "nt(#1,#2);\" :one-liner nil) c::type-error-check #:%value c::assert-type-if-known"
 " 0 0 0 0 c::replace-invalid-types c::optional-type-check 0 c::c1form-primary-typ"
 "e c::type-and c::cmperr c::cmpwarn 0 c::var-type c::c1constant-value c::c1nil 0 "
 "0 c::get-arg-types 0 c::var-name 0 c::policy-check-arguments-type c::fun-name c:"
 ":cmpnote 0 0 0 0 c::policy-assume-right-type ";
#define compiler_data_text_size 1245
