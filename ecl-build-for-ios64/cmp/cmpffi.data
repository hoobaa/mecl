static const char compiler_data_text[] = 
"c::+all-integer-rep-type-pairs+ c::+all-integer-rep-types+ c::+all-number-rep-ty"
 "pes+ c::+representation-types+ c::+representation-type-hash+ (:byte :unsigned-by"
 "te :unsigned-short :short :unsigned-int :int :unsigned-long :long :unsigned-long"
 "-long :long-long :cl-index :fixnum :uint8-t :int8-t :uint16-t :int16-t :uint32-t"
 " :int32-t :uint64-t :int64-t . #1=(:float :double :long-double)) c::c-number-rep"
 "-type-p (:byte :unsigned-byte :unsigned-short :short :unsigned-int :int :unsigne"
 "d-long :long :unsigned-long-long :long-long :cl-index :fixnum :uint8-t :int8-t :"
 "uint16-t :int16-t :uint32-t :int32-t :uint64-t :int64-t) c::c-integer-rep-type-p"
 " c::c-integer-rep-type-bits c::c-number-type-p c::c-integer-type-p c::c-integer-"
 "type-bits c::rep-type-record c::rep-type->lisp-type c::lisp-type->rep-type c::re"
 "p-type-name c::lisp-type-p c::single-float-value 0 c::double-float-value 0 c::lo"
 "ng-float-value 0 c::wt-to-object-conversion c::wt-from-object-conversion c::call"
 " 0 c::call-local 0 0 c::loc-movable-p c::fixnum-value c::character-value c::bind"
 " c::lcl c::call-normal c::loc-type 0 0 c::trash :wchar :long-double c::jump-true"
 " 0 c::jump-false 0 :bool c::loc-representation-type 0 0 0 0 0 0 0 0 0 0 :char* 0"
 " c::wt-coerce-loc c::*clines-string-list* (progn) c::c1clines c::*compiler-outpu"
 "t1* :permanent c::output-clines :side-effects :one-liner (:one-liner :side-effec"
 "ts) (values &rest t) ((values &rest t)) :args c::c1c-inline :rep-type c::*destin"
 "ation* c::value c::produce-inline-loc c::*temp* c::*inline-blocks* c::c2c-inline"
 " c::coerce-loc c::coerce-locs c::wt-c-inline-loc 0 0 c::c-inline-safe-string 0 0"
 " 0 0 0 0 c::c-number-rep-type-bits 0 0 c::cmperr 0 0 0 0 c::wt 0 c::policy-assum"
 "e-no-errors 0 0 c::var-p c::var-type c::vv-p c::vv-type 0 c::var-rep-type 0 c::c"
 "mpwarn 0 0 c::add-object 0 c::c1expr c::make-c1form* 0 c::wt-nl c::cmpnote c::op"
 "en-inline-block c::set-loc c::make-lcl-var 0 c::inline-args c::unwind-exit c::cl"
 "ose-inline-blocks 0 0 0 c::c-filtered-string ((:byte . -8) (:unsigned-byte . 8) "
 "(:unsigned-short . 16) (:short . -16) (:unsigned-int . 32) (:int . 32) (:unsigne"
 "d-long . 64) (:long . 64) (:unsigned-long-long . 64) (:long-long . 64) (:cl-inde"
 "x . 64) (:fixnum . -64) (:uint8-t . 8) (:int8-t . -8) (:uint16-t . 16) (:int16-t"
 " . -16) (:uint32-t . 32) (:int32-t . -32) (:uint64-t . 64) (:int64-t . -64)) #1#"
 " (:byte #2=((signed-byte 8) \"int8_t\" \"ecl_make_int8_t\" \"ecl_to_int8_t\" \"ecl_fixn"
 "um\") :unsigned-byte #3=((unsigned-byte 8) \"uint8_t\" \"ecl_make_uint8_t\" \"ecl_to_u"
 "int8_t\" \"ecl_fixnum\") :fixnum (fixnum \"cl_fixnum\" \"ecl_make_fixnum\" \"ecl_to_fixn"
 "um\" \"ecl_fixnum\") :int ((integer -2147483648 2147483647) \"int\" \"ecl_make_int\" \"e"
 "cl_to_int\" \"ecl_to_int\") :unsigned-int ((integer 0 4294967295) \"unsigned int\" \"e"
 "cl_make_uint\" \"ecl_to_uint\" \"ecl_to_uint\") :long ((integer -9223372036854775808 "
 "9223372036854775807) \"long\" \"ecl_make_long\" \"ecl_to_long\" \"ecl_to_long\") :unsign"
 "ed-long ((integer 0 18446744073709551615) \"unsigned long\" \"ecl_make_ulong\" \"ecl_"
 "to_ulong\" \"ecl_fixnum\") :cl-index ((integer 0 2305843009213693951) \"cl_index\" \"e"
 "cl_make_unsigned_integer\" \"ecl_to_cl_index\" \"ecl_fixnum\") :long-long ((signed-by"
 "te 64) \"ecl_long_long_t\" \"ecl_make_long_long\" \"ecl_to_long_long\" \"ecl_to_long_lo"
 "ng\") :unsigned-long-long ((unsigned-byte 64) \"ecl_ulong_long_t\" \"ecl_make_ulong_"
 "long\" \"ecl_to_ulong_long\" \"ecl_to_ulong_long\") :float (single-float \"float\" \"ecl"
 "_make_single_float\" \"ecl_to_float\" \"ecl_single_float\") :double (double-float \"do"
 "uble\" \"ecl_make_double_float\" \"ecl_to_double\" \"ecl_double_float\") :long-double ("
 "long-float \"long double\" \"ecl_make_long_float\" \"ecl_to_long_double\" \"ecl_long_fl"
 "oat\") :unsigned-char (base-char \"unsigned char\" \"CODE_CHAR\" \"ecl_base_char_code\""
 " \"CHAR_CODE\") :char (base-char \"char\" \"CODE_CHAR\" \"ecl_base_char_code\" \"CHAR_COD"
 "E\") :wchar (character \"ecl_character\" \"CODE_CHAR\" \"ecl_char_code\" \"CHAR_CODE\") :"
 "object (t \"cl_object\") :bool (t \"bool\" \"ecl_make_bool\" \"ecl_to_bool\" \"ecl_to_boo"
 "l\") :void (nil \"void\") :pointer-void (si::foreign-data \"void*\" \"ecl_make_pointer"
 "\" \"ecl_to_pointer\" \"ecl_to_pointer\") :cstring (string \"char*\" \"ecl_cstring_to_ba"
 "se_string_or_nil\") :char* (string \"char*\") :int8-t #2# :uint8-t #3# :int16-t ((u"
 "nsigned-byte 16) \"ecl_int16_t\" \"ecl_make_int16_t\" \"ecl_to_int16_t\" \"ecl_fixnum\")"
 " :uint16-t ((signed-byte 16) \"ecl_uint16_t\" \"ecl_make_uint16_t\" \"ecl_to_uint16_t"
 "\" \"ecl_fixnum\" \"ecl_fixnum\") :int32-t ((unsigned-byte 32) \"ecl_int32_t\" \"ecl_mak"
 "e_int32_t\" \"ecl_to_int32_t\" \"ecl_fixnum\") :uint32-t ((signed-byte 32) \"ecl_uint3"
 "2_t\" \"ecl_make_uint32_t\" \"ecl_to_uint32_t\" \"ecl_fixnum\") :int64-t ((signed-byte "
 "64) \"ecl_int64_t\" \"ecl_make_int64_t\" \"ecl_to_int64_t\" \"ecl_to_int64_t\") :uint64-"
 "t ((signed-byte 64) \"ecl_uint64_t\" \"ecl_make_uint64_t\" \"ecl_to_uint64_t\" \"ecl_to"
 "_uint64_t\") :short ((integer -32768 32767) \"short\" \"ecl_make_short\" \"ecl_to_shor"
 "t\" \"ecl_fixnum\") :unsigned-short ((integer 0 65535) \"unsigned short\" \"ecl_make_u"
 "short\" \"ecl_to_ushort\" \"ecl_fixnum\")) ";
#define compiler_data_text_size 4918
