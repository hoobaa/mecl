static const char compiler_data_text[] = 
"clos::+builtin-classes-pre-array+ clos::make-empty-standard-class clos::remove-a"
 "ccessors clos::std-class clos::sealedp 0 :metaclass :direct-superclasses :direct"
 "-slots :index clos::compute-clos-class-precedence-list 0 clos::parse-slots clos:"
 ":make-simple-slotd 0 ((standard-class) (clos::standard-effective-slot-definition"
 ") (clos::standard-direct-slot-definition) (standard-class :metaclass nil :direct"
 "-slots #1=(#2=(clos::flag :initform nil :accessor clos::eql-specializer-flag) #3"
 "=(clos::direct-methods :initform nil :accessor clos::specializer-direct-methods)"
 " #4=(clos::direct-generic-functions :initform nil :accessor clos::specializer-di"
 "rect-generic-functions) #5=(clos::name :initarg :name :initform nil :accessor cl"
 "os::class-id) #6=(clos::direct-superclasses :initarg :direct-superclasses :acces"
 "sor clos::class-direct-superclasses) #7=(clos::direct-subclasses :initform nil :"
 "accessor clos::class-direct-subclasses) #8=(clos::slots :accessor clos::class-sl"
 "ots) #9=(clos::precedence-list :accessor clos::class-precedence-list) #10=(clos:"
 ":direct-slots :initarg :direct-slots :accessor clos::class-direct-slots) #11=(cl"
 "os::direct-default-initargs :initarg :direct-default-initargs :initform nil :acc"
 "essor clos::class-direct-default-initargs) #12=(clos::default-initargs :accessor"
 " clos::class-default-initargs) #13=(clos::finalized :initform nil :accessor clos"
 "::class-finalized-p) #14=(clos::docstring :initarg :documentation :initform nil)"
 " #15=(clos::size :accessor clos::class-size) #16=(clos::sealedp :initarg :sealed"
 "p :initform nil :accessor clos::class-sealedp) #17=(clos::prototype) #18=(clos::"
 "dependents :initform nil :accessor clos::class-dependents) #19=(clos::valid-init"
 "args :accessor clos::class-valid-initargs) #20=(clos::slot-table :accessor clos:"
 ":slot-table) #21=(clos::location-table :initform nil :accessor clos::class-locat"
 "ion-table) (clos::optimize-slot-access) (clos::forward))) (clos::standard-direct"
 "-slot-definition :direct-slots #22=((clos::name :initarg :name :initform nil :ac"
 "cessor clos::slot-definition-name) (clos::initform :initarg :initform :initform "
 "clos::+initform-unsupplied+ :accessor clos::slot-definition-initform) (clos::ini"
 "tfunction :initarg :initfunction :initform nil :accessor clos::slot-definition-i"
 "nitfunction) (clos::declared-type :initarg :type :initform t :accessor clos::slo"
 "t-definition-type) (clos::allocation :initarg :allocation :initform :instance :a"
 "ccessor clos::slot-definition-allocation) (clos::initargs :initarg :initargs :in"
 "itform nil :accessor clos::slot-definition-initargs) (clos::readers :initarg :re"
 "aders :initform nil :accessor clos::slot-definition-readers) (clos::writers :ini"
 "targ :writers :initform nil :accessor clos::slot-definition-writers) (clos::docs"
 "tring :initarg :documentation :initform nil :accessor clos::slot-definition-docu"
 "mentation) (ext::location :initarg :location :initform nil :accessor clos::slot-"
 "definition-location))) (clos::standard-effective-slot-definition :direct-slots #"
 "22#) (t :index 0) (standard-object :direct-superclasses (t)) (clos::metaobject :"
 "direct-superclasses (standard-object)) (clos::slot-definition :direct-superclass"
 "es (clos::metaobject) :direct-slots #22#) (clos::standard-slot-definition :direc"
 "t-superclasses (clos::slot-definition) :direct-slots #22#) (clos::direct-slot-de"
 "finition :direct-superclasses (clos::slot-definition) :direct-slots #22#) (clos:"
 ":effective-slot-definition :direct-superclasses (clos::slot-definition) :direct-"
 "slots #22#) (clos::standard-direct-slot-definition :direct-superclasses (clos::s"
 "tandard-slot-definition clos::direct-slot-definition) :direct-slots #22#) (clos:"
 ":standard-effective-slot-definition :direct-superclasses (clos::standard-slot-de"
 "finition clos::effective-slot-definition) :direct-slots #22#) (method-combinatio"
 "n :direct-superclasses (clos::metaobject) :direct-slots ((clos::name :initarg :n"
 "ame :accessor clos::method-combination-name) (clos::compiler :initarg :compiler "
 ":accessor clos::method-combination-compiler) (clos::options :initarg :options :a"
 "ccessor clos::method-combination-options))) (clos::specializer :direct-superclas"
 "ses (clos::metaobject) :direct-slots (#2# #3# #4#)) (clos::eql-specializer :dire"
 "ct-superclasses (clos::specializer) :direct-slots ((clos::flag :initform t :acce"
 "ssor clos::eql-specializer-flag) (clos::direct-methods :initform nil :accessor c"
 "los::specializer-direct-methods) (clos::direct-generic-functions :initform nil :"
 "accessor clos::specializer-direct-generic-functions) (clos::object :initarg :obj"
 "ect :accessor clos::eql-specializer-object))) (class :direct-superclasses (clos:"
 ":specializer) :direct-slots #23=(#2# #3# #4# #5# #6# #7# #8# #9# #10# #11# #12# "
 "#13# #14# #15# #16# #17# #18# #19# #20# #21#)) (clos::forward-referenced-class :"
 "direct-superclasses (class) :direct-slots #23#) (built-in-class :direct-supercla"
 "sses (class) :direct-slots #1#) (clos::std-class :direct-superclasses (class) :d"
 "irect-slots #1#) (standard-class :direct-superclasses (clos::std-class) :direct-"
 "slots #1# :metaclass standard-class) (clos::funcallable-standard-class :direct-s"
 "uperclasses (clos::std-class) :direct-slots #1#) (sequence :metaclass built-in-c"
 "lass :index 1 :direct-superclasses #24=(t)) (list :metaclass built-in-class :ind"
 "ex 2 :direct-superclasses (sequence)) (cons :metaclass built-in-class :index 3 :"
 "direct-superclasses (list)) (array :metaclass built-in-class :index 4 :direct-su"
 "perclasses #24#) (vector :metaclass built-in-class :index 5 :direct-superclasses"
 " (array sequence)) (string :metaclass built-in-class :index 6 :direct-superclass"
 "es (vector)) (base-string :metaclass built-in-class :index 7 :direct-superclasse"
 "s (string vector)) (bit-vector :metaclass built-in-class :index 8 :direct-superc"
 "lasses (vector)) (stream :metaclass built-in-class :index 9 :direct-superclasses"
 " #24#) (ext::ansi-stream :metaclass built-in-class :index 10 :direct-superclasse"
 "s (stream)) (file-stream :metaclass built-in-class :index 11 :direct-superclasse"
 "s (ext::ansi-stream)) (echo-stream :metaclass built-in-class :index 12 :direct-s"
 "uperclasses (ext::ansi-stream)) (string-stream :metaclass built-in-class :index "
 "13 :direct-superclasses (ext::ansi-stream)) (two-way-stream :metaclass built-in-"
 "class :index 14 :direct-superclasses (ext::ansi-stream)) (synonym-stream :metacl"
 "ass built-in-class :index 15 :direct-superclasses (ext::ansi-stream)) (broadcast"
 "-stream :metaclass built-in-class :index 16 :direct-superclasses (ext::ansi-stre"
 "am)) (concatenated-stream :metaclass built-in-class :index 17 :direct-superclass"
 "es (ext::ansi-stream)) (ext::sequence-stream :metaclass built-in-class :index 18"
 " :direct-superclasses (ext::ansi-stream)) (character :metaclass built-in-class :"
 "index 19 :direct-superclasses #24#) (number :metaclass built-in-class :index 20 "
 ":direct-superclasses #24#) (real :metaclass built-in-class :index 21 :direct-sup"
 "erclasses (number)) (rational :metaclass built-in-class :index 22 :direct-superc"
 "lasses (real)) (integer :metaclass built-in-class :index 23 :direct-superclasses"
 " (rational)) (ratio :metaclass built-in-class :index 24 :direct-superclasses (ra"
 "tional)) (float :metaclass built-in-class :index 25 :direct-superclasses (real))"
 " (complex :metaclass built-in-class :index 26 :direct-superclasses (number)) (sy"
 "mbol :metaclass built-in-class :index 27 :direct-superclasses #24#) (null :metac"
 "lass built-in-class :index 28 :direct-superclasses (symbol list)) (keyword :meta"
 "class built-in-class :index 29 :direct-superclasses (symbol)) (package :metaclas"
 "s built-in-class :index 30 :direct-superclasses #24#) (function :metaclass built"
 "-in-class :index 31 :direct-superclasses #24#) (pathname :metaclass built-in-cla"
 "ss :index 32 :direct-superclasses #24#) (logical-pathname :metaclass built-in-cl"
 "ass :index 33 :direct-superclasses (pathname)) (hash-table :metaclass built-in-c"
 "lass :index 34 :direct-superclasses #24#) (random-state :metaclass built-in-clas"
 "s :index 35 :direct-superclasses #24#) (readtable :metaclass built-in-class :ind"
 "ex 36 :direct-superclasses #24#) (si::code-block :metaclass built-in-class :inde"
 "x 37 :direct-superclasses #24#) (si::foreign-data :metaclass built-in-class :ind"
 "ex 38 :direct-superclasses #24#) (si::frame :metaclass built-in-class :index 39 "
 ":direct-superclasses #24#) (ext::weak-pointer :metaclass built-in-class :index 4"
 "0 :direct-superclasses #24#) (mp::process :metaclass built-in-class :index 41 :d"
 "irect-superclasses #24#) (mp::lock :metaclass built-in-class :index 42 :direct-s"
 "uperclasses #24#) (mp::rwlock :metaclass built-in-class :index 43 :direct-superc"
 "lasses #24#) (mp::condition-variable :metaclass built-in-class :index 44 :direct"
 "-superclasses #24#) (mp::semaphore :metaclass built-in-class :index 45 :direct-s"
 "uperclasses #24#) (mp::barrier :metaclass built-in-class :index 46 :direct-super"
 "classes #24#) (mp::mailbox :metaclass built-in-class :index 47 :direct-superclas"
 "ses #24#) (clos::funcallable-standard-object :direct-superclasses (standard-obje"
 "ct function)) (generic-function :metaclass clos::funcallable-standard-class :dir"
 "ect-superclasses (clos::metaobject clos::funcallable-standard-object)) (standard"
 "-generic-function :direct-superclasses (generic-function) :direct-slots ((clos::"
 "name :initarg :name :initform nil :reader clos::generic-function-name) (clos::sp"
 "ec-list :initform nil :accessor clos::generic-function-spec-list) (method-combin"
 "ation :initarg :method-combination :initform (clos::find-method-combination (clo"
 "s::class-prototype (find-class 'standard-generic-function)) 'standard nil) :acce"
 "ssor clos::generic-function-method-combination) (clos::lambda-list :initarg :lam"
 "bda-list :accessor clos::generic-function-lambda-list) (clos::argument-precedenc"
 "e-order :initarg :argument-precedence-order :initform nil :accessor clos::generi"
 "c-function-argument-precedence-order) (clos::method-class :initarg :method-class"
 " :initform (find-class 'standard-method)) (clos::docstring :initarg :documentati"
 "on :initform nil) (clos::methods :initform nil :accessor clos::generic-function-"
 "methods) (clos::a-p-o-function :initform nil :accessor clos::generic-function-a-"
 "p-o-function) (clos::declarations :initarg :declarations :initform nil :accessor"
 " clos::generic-function-declarations) (clos::dependents :initform nil :accessor "
 "clos::generic-function-dependents)) :metaclass clos::funcallable-standard-class)"
 " (method :direct-superclasses (clos::metaobject)) (standard-method :direct-super"
 "classes (method) :direct-slots (#25=(clos::the-generic-function :initarg :generi"
 "c-function :initform nil :accessor clos::method-generic-function) #26=(clos::lam"
 "bda-list :initarg :lambda-list :accessor clos::method-lambda-list) #27=(clos::sp"
 "ecializers :initarg :specializers :accessor clos::method-specializers) #28=(clos"
 "::qualifiers :initform nil :initarg :qualifiers :accessor method-qualifiers) #29"
 "=(clos::the-function :initarg :function :accessor clos::method-function) #30=(cl"
 "os::docstring :initarg :documentation :initform nil) #31=(clos::plist :initform "
 "nil :initarg :plist :accessor clos::method-plist) #32=(clos::keywords :initform "
 "nil :accessor clos::method-keywords))) (clos::standard-accessor-method :direct-s"
 "uperclasses (standard-method) :direct-slots #33=(#25# #26# #27# #28# #29# #30# #"
 "31# #32# (clos::slot-definition :initarg :slot-definition :initform nil :accesso"
 "r clos::accessor-method-slot-definition))) (clos::standard-reader-method :direct"
 "-superclasses (clos::standard-accessor-method) :direct-slots #33#) (clos::standa"
 "rd-writer-method :direct-superclasses (clos::standard-accessor-method) :direct-s"
 "lots #33#) (clos::standard-optimized-reader-method :direct-superclasses (clos::s"
 "tandard-reader-method) :direct-slots #33#) (clos::standard-optimized-writer-meth"
 "od :direct-superclasses (clos::standard-writer-method) :direct-slots #33#) (stru"
 "cture-class :direct-superclasses (class) :direct-slots (#2# #3# #4# #5# #6# #7# "
 "#8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# (clos::slot-"
 "descriptions) (clos::initial-offset) (clos::defstruct-form) (clos::constructors)"
 " (documentation) (clos::copier) (clos::predicate) (clos::print-function))) (stru"
 "cture-object :metaclass structure-class :direct-superclasses (t))) ";
#define compiler_data_text_size 12067
