static const char compiler_data_text[] = 
"si::unique-id si::*condition-restarts* compute-restarts si::restart-print si::co"
 "py-restart si::restart-p 0 si::make-restart si::name restart-bind find-restart i"
 "nvoke-restart invoke-restart-interactively :test-function :interactive-function "
 ":report-function (stream) si::coerce-to-condition ('simple-error 'error) ('simpl"
 "e-error 'cerror) ('simple-warning 'warn) (first si::*restart-clusters*) (&rest s"
 "i::temp) si::temp restart-case (values nil t) with-simple-restart with-condition"
 "-restarts 0 0 (condition) define-condition make-condition handler-bind signal (o"
 "r symbol string) si::coerce-to-condition break warn si::simple-style-warning si:"
 ":case-failure si::abort-failure si::*default-format-error-control-string* si::*d"
 "efault-format-error-offset* :no-error (si::temp) (declare (ignorable si::temp)) "
 "handler-case (error (condition) (values nil condition)) ignore-errors si::accept"
 " si::universal-error-handler si::tpl-continue-command 0 0 si::restart-test-funct"
 "ion 0 0 :name :function :report-function :interactive-function :test-function si"
 "::restart-report-function si::simple-restart-function 0 0 0 si::restart-function"
 " 0 si::restart-interactive-function 0 :report :interactive :test 0 0 0 0 0 0 0 0"
 " 0 si::case-failure-name si::case-failure-possibilities si::format-error-print-b"
 "anner si::format-error-control-string si::format-error-offset 0 0 0 0 (si::name "
 "function si::report-function si::interactive-function (si::test-function #1=(con"
 "stantly t))) ((si::name nil t nil 0 nil) (function nil t nil 1 nil) (si::report-"
 "function nil t nil 2 nil) (si::interactive-function nil t nil 3 nil) (si::test-f"
 "unction #1# t nil 4 nil)) (si::make-restart) ((:initform nil :allocation :class "
 ":name si::report-function)) (condition t) (si::c stream) (serious-condition) (:i"
 "nitform (lambda (condition stream) (format stream \"~?\" (simple-condition-format-"
 "control condition) (simple-condition-format-arguments condition))) :name si::rep"
 "ort-function) (:writers ((setf simple-condition-format-control)) :readers (simpl"
 "e-condition-format-control) :initform \"\" :initargs (:format-control) :name si::f"
 "ormat-control) (:writers ((setf simple-condition-format-arguments)) :readers (si"
 "mple-condition-format-arguments) :initform nil :initargs (:format-arguments) :na"
 "me si::format-arguments) (simple-condition warning) (warning) (style-warning sim"
 "ple-condition) (simple-condition error) (storage-condition) ((:initform \"Detecte"
 "d access to an invalid or protected memory address.\" :name si::report-function))"
 " (:initform (lambda (condition stream) (let* ((type (ext::stack-overflow-type co"
 "ndition)) (si::size (ext::stack-overflow-size condition))) (if si::size (format "
 "stream \"~A overflow at size ~D. Stack can probably be resized.\" type si::size) ("
 "format stream \"~A stack overflow. Stack cannot grow any further. Either exit\nor "
 "return to an outer frame, undoing all the function calls so far.\" type)))) :name"
 " si::report-function) (:readers (ext::stack-overflow-size) :initform 0 :initargs"
 " (:size) :name si::size) (:readers (ext::stack-overflow-type) :initform nil :ini"
 "targs (:type) :name type) ((:initform \"Memory limit reached. Please jump to an o"
 "uter pointer, quit program and enlarge the\nmemory limits before executing the pr"
 "ogram again.\" :name si::report-function)) ((:initform \"Illegal instruction.\" :na"
 "me si::report-function)) (:initform (lambda (condition stream) (format stream \"S"
 "erious signal ~D caught.\" (ext::unix-signal-received-code condition))) :name si:"
 ":report-function) (:writers ((setf ext::unix-signal-received-code)) :readers (ex"
 "t::unix-signal-received-code) :initargs (:code) :initform 0 :type fixnum :name s"
 "i::code) (error) (:initform (lambda (condition stream) (format stream \"~S is not"
 " of type ~S.\" (type-error-datum condition) (type-error-expected-type condition))"
 ") :name si::report-function) (:readers (type-error-datum) :initargs (:datum) :na"
 "me si::datum) (:readers (type-error-expected-type) :initargs (:expected-type) :n"
 "ame si::expected-type) (simple-condition type-error) (type-error) (:initform (la"
 "mbda (condition stream) (format stream \"~S fell through ~S expression.~%Wanted o"
 "ne of ~:S.\" (type-error-datum condition) (si::case-failure-name condition) (si::"
 "case-failure-possibilities condition))) :name si::report-function) (:readers (si"
 "::case-failure-name) :initargs (:name) :name si::name) (:readers (si::case-failu"
 "re-possibilities) :initargs (:possibilities) :name si::possibilities) ((:readers"
 " (stream-error-stream) :initargs (:stream) :name stream)) (stream-error) (:initf"
 "orm (lambda (condition stream) (format stream \"Unexpected end of file on ~S.\" (s"
 "tream-error-stream condition))) :name si::report-function) (:initform (lambda (c"
 "ondition stream) (format stream \"Filesystem error with pathname ~S.~%Either\n 1) "
 "the file does not exist, or\n 2) we are not allowed to access the file, or\n 3) th"
 "e pathname points to a broken symbolic link.\" (file-error-pathname condition))) "
 ":name si::report-function) (:readers (file-error-pathname) :initargs (:pathname)"
 " :name pathname) ((:readers (package-error-package) :initargs (:package) :name p"
 "ackage)) ((:readers (cell-error-name) :initargs (:name) :name si::name)) (cell-e"
 "rror) (:initform (lambda (condition stream) (format stream \"The variable ~S is u"
 "nbound.\" (cell-error-name condition))) :name si::report-function) (:initform (la"
 "mbda (condition stream) (format stream \"The slot ~S in the object ~S is unbound."
 "\" (cell-error-name condition) (unbound-slot-instance condition))) :name si::repo"
 "rt-function) (:readers (unbound-slot-instance) :initargs (:instance) :name ext::"
 "instance) (:initform (lambda (condition stream) (format stream \"The function ~S "
 "is undefined.\" (cell-error-name condition))) :name si::report-function) ((:reade"
 "rs (arithmetic-error-operation) :initargs (:operation) :name si::operation) (:re"
 "aders (arithmetic-error-operands) :initform 'nil :initargs (:operands) :name si:"
 ":operands)) (arithmetic-error) (control-error) ((:initform \"Abort failed.\" :name"
 " si::report-function)) (:initform (lambda (condition stream) (format stream \"Can"
 "not print object ~A readably.\" (print-not-readable-object condition))) :name si:"
 ":report-function) (:readers (print-not-readable-object) :initargs (:object) :nam"
 "e si::object) (parse-error stream-error) (simple-error) (:initform (lambda (cond"
 "ition stream) (format stream \"~:[~;Error in format: ~]~\n\t\t\t ~?~@[~%  ~A~%  ~V@T^"
 "~]\" (si::format-error-print-banner condition) (simple-condition-format-control c"
 "ondition) (simple-condition-format-arguments condition) (si::format-error-contro"
 "l-string condition) (si::format-error-offset condition))) :name si::report-funct"
 "ion) (:initargs (:complaint) :name si::format-control) (:initargs (:arguments) :"
 "name si::format-arguments) (:initform si::*default-format-error-control-string* "
 ":initargs (:control-string) :readers (si::format-error-control-string) :name si:"
 ":control-string) (:initform si::*default-format-error-offset* :initargs (:offset"
 ") :readers (si::format-error-offset) :name si::offset) (:initform t :initargs (:"
 "print-banner) :readers (si::format-error-print-banner) :name si::print-banner) ("
 "(:initform \"Console interrupt.\" :name si::report-function)) ";
#define compiler_data_text_size 7100
