static const char compiler_data_text[] = 
"(clos::.combined-method-args. clos::*next-methods*) (declare (special clos::.com"
 "bined-method-args. clos::*next-methods*)) (clos::.combined-method-args. clos::no"
 "-next-methods) (declare (ignorable clos::no-next-methods)) clos::effective-metho"
 "d-function call-method call-next-method next-method-p (car clos::*next-methods*)"
 " (rest clos::*next-methods*) (error \"No next method.\") :before :after :around cl"
 "os::no-primary-method clos::standard-compute-effective-method clos::*method-comb"
 "inations-lock* clos::*method-combinations* clos::search-method-combination clos:"
 ":install-method-combination clos::make-method-combination clos::find-method-comb"
 "ination (&optional (clos::order :most-specific-first)) (clos::around (:around)) "
 "clos::principal (:required t) clos::main-effective-method (mapcar #'(lambda (clo"
 "s::x) `(call-method ,clos::x nil)) (if (eql clos::order :most-specific-last) (re"
 "verse clos::principal) clos::principal)) (clos::around `(call-method ,(first clo"
 "s::around) (,@(rest clos::around) (make-method ,clos::main-effective-method)))) "
 "(rest clos::principal) (t (second clos::main-effective-method)) clos::define-sim"
 "ple-method-combination clos::.generic-function. :arguments :generic-function :mo"
 "st-specific-first (:required :order :description) clos::.method-qualifiers. #'eq"
 "ual clos::.method. :most-specific-last clos::.methods-list. (clos::.method. clos"
 "::.methods-list.) ((clos::.method-qualifiers. (method-qualifiers clos::.method.)"
 ")) define-method-combination clos::compute-effective-method 0 clos::method-p 0 0"
 " 0 0 0 0 0 0 0 :documentation :identity-with-one-argument :operator 0 0 (progn ("
 "define-method-combination progn :identity-with-one-argument t) (define-method-co"
 "mbination and :identity-with-one-argument t) (define-method-combination max :ide"
 "ntity-with-one-argument t) (define-method-combination + :identity-with-one-argum"
 "ent t) (define-method-combination nconc :identity-with-one-argument t) (define-m"
 "ethod-combination append :identity-with-one-argument nil) (define-method-combina"
 "tion list :identity-with-one-argument nil) (define-method-combination min :ident"
 "ity-with-one-argument t) (define-method-combination or :identity-with-one-argume"
 "nt t)) ";
#define compiler_data_text_size 2167
