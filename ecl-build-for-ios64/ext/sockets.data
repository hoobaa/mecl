static const char compiler_data_text[] = 
"sb-bsd-sockets::+af-inet+ sb-bsd-sockets::+af-local+ sb-bsd-sockets::+eagain+ sb"
 "-bsd-sockets::+eintr+ sb-bsd-sockets::ff-socket sb-bsd-sockets::ff-listen sb-bsd"
 "-sockets::ff-close (#\\  #\\Tab) sb-bsd-sockets::split sb-bsd-sockets::host-ent sb"
 "-bsd-sockets::host-ent-address :delete-methods sb-bsd-sockets::get-host-by-name "
 "(and (typep sb-bsd-sockets::address 'vector) (= (length sb-bsd-sockets::address)"
 " 4)) sb-bsd-sockets::get-host-by-address sb-bsd-sockets::socket sb-bsd-sockets::"
 "file-descriptor :datagram 0 0 (:datagram :stream) sb-bsd-sockets::protocol sb-bs"
 "d-sockets::socket-bind sb-bsd-sockets::socket-accept sb-bsd-sockets::socket-conn"
 "ect sb-bsd-sockets::socket-peername sb-bsd-sockets::socket-name sb-bsd-sockets::"
 "socket-listen sb-bsd-sockets::socket-receive sb-bsd-sockets::socket-send sb-bsd-"
 "sockets::socket-close sb-bsd-sockets::socket-make-stream sb-bsd-sockets::non-blo"
 "cking-mode sb-bsd-sockets::socket-close-low-level sb-bsd-sockets::get-protocol-b"
 "y-name (#\\.) sb-bsd-sockets::make-inet-address sb-bsd-sockets::inet-socket :prot"
 "ocol sb-bsd-sockets::make-inet-socket (= 2 (length sb-bsd-sockets::address)) (sb"
 "-bsd-sockets::address) :descriptor (or (stringp sb-bsd-sockets::buffer) (typep s"
 "b-bsd-sockets::buffer 'vector)) sb-bsd-sockets::local-socket (= 1 (length sb-bsd"
 "-sockets::address)) sb-bsd-sockets::dup (stringp sb-bsd-sockets::name) (sb-bsd-s"
 "ockets::name) :input-output (:input :output :input-output) sb-bsd-sockets::make-"
 "stream-from-fd :buffering sb-bsd-sockets::socket-make-stream-inner ext::stream-f"
 "d sb-bsd-sockets::socket-error sb-bsd-sockets::c-constant (sb-bsd-sockets::socke"
 "t-error) sb-bsd-sockets::socket-error-symbol sb-bsd-sockets::*conditions-for-err"
 "no* sb-bsd-sockets::define-socket-condition sb-bsd-sockets::eaddrinuse sb-bsd-so"
 "ckets::address-in-use-error sb-bsd-sockets::eagain sb-bsd-sockets::interrupted-e"
 "rror sb-bsd-sockets::ebadf sb-bsd-sockets::bad-file-descriptor-error sb-bsd-sock"
 "ets::econnrefused sb-bsd-sockets::connection-refused-error sb-bsd-sockets::etime"
 "dout sb-bsd-sockets::operation-timeout-error sb-bsd-sockets::eintr sb-bsd-socket"
 "s::einval sb-bsd-sockets::invalid-argument-error sb-bsd-sockets::enobufs sb-bsd-"
 "sockets::no-buffers-error sb-bsd-sockets::enomem sb-bsd-sockets::out-of-memory-e"
 "rror sb-bsd-sockets::eopnotsupp sb-bsd-sockets::operation-not-supported-error sb"
 "-bsd-sockets::eperm sb-bsd-sockets::operation-not-permitted-error sb-bsd-sockets"
 "::eprotonosupport sb-bsd-sockets::protocol-not-supported-error sb-bsd-sockets::e"
 "socktnosupport sb-bsd-sockets::socket-type-not-supported-error sb-bsd-sockets::e"
 "netunreach sb-bsd-sockets::network-unreachable-error sb-bsd-sockets::condition-f"
 "or-errno :errno :syscall sb-bsd-sockets::socket-error sb-bsd-sockets::*name-serv"
 "ice-errno* sb-bsd-sockets::name-service-error (sb-bsd-sockets::name-service-erro"
 "r) sb-bsd-sockets::name-service-error-symbol sb-bsd-sockets::*conditions-for-nam"
 "e-service-errno* sb-bsd-sockets::define-name-service-condition sb-bsd-sockets::n"
 "etdb_internal sb-bsd-sockets::netdb-internal-error sb-bsd-sockets::netdb_success"
 " sb-bsd-sockets::netdb-success-error sb-bsd-sockets::host_not_found sb-bsd-socke"
 "ts::host-not-found-error sb-bsd-sockets::try_again sb-bsd-sockets::try-again-err"
 "or sb-bsd-sockets::no_recovery sb-bsd-sockets::no-recovery-error sb-bsd-sockets:"
 ":no_address sb-bsd-sockets::no-address-error sb-bsd-sockets::name-service sb-bsd"
 "-sockets::condition-for-name-service-errno sb-bsd-sockets::get-name-service-errn"
 "o sb-bsd-sockets::get-name-service-error-message sb-bsd-sockets::get-sockopt-int"
 " sb-bsd-sockets::get-sockopt-bool sb-bsd-sockets::get-sockopt-timeval sb-bsd-soc"
 "kets::get-sockopt-linger sb-bsd-sockets::set-sockopt-int sb-bsd-sockets::set-soc"
 "kopt-bool sb-bsd-sockets::set-sockopt-timeval sb-bsd-sockets::set-sockopt-linger"
 " (sb-bsd-sockets::socket) (sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets"
 "::socket) (sb-bsd-sockets::value sb-bsd-sockets::socket) sb-bsd-sockets::value s"
 "b-bsd-sockets::define-sockopt sb-bsd-sockets::sockopt-type sb-bsd-sockets::socko"
 "pt-type sb-bsd-sockets::sockopt-receive-buffer sb-bsd-sockets::sockopt-receive-b"
 "uffer (setf sb-bsd-sockets::sockopt-receive-buffer) sb-bsd-sockets::sockopt-rece"
 "ive-timeout sb-bsd-sockets::sockopt-receive-timeout (setf sb-bsd-sockets::sockop"
 "t-receive-timeout) sb-bsd-sockets::sockopt-send-timeout sb-bsd-sockets::sockopt-"
 "send-timeout (setf sb-bsd-sockets::sockopt-send-timeout) sb-bsd-sockets::sockopt"
 "-reuse-address sb-bsd-sockets::sockopt-reuse-address (setf sb-bsd-sockets::socko"
 "pt-reuse-address) sb-bsd-sockets::sockopt-keep-alive sb-bsd-sockets::sockopt-kee"
 "p-alive (setf sb-bsd-sockets::sockopt-keep-alive) sb-bsd-sockets::sockopt-dont-r"
 "oute sb-bsd-sockets::sockopt-dont-route (setf sb-bsd-sockets::sockopt-dont-route"
 ") sb-bsd-sockets::sockopt-linger sb-bsd-sockets::sockopt-linger (setf sb-bsd-soc"
 "kets::sockopt-linger) sb-bsd-sockets::sockopt-reuse-port sb-bsd-sockets::sockopt"
 "-reuse-port (setf sb-bsd-sockets::sockopt-reuse-port) sb-bsd-sockets::sockopt-tc"
 "p-nodelay sb-bsd-sockets::sockopt-tcp-nodelay (setf sb-bsd-sockets::sockopt-tcp-"
 "nodelay) sb-bsd-sockets::sockets sb-bsd-sockets::sb-bsd-sockets 0 0 0 0 sb-bsd-s"
 "ockets::host-ent-addresses 0 (setf sb-bsd-sockets::host-ent-name) (setf sb-bsd-s"
 "ockets::host-ent-aliases) (setf sb-bsd-sockets::host-ent-address-type) (setf sb-"
 "bsd-sockets::host-ent-addresses) 0 :protocol :type sb-bsd-sockets::socket-file-d"
 "escriptor sb-bsd-sockets::socket-family sb-bsd-sockets::socket-type 0 :oob :peek"
 " :waitall :element-type 0 0 0 sb-bsd-sockets::socket-protocol :address :external"
 "-format :oob :eor :dontroute :dontwait :nosignal :confirm :more 0 0 :buffering :"
 "element-type :external-format :name 0 :input :output :buffering :element-type :e"
 "xternal-format sb-bsd-sockets::socket-error-errno sb-bsd-sockets::socket-error-s"
 "yscall 0 0 0 0 sb-bsd-sockets::name-service-error-errno sb-bsd-sockets::name-ser"
 "vice-error-syscall 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
 " 0 ((:writers ((setf sb-bsd-sockets::host-ent-name)) :readers (sb-bsd-sockets::h"
 "ost-ent-name) :initargs (:name) :name sb-bsd-sockets::name) (:writers ((setf sb-"
 "bsd-sockets::host-ent-aliases)) :readers (sb-bsd-sockets::host-ent-aliases) :ini"
 "targs (:aliases) :name sb-bsd-sockets::aliases) (:writers ((setf sb-bsd-sockets:"
 ":host-ent-address-type)) :readers (sb-bsd-sockets::host-ent-address-type) :inita"
 "rgs (:type) :name sb-bsd-sockets::address-type) (:writers ((setf sb-bsd-sockets:"
 ":host-ent-addresses)) :readers (sb-bsd-sockets::host-ent-addresses) :initargs (:"
 "addresses) :name sb-bsd-sockets::addresses)) (sb-bsd-sockets::host-ent) (:reader"
 "s (sb-bsd-sockets::socket-file-descriptor) :initargs (:descriptor) :name sb-bsd-"
 "sockets::file-descriptor) (:readers (sb-bsd-sockets::socket-family) :initform (e"
 "rror \"No socket family\") :name sb-bsd-sockets::family) (:documentation (\"Protoco"
 "l used by the socket. If a\nkeyword, the symbol-name of the keyword will be passe"
 "d to\nGET-PROTOCOL-BY-NAME downcased, and the returned value used as\nprotocol. Ot"
 "her values are used as-is.\") :readers (sb-bsd-sockets::socket-protocol) :initarg"
 "s (:protocol) :name sb-bsd-sockets::protocol) (:documentation (\"Type of the sock"
 "et: :STREAM or :DATAGRAM.\") :initform :stream :readers (sb-bsd-sockets::socket-t"
 "ype) :initargs (:type) :name type) (:name stream) (sb-bsd-sockets::socket t) (ff"
 "i::object stream) (:after) (sb-bsd-sockets::socket sb-bsd-sockets::slot-names &k"
 "ey sb-bsd-sockets::protocol type &allow-other-keys) (sb-bsd-sockets::socket &res"
 "t sb-bsd-sockets::address) (sb-bsd-sockets::socket) (sb-bsd-sockets::socket sb-b"
 "sd-sockets::backlog) (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &key "
 "sb-bsd-sockets::oob sb-bsd-sockets::peek sb-bsd-sockets::waitall sb-bsd-sockets:"
 ":element-type) (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &key sb-bsd"
 "-sockets::address sb-bsd-sockets::external-format sb-bsd-sockets::oob sb-bsd-soc"
 "kets::eor sb-bsd-sockets::dontroute sb-bsd-sockets::dontwait sb-bsd-sockets::nos"
 "ignal sb-bsd-sockets::confirm sb-bsd-sockets::more) (sb-bsd-sockets::socket &res"
 "t sb-bsd-sockets::args) (setf sb-bsd-sockets::non-blocking-mode) (sb-bsd-sockets"
 "::non-blocking-p sb-bsd-sockets::socket) (sb-bsd-sockets::socket t t) (:initform"
 " sb-bsd-sockets::+af-inet+ :name sb-bsd-sockets::family) (sb-bsd-sockets::inet-s"
 "ocket) (:initform sb-bsd-sockets::+af-local+ :name sb-bsd-sockets::family) (sb-b"
 "sd-sockets::local-socket) (t sb-bsd-sockets::socket) (sb-bsd-sockets::socket &ke"
 "y (sb-bsd-sockets::input nil sb-bsd-sockets::input-p) (sb-bsd-sockets::output ni"
 "l sb-bsd-sockets::output-p) (sb-bsd-sockets::buffering :full) (sb-bsd-sockets::e"
 "lement-type 'base-char) (sb-bsd-sockets::external-format :default)) (error) (:in"
 "itform (lambda (sb-bsd-sockets::c sb-bsd-sockets::s) (let ((sb-bsd-sockets::num "
 "(sb-bsd-sockets::socket-error-errno sb-bsd-sockets::c))) (format sb-bsd-sockets:"
 ":s \"Socket error in \\\"~A\\\": ~A (~A)\" (sb-bsd-sockets::socket-error-syscall sb-bs"
 "d-sockets::c) (or (sb-bsd-sockets::socket-error-symbol sb-bsd-sockets::c) (sb-bs"
 "d-sockets::socket-error-errno sb-bsd-sockets::c)) (ffi::c-inline (sb-bsd-sockets"
 "::num) (:int) :cstring \"strerror(#0)\" :one-liner t)))) :name si::report-function"
 ") (:readers (sb-bsd-sockets::socket-error-errno) :initargs (:errno) :initform ni"
 "l :name sb-bsd-sockets::errno) (:readers (sb-bsd-sockets::socket-error-symbol) :"
 "initargs (:symbol) :initform nil :name symbol) (:readers (sb-bsd-sockets::socket"
 "-error-syscall) :initargs (:syscall) :initform \"outer space\" :name sb-bsd-socket"
 "s::syscall) ((:initform 'sb-bsd-sockets::eaddrinuse :readers (sb-bsd-sockets::so"
 "cket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eagain :readers ("
 "sb-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets:"
 ":ebadf :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform"
 " 'sb-bsd-sockets::econnrefused :readers (sb-bsd-sockets::socket-error-symbol) :n"
 "ame symbol)) ((:initform 'sb-bsd-sockets::etimedout :readers (sb-bsd-sockets::so"
 "cket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eintr :readers (s"
 "b-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::"
 "einval :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform"
 " 'sb-bsd-sockets::enobufs :readers (sb-bsd-sockets::socket-error-symbol) :name s"
 "ymbol)) ((:initform 'sb-bsd-sockets::enomem :readers (sb-bsd-sockets::socket-err"
 "or-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eopnotsupp :readers (sb-b"
 "sd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::epe"
 "rm :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb"
 "-bsd-sockets::eprotonosupport :readers (sb-bsd-sockets::socket-error-symbol) :na"
 "me symbol)) ((:initform 'sb-bsd-sockets::esocktnosupport :readers (sb-bsd-socket"
 "s::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::enetunreach "
 ":readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) (condition) (:init"
 "form (lambda (sb-bsd-sockets::c sb-bsd-sockets::s) (let ((sb-bsd-sockets::num (s"
 "b-bsd-sockets::name-service-error-errno sb-bsd-sockets::c))) (format sb-bsd-sock"
 "ets::s \"Name service error in \\\"~A\\\": ~A (~A)\" (sb-bsd-sockets::name-service-err"
 "or-syscall sb-bsd-sockets::c) (or (sb-bsd-sockets::name-service-error-symbol sb-"
 "bsd-sockets::c) (sb-bsd-sockets::name-service-error-errno sb-bsd-sockets::c)) (s"
 "b-bsd-sockets::get-name-service-error-message sb-bsd-sockets::num)))) :name si::"
 "report-function) (:readers (sb-bsd-sockets::name-service-error-errno) :initargs "
 "(:errno) :initform nil :name sb-bsd-sockets::errno) (:readers (sb-bsd-sockets::n"
 "ame-service-error-symbol) :initargs (:symbol) :initform nil :name symbol) (:read"
 "ers (sb-bsd-sockets::name-service-error-syscall) :initargs (:syscall) :initform "
 "\"an unknown location\" :name sb-bsd-sockets::syscall) ((:initform 'sb-bsd-sockets"
 "::netdb_internal :readers (sb-bsd-sockets::name-service-error-symbol) :name symb"
 "ol)) ((:initform 'sb-bsd-sockets::netdb_success :readers (sb-bsd-sockets::name-s"
 "ervice-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::host_not_found "
 ":readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) ((:initform "
 "'sb-bsd-sockets::try_again :readers (sb-bsd-sockets::name-service-error-symbol) "
 ":name symbol)) ((:initform 'sb-bsd-sockets::no_recovery :readers (sb-bsd-sockets"
 "::name-service-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::no_addr"
 "ess :readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) ";
#define compiler_data_text_size 12392
