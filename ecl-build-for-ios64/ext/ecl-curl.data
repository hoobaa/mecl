static const char compiler_data_text[] = 
":sockets ecl-curl::http-transfer-error ecl-curl::download-error ecl-curl::*strea"
 "m-buffer-size* ecl-curl::copy-stream sb-bsd-sockets::inet-socket :protocol :tcp "
 ":buffering ecl-curl::make-stream-from-url (string-equal ecl-curl::url \"http://\" "
 ":end1 7) ecl-curl::url-host ecl-curl::url-port ecl-curl::*encode-table* ecl-curl"
 "::base64-encode ecl-curl::*proxy* ecl-curl::*proxy-user* ecl-curl::*proxy-passwd"
 "* ecl-curl::request-uri ecl-curl::header-pair ecl-curl::header-value :keyword ec"
 "l-curl::url-connection 0 0 :url :response :content-length ecl-curl::download-url"
 "-to-file si::dodefpackage ecl-curl::download-response ecl-curl::download-url 0 0"
 " sb-bsd-sockets::get-host-by-name sb-bsd-sockets::host-ent-addresses sb-bsd-sock"
 "ets::socket-connect sb-bsd-sockets::socket-make-stream 0 0 0 0 0 0 0 0 :quiet (\""
 "SB-BSD-SOCKETS\" \"CL\") (\"DOWNLOAD-URL-TO-FILE\" \"DOWNLOAD-ERROR\" \"DOWNLOAD-URL\" \"D"
 "OWNLOAD-RESPONSE\") (error) ((:readers (ecl-curl::download-url) :initargs (:url) "
 ":name ecl-curl::url)) (ecl-curl::http-transfer-error) (:initform (lambda (ecl-cu"
 "rl::c ecl-curl::s) (format ecl-curl::s \"Server responded ~A for GET ~A\" (ecl-cur"
 "l::download-response ecl-curl::c) (ecl-curl::download-url ecl-curl::c))) :name s"
 "i::report-function) (:readers (ecl-curl::download-response) :initargs (:response"
 ") :name ecl-curl::response) ";
#define compiler_data_text_size 1308
