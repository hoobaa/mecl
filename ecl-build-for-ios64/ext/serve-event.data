static const char compiler_data_text[] = 
"serve-event::+eintr+ serve-event::handler serve-event::handler-p (:input :output"
 ") 0 (member :input :output) serve-event::direction 0 serve-event::make-handler s"
 "erve-event::*descriptor-handlers* (fixnum file-stream two-way-stream stream) ser"
 "ve-event::coerce-to-descriptor serve-event::add-fd-handler serve-event::remove-f"
 "d-handler serve-event::with-fd-handler ((:object) :void \"FD_ZERO((fd_set*)#0->fo"
 "reign.data)\" :one-liner t :side-effects t) serve-event::fd-zero ((:int :object) "
 ":void \"FD_SET(#0, (fd_set*)#1->foreign.data);\" :one-liner t :side-effects t) ser"
 "ve-event::fd-set ((:int :object) :int \"FD_ISSET(#0, (fd_set*)#1->foreign.data)\" "
 ":one-liner t :side-effects t) serve-event::fd-isset serve-event::fdset-size serv"
 "e-event::serve-event serve-event::serve-all-events si::dodefpackage 0 0 0 0 0 0 "
 "0 0 0 0 serve-event::handler-descriptor serve-event::handler-direction serve-eve"
 "nt::handler-function 0 (\"CL\" \"FFI\" \"UFFI\") (\"WITH-FD-HANDLER\" \"ADD-FD-HANDLER\" \""
 "REMOVE-FD-HANDLER\" \"SERVE-EVENT\" \"SERVE-ALL-EVENTS\") ((serve-event::direction ni"
 "l :type #1=(member :input :output)) (serve-event::descriptor 0) (function nil :t"
 "ype function)) ((serve-event::direction nil #1# nil 0 nil) (serve-event::descrip"
 "tor 0 t nil 1 nil) (function nil function nil 2 nil)) ((serve-event::make-handle"
 "r (serve-event::descriptor serve-event::direction function))) ";
#define compiler_data_text_size 1342
