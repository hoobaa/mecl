static const char compiler_data_text[] = 
"deflate::decompression-error deflate::deflate-decompression-error deflate::zlib-"
 "decompression-error deflate::gzip-decompression-error deflate::+adler-32-start-v"
 "alue+ deflate::+adler-32-base+ deflate::update-adler32-checksum deflate::+crc-32"
 "-start-value+ deflate::+crc-32-polynomial+ deflate::generate-crc32-table 0 defla"
 "te::update-crc32-checksum deflate::+sliding-window-size+ deflate::sliding-window"
 "-stream deflate::copy-sliding-window-stream deflate::sliding-window-stream-p (un"
 "signed-byte 32) deflate::checksum-value deflate::checksum deflate::buffer-end (s"
 "imple-array (unsigned-byte 8) (32768)) deflate::buffer 0 deflate::make-sliding-w"
 "indow-stream :adler-32 :crc-32 deflate::sliding-window-stream-write-byte deflate"
 "::sliding-window-stream-flush deflate::sliding-window-stream-copy-bytes deflate:"
 ":bit-stream deflate::copy-bit-stream deflate::bit-stream-p (unsigned-byte 8) def"
 "late::bit-count (unsigned-byte 29) deflate::bits deflate::next-byte 0 deflate::m"
 "ake-bit-stream deflate::bit-stream-get-byte deflate::bit-stream-read-bits deflat"
 "e::bit-stream-copy-block deflate::decode-tree deflate::copy-decode-tree deflate:"
 ":decode-tree-p (simple-array fixnum (*)) deflate::code-symbols deflate::length-c"
 "ount 0 deflate::make-decode-tree :initial-value :length-count :code-symbols defl"
 "ate::make-huffman-decode-tree deflate::read-huffman-code deflate::*std-lit-decod"
 "e-tree* deflate::*std-dist-decode-tree* deflate::*code-length-entry-order* (0 1 "
 "2 3 4 5 6 7 8 9 10 11 12 13 14 15) (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 16 17 "
 "18) deflate::decode-code-length-entries deflate::decode-huffman-tables deflate::"
 "decode-length-entry deflate::decode-distance-entry deflate::decode-huffman-block"
 " (0 1 2 3) deflate::decode-block deflate::parse-zlib-header deflate::parse-zlib-"
 "checksum deflate::parse-zlib-footer deflate::+gzip-header-id1+ deflate::+gzip-he"
 "ader-id2+ deflate::parse-gzip-header deflate::parse-gzip-mtime deflate::parse-gz"
 "ip-extra deflate::parse-gzip-string deflate::parse-gzip-checksum deflate::parse-"
 "gzip-footer :checksum :checksum-value 0 (nil :crc-32 :adler-32) deflate::inflate"
 "-stream deflate::inflate-zlib-stream deflate::inflate-gzip-stream deflate::gunzi"
 "p si::dodefpackage 0 0 0 0 :stream :buffer :buffer-end :checksum :checksum-value"
 " 0 deflate::sliding-window-stream-buffer-end deflate::sliding-window-stream-buff"
 "er deflate::sliding-window-stream-stream deflate::sliding-window-stream-checksum"
 " deflate::sliding-window-stream-checksum-value 0 0 0 :stream :next-byte :bits :b"
 "it-count 0 deflate::bit-stream-stream 0 deflate::bit-stream-bit-count deflate::b"
 "it-stream-bits 0 0 0 0 deflate::decode-tree-length-count deflate::decode-tree-co"
 "de-symbols 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 :check-checksum 0 0 (\"COMMON-LISP\")"
 " (\"DECOMPRESSION-ERROR\" \"DEFLATE-DECOMPRESSION-ERROR\" \"ZLIB-DECOMPRESSION-ERROR\""
 " \"GZIP-DECOMPRESSION-ERROR\" \"INFLATE-STREAM\" \"INFLATE-ZLIB-STREAM\" \"PARSE-ZLIB-H"
 "EADER\" \"PARSE-ZLIB-FOOTER\" \"INFLATE-GZIP-STREAM\" \"PARSE-GZIP-HEADER\" \"PARSE-GZIP"
 "-FOOTER\" \"GUNZIP\") ((optimize (safety 0) (speed 3))) (simple-error) (deflate::de"
 "compression-error) (:initform (lambda (deflate::c deflate::s) (with-standard-io-"
 "syntax (let ((*print-readably* nil)) (format deflate::s \"Error detected during d"
 "eflate decompression: ~?\" (simple-condition-format-control deflate::c) (simple-c"
 "ondition-format-arguments deflate::c))))) :name si::report-function) (:initform "
 "(lambda (deflate::c deflate::s) (with-standard-io-syntax (let ((*print-readably*"
 " nil)) (format deflate::s \"Error detected during zlib decompression: ~?\" (simple"
 "-condition-format-control deflate::c) (simple-condition-format-arguments deflate"
 "::c))))) :name si::report-function) ((ftype (function ((unsigned-byte 32) (simpl"
 "e-array (unsigned-byte 8) (*)) fixnum) (unsigned-byte 32)) deflate::update-adler"
 "32-checksum)) ((ftype (function nil (simple-array (unsigned-byte 32) (256))) def"
 "late::generate-crc32-table)) ((ftype (function ((unsigned-byte 32) (simple-array"
 " (unsigned-byte 8) (*)) fixnum) (unsigned-byte 32)) deflate::update-crc32-checks"
 "um)) ((stream nil :type stream :read-only t) (deflate::buffer #1=(make-array def"
 "late::+sliding-window-size+ :element-type '(unsigned-byte 8)) :type #2=(simple-a"
 "rray (unsigned-byte 8) (32768)) :read-only t) (deflate::buffer-end 0 :type fixnu"
 "m) (deflate::checksum nil :type symbol :read-only t) (deflate::checksum-value 0 "
 ":type #3=(unsigned-byte 32))) ((stream nil stream t 0 nil) (deflate::buffer #1# "
 "#2# t 1 nil) (deflate::buffer-end 0 fixnum nil 2 nil) (deflate::checksum nil sym"
 "bol t 3 nil) (deflate::checksum-value 0 #3# nil 4 nil)) (deflate::make-sliding-w"
 "indow-stream) ((inline deflate::sliding-window-stream-write-byte)) ((stream nil "
 ":type stream :read-only t) (deflate::next-byte 0 :type fixnum) (deflate::bits 0 "
 ":type #4=(unsigned-byte 29)) (deflate::bit-count 0 :type #5=(unsigned-byte 8))) "
 "((stream nil stream t 0 nil) (deflate::next-byte 0 fixnum nil 1 nil) (deflate::b"
 "its 0 #4# nil 2 nil) (deflate::bit-count 0 #5# nil 3 nil)) (deflate::make-bit-st"
 "ream) ((inline deflate::bit-stream-get-byte)) ((inline deflate::bit-stream-read-"
 "bits)) ((inline deflate::bit-stream-copy-block)) ((deflate::length-count #6=(mak"
 "e-array 16 :element-type 'fixnum :initial-element 0) :type #7=(simple-array fixn"
 "um (*)) :read-only t) (deflate::code-symbols #8=(make-array 16 :element-type 'fi"
 "xnum :initial-element 0) :type #9=(simple-array fixnum (*)))) ((deflate::length-"
 "count #6# #7# t 0 nil) (deflate::code-symbols #8# #9# nil 1 nil)) (deflate::make"
 "-decode-tree) ((inline deflate::read-huffman-code)) #A(t (19) (16 17 18 0 8 7 9 "
 "6 10 5 11 4 12 3 13 2 14 1 15)) ((inline deflate::decode-length-entry)) ((inline"
 " deflate::decode-distance-entry)) ";
#define compiler_data_text_size 5634
