static const char compiler_data_text[] = 
"deflate::decompression-error deflate::deflate-decompression-error deflate::zlib-"
 "decompression-error deflate::gzip-decompression-error deflate::+adler-32-start-v"
 "alue+ deflate::+adler-32-base+ deflate::update-adler32-checksum deflate::+crc-32"
 "-start-value+ deflate::+crc-32-polynomial+ deflate::generate-crc32-table 0 42949"
 "67295 deflate::update-crc32-checksum deflate::+sliding-window-size+ deflate::sli"
 "ding-window-stream deflate::copy-sliding-window-stream deflate::sliding-window-s"
 "tream-p (unsigned-byte 32) deflate::checksum-value deflate::checksum deflate::bu"
 "ffer-end (simple-array (unsigned-byte 8) (32768)) deflate::buffer 0 deflate::mak"
 "e-sliding-window-stream :adler-32 :crc-32 deflate::sliding-window-stream-write-b"
 "yte deflate::sliding-window-stream-flush deflate::sliding-window-stream-copy-byt"
 "es deflate::bit-stream deflate::copy-bit-stream deflate::bit-stream-p (unsigned-"
 "byte 8) deflate::bit-count (unsigned-byte 29) deflate::bits deflate::next-byte 0"
 " deflate::make-bit-stream deflate::bit-stream-get-byte deflate::bit-stream-read-"
 "bits deflate::bit-stream-copy-block deflate::decode-tree deflate::copy-decode-tr"
 "ee deflate::decode-tree-p (simple-array fixnum (*)) deflate::code-symbols deflat"
 "e::length-count 0 deflate::make-decode-tree :initial-value :length-count :code-s"
 "ymbols deflate::make-huffman-decode-tree deflate::read-huffman-code deflate::*st"
 "d-lit-decode-tree* deflate::*std-dist-decode-tree* deflate::*code-length-entry-o"
 "rder* (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15) (15 14 13 12 11 10 9 8 7 6 5 4 3 2"
 " 1 0 16 17 18) deflate::decode-code-length-entries deflate::decode-huffman-table"
 "s deflate::decode-length-entry deflate::decode-distance-entry deflate::decode-hu"
 "ffman-block (0 1 2 3) deflate::decode-block deflate::parse-zlib-header deflate::"
 "parse-zlib-checksum deflate::parse-zlib-footer deflate::+gzip-header-id1+ deflat"
 "e::+gzip-header-id2+ deflate::parse-gzip-header 2208988800 deflate::parse-gzip-m"
 "time deflate::parse-gzip-extra deflate::parse-gzip-string deflate::parse-gzip-ch"
 "ecksum deflate::parse-gzip-footer :checksum :checksum-value 0 (nil :crc-32 :adle"
 "r-32) deflate::inflate-stream deflate::inflate-zlib-stream deflate::inflate-gzip"
 "-stream deflate::gunzip si::dodefpackage 0 0 0 0 :stream :buffer :buffer-end :ch"
 "ecksum :checksum-value 0 deflate::sliding-window-stream-buffer-end deflate::slid"
 "ing-window-stream-buffer deflate::sliding-window-stream-stream deflate::sliding-"
 "window-stream-checksum deflate::sliding-window-stream-checksum-value 0 0 0 :stre"
 "am :next-byte :bits :bit-count 0 deflate::bit-stream-stream 0 deflate::bit-strea"
 "m-bit-count deflate::bit-stream-bits 0 0 0 0 deflate::decode-tree-length-count d"
 "eflate::decode-tree-code-symbols 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 :check-checks"
 "um 0 0 (\"COMMON-LISP\") (\"DECOMPRESSION-ERROR\" \"DEFLATE-DECOMPRESSION-ERROR\" \"ZLI"
 "B-DECOMPRESSION-ERROR\" \"GZIP-DECOMPRESSION-ERROR\" \"INFLATE-STREAM\" \"INFLATE-ZLIB"
 "-STREAM\" \"PARSE-ZLIB-HEADER\" \"PARSE-ZLIB-FOOTER\" \"INFLATE-GZIP-STREAM\" \"PARSE-GZ"
 "IP-HEADER\" \"PARSE-GZIP-FOOTER\" \"GUNZIP\") ((optimize (safety 0) (speed 3))) (simp"
 "le-error) (deflate::decompression-error) (:initform (lambda (deflate::c deflate:"
 ":s) (with-standard-io-syntax (let ((*print-readably* nil)) (format deflate::s \"E"
 "rror detected during deflate decompression: ~?\" (simple-condition-format-control"
 " deflate::c) (simple-condition-format-arguments deflate::c))))) :name si::report"
 "-function) (:initform (lambda (deflate::c deflate::s) (with-standard-io-syntax ("
 "let ((*print-readably* nil)) (format deflate::s \"Error detected during zlib deco"
 "mpression: ~?\" (simple-condition-format-control deflate::c) (simple-condition-fo"
 "rmat-arguments deflate::c))))) :name si::report-function) ((ftype (function ((un"
 "signed-byte 32) (simple-array (unsigned-byte 8) (*)) fixnum) (unsigned-byte 32))"
 " deflate::update-adler32-checksum)) 3988292384 ((ftype (function nil (simple-arr"
 "ay (unsigned-byte 32) (256))) deflate::generate-crc32-table)) ((ftype (function "
 "((unsigned-byte 32) (simple-array (unsigned-byte 8) (*)) fixnum) (unsigned-byte "
 "32)) deflate::update-crc32-checksum)) ((stream nil :type stream :read-only t) (d"
 "eflate::buffer #1=(make-array deflate::+sliding-window-size+ :element-type '(uns"
 "igned-byte 8)) :type #2=(simple-array (unsigned-byte 8) (32768)) :read-only t) ("
 "deflate::buffer-end 0 :type fixnum) (deflate::checksum nil :type symbol :read-on"
 "ly t) (deflate::checksum-value 0 :type #3=(unsigned-byte 32))) ((stream nil stre"
 "am t 0 nil) (deflate::buffer #1# #2# t 1 nil) (deflate::buffer-end 0 fixnum nil "
 "2 nil) (deflate::checksum nil symbol t 3 nil) (deflate::checksum-value 0 #3# nil"
 " 4 nil)) (deflate::make-sliding-window-stream) ((inline deflate::sliding-window-"
 "stream-write-byte)) ((stream nil :type stream :read-only t) (deflate::next-byte "
 "0 :type fixnum) (deflate::bits 0 :type #4=(unsigned-byte 29)) (deflate::bit-coun"
 "t 0 :type #5=(unsigned-byte 8))) ((stream nil stream t 0 nil) (deflate::next-byt"
 "e 0 fixnum nil 1 nil) (deflate::bits 0 #4# nil 2 nil) (deflate::bit-count 0 #5# "
 "nil 3 nil)) (deflate::make-bit-stream) ((inline deflate::bit-stream-get-byte)) ("
 "(inline deflate::bit-stream-read-bits)) ((inline deflate::bit-stream-copy-block)"
 ") ((deflate::length-count #6=(make-array 16 :element-type 'fixnum :initial-eleme"
 "nt 0) :type #7=(simple-array fixnum (*)) :read-only t) (deflate::code-symbols #8"
 "=(make-array 16 :element-type 'fixnum :initial-element 0) :type #9=(simple-array"
 " fixnum (*)))) ((deflate::length-count #6# #7# t 0 nil) (deflate::code-symbols #"
 "8# #9# nil 1 nil)) (deflate::make-decode-tree) ((inline deflate::read-huffman-co"
 "de)) #A(t (19) (16 17 18 0 8 7 9 6 10 5 11 4 12 3 13 2 14 1 15)) ((inline deflat"
 "e::decode-length-entry)) ((inline deflate::decode-distance-entry)) ";
#define compiler_data_text_size 5667
