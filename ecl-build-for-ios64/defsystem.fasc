(#Y(si::bytecodes nil nil (75 73 29) #A(t (0) ()) #1=#P"/Users/strobolights/dev/mecl/ecl-build-for-ios64/compile.lsp" 0) #Y(si::bytecodes nil nil (15 0 15 1 77 15 2 77 77 77 77 77 77 19 10 3 29) #A(t (4) ("MAKE" ("MK") ("COMMON-LISP") si::dodefpackage)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("MAKE" si::select-package)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) (make::make provide)) #1# 0) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 52 1 73 29) #A(t (3) (:mk-defsystem *features* adjoin)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 3 16 1 1 3 16 2 76 39 4 75 52 3 1 4 16 1 1 4 16 2 76 39 4 75 52 4 1 5 52 3 12 19 1 6 75 52 0 12 19 1 6 1 7 52 4 12 19 1 6 29) #A(t (8) (make::*special-exports* si::*make-special boundp make::*exports* make::*other-exports* (make::operate-on-system make::oos make::afs-binary-directory make::afs-source-directory make::files-in-system) export (make::*central-registry* make::*bin-subdir* make::add-registry-location make::list-central-registry-directories make::print-central-registry-directories make::find-system make::defsystem make::compile-system make::load-system make::hardcopy-system make::system-definition-pathname make::missing-component make::missing-component-name make::missing-component-component make::missing-module make::missing-system make::register-foreign-system make::machine-type-translation make::software-type-translation make::compiler-type-translation make::define-language make::allegro-make-system-fasl make::files-which-need-compilation make::undefsystem make::defined-systems make::describe-system make::clean-system make::edit-system make::system-source-size make::make-system-tag-table make::*defsystem-version* make::*compile-during-load* make::*minimal-load* make::*dont-redefine-require* make::*files-missing-is-an-error* make::*reload-systems-from-disk* make::*source-pathname-default* make::*binary-pathname-default* make::*multiple-lisp-support* make::run-unix-program make::*default-shell* make::run-shell-command))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*defsystem-version* si::*make-special "3.6 Interim, 2005-09-01")) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*dont-redefine-require* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*multiple-lisp-support* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #2=#A(t (10) (make::home-subdirectory directory string user-homedir-pathname make::homedir namestring "~/" concatenate #Y(make::home-subdirectory nil nil (24 45 1 26 15 2 19 0 3 45 4 10 0 39 5 10 0 16 5 73 40 4 1 6 73 12 43 1 13 0 19 3 7 29) #2# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (make::*central-registry* si::*make-special boundp ("./" (make::home-subdirectory "lisp/systems/")))) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #3=#A(t (8) (make::add-registry-location pathname make::*central-registry* :test equal adjoin #Y(make::add-registry-location nil nil (24 45 1 26 13 0 14 2 14 3 33 4 12 19 4 5 52 2 73 29) #3# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #4=#A(t (9) (make::registry-pathname make::registry #:g18904 string typep pathname eval #Y(make::registry-pathname nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 39 7 10 1 16 5 38 21 13 0 15 5 19 2 4 39 6 10 1 73 38 7 10 1 16 6 16 5 43 1 29) #4# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #5=#A(t (10) (make::print-central-registry-directories *standard-output* stream make::*central-registry* si::%dolist-var make::registry make::registry-pathname print #Y(make::print-central-registry-directories nil nil (25 40 3 14 1 46 2 26 11 3 45 4 75 45 5 38 22 10 1 4 51 0 13 0 19 1 6 12 13 2 19 2 7 10 1 5 51 1 10 1 40 -24 75 73 43 2 29) #5# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #6=#A(t (6) (make::list-central-registry-directories make::registry-pathname make::*central-registry* mapcar #Y(make::list-central-registry-directories nil nil (26 33 1 12 14 2 19 2 3 29) #6# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (make::*bin-subdir* si::*make-special boundp ".bin/")) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*tell-user-when-done* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*oos-verbose* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*oos-test* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*load-source-if-no-binary* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*bother-user-if-no-binary* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*load-source-instead-of-binary* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*compile-during-load* si::*make-special boundp :query)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*minimal-load* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*files-missing-is-an-error* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*operations-propagate-to-subsystems* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (make::*compile-error-file-type* si::*make-special boundp "err")) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*cmu-errors-to-terminal* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*cmu-errors-to-file* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (11 0 45 1 75 45 2 38 37 10 1 4 51 0 10 0 16 3 39 10 10 0 16 4 12 1 5 17 6 39 10 14 7 14 0 19 2 8 52 0 10 1 5 51 1 10 1 40 -39 75 73 43 2 29) #A(t (9) (*features* si::%dolist-var make::feature symbolp symbol-name "CMU" equal :cmu adjoin)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 21 15 3 15 4 15 5 19 1 6 12 19 1 7 7 2 6 2 4 52 0 1 0 73 29) #A(t (8) (make::*filename-extensions* si::*make-special boundp ("lsp" . "fas") "lisp" "foo.lisp" compile-file-pathname pathname-type)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (make::*system-extension* si::*make-special boundp "system")) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*system-dependencies-delayed* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #7=#A(t (5) (make::non-empty-listp list listp #Y(make::non-empty-listp nil nil (24 45 1 26 10 0 73 39 5 10 0 16 2 29) #7# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 3 16 1 1 3 16 2 76 39 4 75 52 3 1 4 16 1 1 4 16 2 76 39 4 75 52 4 1 4 73 29) #A(t (5) (make::*version-dir* si::*make-special boundp make::*version-replace* make::*version*)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*component-operations* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #8=#A(t (8) (make::component-operation make::name make::operation make::*component-operations* si::hash-set gethash #Y(make::component-operation nil nil (24 45 1 25 40 2 77 46 2 26 10 0 39 12 13 1 14 3 13 0 19 3 4 38 8 13 1 14 3 19 2 5 29) #8# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 1 8 12 19 3 9 29) #9=#A(t (10) (#\# #\@ stream char make::arg make::afs-binary-directory t read #Y(nil nil nil (24 45 2 24 45 3 24 45 4 26 15 5 13 2 14 6 77 14 6 19 4 7 6 2 73 29) #9# #1# 0) set-dispatch-macro-character)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (make::*find-irix-version-script* si::*make-special boundp "\"1,4 d\\
s/^[^M]*IRIX Execution Environment 1, *[a-zA-Z]* *\\([^ ]*\\)/\\1/p\\
/./,$ d\\
\"")) #1# 0) #Y(si::bytecodes nil nil (15 0 1 2 12 19 2 3 1 0 73 29) #10=#A(t (4) (make::operating-system-version software-type #Y(make::operating-system-version nil nil (26 19 0 1 29) #10# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 2 12 19 2 3 1 0 73 29) #11=#A(t (4) (make::compiler-version "ecl" #Y(make::compiler-version nil nil (26 1 1 73 29) #11# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #12=#A(t (20) (make::afs-binary-directory make::root-directory machine-type make::machine-type-translation software-type make::software-type-translation make::compiler-version make::compiler-type-translation make::lisp make::software make::machine namestring make::ensure-trailing-slash "~A~@[~A~]~@[~A/~]" make::*bin-subdir* make::*multiple-lisp-support* make::afs-component format #Y(make::afs-binary-directory nil nil (24 45 1 26 19 0 2 12 19 1 3 12 19 0 4 12 19 1 5 12 19 0 6 12 19 1 7 12 46 8 46 9 46 10 10 3 16 11 51 3 13 3 19 1 12 51 3 77 15 13 13 3 14 14 11 15 39 12 13 0 13 1 13 2 19 3 16 38 8 13 0 13 1 19 2 16 12 19 5 17 43 3 29) #12# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #13=#A(t (11) (make::afs-source-directory make::root-directory make::version-flag namestring make::ensure-trailing-slash "~A~@[~A/~]" make::*version* make::translate-version format #Y(make::afs-source-directory nil nil (24 45 1 25 40 2 77 46 2 26 10 1 16 3 51 1 13 1 19 1 4 51 1 77 15 5 13 1 10 0 73 39 6 14 6 19 1 7 12 19 4 8 29) #13# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #14=#A(t (7) (make::null-string make::s stringp "" string-equal #Y(make::null-string nil nil (24 45 1 26 10 0 16 2 73 39 8 13 0 15 3 19 2 4 29) #14# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #15=#A(t (14) (make::ensure-trailing-slash make::dir make::null-string length 1- char #\/ char= #\\ string "/" concatenate #Y(make::ensure-trailing-slash nil nil (24 45 1 26 10 0 39 45 13 0 19 1 2 76 39 37 13 0 10 0 16 3 16 4 17 5 12 15 6 19 2 7 76 39 18 13 0 10 0 16 3 16 4 17 5 12 15 8 19 2 7 76 39 12 15 9 13 0 15 10 19 3 11 38 4 10 0 73 29) #15# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #16=#A(t (9) (make::afs-component make::machine make::software make::lisp "~@[~A~]~@[_~A~]~@[_~A~]" "mach" format #Y(make::afs-component nil nil (24 45 1 24 45 2 25 40 2 77 46 3 26 77 15 4 13 2 10 1 73 40 4 1 5 73 12 13 0 19 5 6 29) #16# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*machine-type-alist* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #17=#A(t (9) (make::machine-type-translation make::name make::operation string-upcase make::*machine-type-alist* si::hash-set gethash #Y(make::machine-type-translation nil nil (24 45 1 25 40 2 77 46 2 26 10 0 39 16 13 1 19 1 3 12 14 4 13 0 19 3 5 38 12 13 1 19 1 3 12 14 4 19 2 6 29) #17# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IBM RT PC" "rt" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("DEC 3100" "pmax" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("DEC VAX-11" "vax" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("DECstation" "pmax" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Sun3" "sun3" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Sun-4" "sun4" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("MIPS Risc" "mips" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("SGI" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Silicon Graphics Iris 4D" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Silicon Graphics Iris 4D (R3000)" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Silicon Graphics Iris 4D (R4000)" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Silicon Graphics Iris 4D (R4400)" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IP22" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IP20" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IP17" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IP12" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IP7" "sgi" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("x86" "x86" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IBM PC Compatible" "x86" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("I686" "x86" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("PC/386" "x86" make::machine-type-translation)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*software-type-alist* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #18=#A(t (9) (make::software-type-translation make::name make::operation string-upcase make::*software-type-alist* si::hash-set gethash #Y(make::software-type-translation nil nil (24 45 1 25 40 2 77 46 2 26 10 0 39 16 13 1 19 1 3 12 14 4 13 0 19 3 5 38 12 13 1 19 1 3 12 14 4 19 2 6 29) #18# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("BSD UNIX" "mach" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Ultrix" "mach" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("SunOS" "SunOS" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("MACH/4.3BSD" "mach" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IRIX System V" "irix" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IRIX5" "irix5" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IRIX 5.2" "irix5" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IRIX 5.3" "irix5" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IRIX5.2" "irix5" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("IRIX5.3" "irix5" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Linux" "linux" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Linux 2.x, Redhat 6.x and 7.x" "linux" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Microsoft Windows 9x/Me and NT/2000/XP" "win32" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("Windows NT" "win32" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("ANSI C program" "ansi-c" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("C compiler" "ansi-c" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (77 15 0 19 2 1 29) #A(t (2) ("" make::software-type-translation)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*compiler-type-alist* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #19=#A(t (9) (make::compiler-type-translation make::name make::operation string-upcase make::*compiler-type-alist* si::hash-set gethash #Y(make::compiler-type-translation nil nil (24 45 1 25 40 2 77 46 2 26 10 0 39 16 13 1 19 1 3 12 14 4 13 0 19 3 5 38 12 13 1 19 1 3 12 14 4 19 2 6 29) #19# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("lispworks 3.2.1" "lispworks" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("lispworks 3.2.60 beta 6" "lispworks" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("lispworks 4.2.0" "lispworks" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("excl 4.2" "excl" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("excl 4.1" "excl" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("cmu 17f" "cmu" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("cmu 17e" "cmu" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("cmu 17d" "cmu" make::compiler-type-translation)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #20=#A(t (7) (make::canonicalize-system-name make::name stringp string-upcase string #Y(make::canonicalize-system-name nil nil (24 45 1 26 10 0 16 2 39 8 13 0 19 1 3 38 9 10 0 16 4 12 19 1 3 29) #20# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*defined-systems* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #21=#A(t (7) (make::get-system make::name make::canonicalize-system-name make::*defined-systems* gethash #Y(make::get-system nil nil (24 45 1 26 13 0 19 1 2 12 14 3 19 2 4 29) #21# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #22=#A(t (9) (make::get-system make::value make::name setf gethash make::canonicalize-system-name make::*defined-systems* #Y(make::get-system nil nil (24 45 1 24 45 2 26 15 3 15 4 15 5 10 0 6 2 12 1 6 6 3 12 10 1 6 3 73 29) #22# #1# 0) si::do-defsetf)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #23=#A(t (7) (make::undefsystem make::name make::canonicalize-system-name make::*defined-systems* remhash #Y(make::undefsystem nil nil (24 45 1 26 13 0 19 1 2 12 11 3 17 4 29) #23# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #24=#A(t (9) (make::defined-systems make::result make::key make::value #Y(nil nil nil (24 45 2 24 45 3 26 13 0 10 2 3 51 2 73 29) #24# #1# 0) make::*defined-systems* maphash #Y(make::defined-systems nil nil (26 75 45 1 34 4 12 11 5 17 6 10 0 73 43 1 29) #24# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #25=#A(t (17) (make::defined-names-and-systems make::*defined-systems* make::s #:loop-hashtab-18946 make::sname #:loop-it-18948 si::hash-table-iterator #:loop-hashtab-next-18947 #:loop-list-head18952 #:loop-list-tail18953 0 #:loop-hash-val-temp-18949 #:loop-hash-key-temp-18950 #:loop-hash-predicate-var-18951 rplacd #Y(make::defined-names-and-systems nil nil (26 58 60 103 77 77 14 1 77 46 2 46 3 46 4 46 5 10 2 16 6 45 7 75 6 1 45 8 10 0 45 9 57 10 61 2 2 54 13 3 20 0 23 47 2 11 47 1 12 45 13 10 0 39 9 10 2 51 10 10 1 51 8 10 0 51 7 43 3 76 39 4 35 0 1 13 1 13 5 10 7 3 6 1 51 1 17 14 35 0 0 10 2 5 73 36 8 62 73 43 2 43 1 43 4 63 29) #25# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 42 12 19 2 43 1 0 73 29) #26=#A(t (44) (make::new-append-directories make::absolute-dir make::relative-dir "" "" pathname make::abs-dir make::rel-dir pathname-host make::host make::null-string pathname-device make::device pathname-directory make::directory-to-list make::abs-directory keywordp #:g18972 make::abs-keyword #:g18973 #:g18974 0 error si::temp #Y(nil nil nil (24 45 23 26 10 0 51 2 35 1 0 29) #26# #1# 0) si::*handler-clusters* file-namestring condition make::abs-name make::rel-directory #:g18976 make::rel-keyword make::rel-file directory :relative append :host :device :directory :name make-pathname namestring #Y(make::new-append-directories nil nil (24 45 1 24 45 2 26 10 1 40 3 1 3 51 1 10 0 40 3 1 4 51 0 10 1 16 5 45 6 10 1 16 5 45 7 13 1 19 1 8 45 9 13 4 19 1 10 39 8 13 1 19 1 11 38 6 13 2 19 1 11 45 12 13 3 19 1 13 12 19 1 14 45 15 10 0 4 16 16 39 21 10 0 45 17 10 0 4 12 10 0 5 51 0 10 0 51 1 22 43 1 45 18 57 19 60 47 75 45 20 57 21 61 1 22 15 22 34 24 3 6 1 12 11 25 3 48 25 10 8 16 26 36 2 44 1 10 1 45 27 77 13 0 72 2 43 1 36 2 62 43 1 63 45 28 13 5 19 1 13 12 19 1 14 45 29 10 0 4 16 16 39 21 10 0 45 30 10 0 4 12 10 0 5 51 0 10 0 51 1 22 43 1 45 31 10 7 16 26 45 32 75 45 33 10 4 39 7 13 4 19 1 10 76 39 35 10 6 76 39 4 10 5 76 39 13 11 34 51 5 10 4 6 1 51 6 38 13 13 6 10 4 6 1 12 19 2 35 51 6 10 6 76 39 8 10 5 76 39 3 10 2 39 5 10 2 51 5 13 6 13 3 19 2 35 51 0 10 5 39 8 13 5 10 0 3 51 0 14 36 13 8 14 37 13 7 14 38 13 0 14 39 13 1 19 8 40 16 41 43 11 29) #26# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #27=#A(t (13) (make::directory-to-list directory listp stringp #\; find :item make::split-string #\/ list coerce #Y(make::directory-to-list nil nil (24 45 1 26 10 0 16 2 39 6 10 0 73 38 45 10 0 16 3 39 32 15 4 13 0 19 2 5 39 12 13 0 14 6 15 4 19 3 7 38 10 13 0 14 6 15 8 19 3 7 38 8 13 0 15 9 19 2 10 29) #27# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*append-dirs-tests* si::*make-special ("~/foo/" "baz/bar.lisp" "~/foo" "baz/bar.lisp" "/foo/bar/" "baz/barf.lisp" "/foo/bar/" "/baz/barf.lisp" "foo/bar/" "baz/barf.lisp" "foo/bar" "baz/barf.lisp" "foo/bar" "/baz/barf.lisp" "foo/bar/" "/baz/barf.lisp" "/foo/bar/" nil "foo/bar/" nil "foo/bar" nil "foo" nil "foo" "" nil "baz/barf.lisp" nil "/baz/barf.lisp" nil nil))) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #28=#A(t (14) (make::test-new-append-directories make::*append-dirs-tests* make::test-dirs make::dir-list make::abs-dir cadr make::rel-dir t "~&ABS: ~S ~18TREL: ~S ~41TResult: ~S" make::new-append-directories format cddr #Y(make::test-new-append-directories nil nil (25 40 3 14 1 46 2 26 10 0 45 3 10 0 4 45 4 10 1 16 5 45 6 38 37 14 7 15 8 13 1 13 0 13 1 13 0 19 2 9 12 19 5 10 10 2 16 11 51 2 10 2 4 51 1 10 2 16 5 51 0 10 2 76 39 -40 0 43 3 29) #28# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #29=#A(t (8) (make::append-directories make::absolute-directory make::relative-directory make::namestring-probably-logical make::append-logical-pnames make::new-append-directories #Y(make::append-directories nil nil (24 45 1 24 45 2 26 10 1 40 3 10 0 73 39 24 13 1 19 1 3 39 10 13 1 13 0 19 2 4 38 8 13 1 13 0 19 2 5 29) #29# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #30=#A(t (21) (make::pathname-logical-p make::thing #:g18987 logical-pathname typep t string #\: count = #:g18988 #:g18989 0 error si::temp #Y(nil nil nil (24 45 14 26 10 0 51 2 35 1 0 29) #30# #1# 0) si::*handler-clusters* translate-logical-pathname condition #Y(make::pathname-logical-p nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 39 6 11 5 73 38 87 13 0 15 6 19 2 4 39 76 9 1 15 7 13 1 19 2 8 12 19 2 9 73 39 58 57 10 60 48 75 45 11 57 12 61 1 23 15 13 34 15 3 6 1 12 11 16 3 48 16 13 4 19 1 17 36 2 44 1 10 1 45 18 77 13 0 72 2 43 1 36 2 62 43 1 63 73 39 4 11 5 73 38 3 75 73 43 1 29) #30# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #31=#A(t (7) (make::namestring-probably-logical namestring stringp #\; find #Y(make::namestring-probably-logical nil nil (24 45 1 26 10 0 16 2 73 39 8 15 3 13 0 19 2 4 29) #31# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 1 0 73 29) #32=#A(t (24) (make::append-logical-pnames make::absolute make::relative pathname :directory :absolute :name :type make-pathname :relative make::rel abs #:g18993 logical-pathname typep #:g18994 merge-pathnames namestring translate-logical-pathname (logical-pathname pathname) si::etypecase-error (logical-pathname pathname) #Y(make::append-logical-pnames nil nil (24 45 1 24 45 2 26 10 1 39 7 10 1 16 3 38 17 14 4 11 5 6 1 12 14 6 77 14 7 77 19 6 8 12 10 0 39 7 10 0 16 3 38 17 14 4 11 9 6 1 12 14 6 77 14 7 77 19 6 8 12 46 10 46 11 10 0 45 12 13 0 15 13 19 2 14 39 60 10 2 45 15 13 0 15 13 19 2 14 39 12 13 3 13 2 19 2 16 16 17 38 32 13 0 15 3 19 2 14 39 16 13 3 13 2 19 1 18 12 19 2 16 16 17 38 8 13 0 15 19 19 2 20 43 1 38 28 13 0 15 3 19 2 14 39 12 13 2 13 1 19 2 16 16 17 38 8 13 0 15 21 19 2 20 43 1 43 2 29) #32# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #33=#A(t (17) (make::new-file-type pathname type :host pathname-host :device pathname-device :directory pathname-directory :name pathname-name :type :version pathname-version make-pathname #Y(make::new-file-type nil nil (24 45 1 24 45 2 26 14 3 13 1 19 1 4 12 14 5 13 1 19 1 6 12 14 7 13 1 19 1 8 12 14 9 13 1 19 1 10 12 14 11 13 0 14 12 10 1 16 13 12 19 12 14 29) #33# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*source-pathname-default* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*binary-pathname-default* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 1 77 77 15 6 19 15 7 15 0 19 1 21 78 17 15 8 1 19 12 19 2 20 1 0 73 29) #34=#A(t (22) (make::topological-sort-node make::topsort- ((make::color :white :type #35=(member :gray :black :white))) ((make::color :white #35# nil 0 nil)) make::copy-topological-sort-node (make::make-topological-sort-node) make::topological-sort-node-p si::define-structure make::make-topological-sort-node (nil :color) :white #:color (member :gray :black :white) typep (member :gray :black :white) make::color si::structure-type-error 0 si::make-structure #Y(make::make-topological-sort-node nil nil (28 9 22 40 3 14 10 46 11 13 0 15 12 19 2 13 76 39 12 13 0 15 14 15 0 15 15 19 4 16 15 17 13 0 19 2 18 29) #34# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*component-evaluated-slots* si::*make-special (:source-root-dir :source-pathname :source-extension :binary-root-dir :binary-pathname :binary-extension))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*component-form-slots* si::*make-special (:initially-do :finally-do :compile-form :load-form))) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 15 5 15 6 77 15 7 9 35 77 77 15 8 19 15 9 15 0 19 1 109 78 105 15 10 1 107 12 19 2 108 1 0 73 29) #36=#A(t (110) (make::component "COMPONENT-" ((type :file :type #37=(member :defsystem :system :subsystem :module :file :private-file)) (make::name nil :type #38=(or symbol string)) (make::indent 0 :type #39=(mod 1024)) make::host make::device make::source-root-dir (make::source-pathname make::*source-pathname-default*) make::source-extension (make::binary-pathname make::*binary-pathname-default*) make::binary-root-dir make::binary-extension package (make::language nil :type #40=(or null symbol)) (make::compiler nil :type #41=(or null symbol function)) (make::loader nil :type #42=(or null symbol function)) (make::compiler-options nil :type list) (make::components nil :type list) (make::depends-on nil :type list) make::proclamations (make::initially-do #43=(lambda nil nil)) (make::finally-do #44=(lambda nil nil)) (make::compile-form #45=(lambda nil nil)) (make::load-form #46=(lambda nil nil)) make::load-only make::compile-only make::load-always (make::banner nil :type #47=(or null string)) (documentation nil :type #48=(or null string)) (make::long-documentation nil :type #49=(or null string)) (make::author nil :type #50=(or null string)) (make::licence nil :type #51=(or null string)) (make::maintainer nil :type #52=(or null string)) (make::version nil :type #53=(or null string)) (make::non-required-p nil :type boolean)) ((make::color :white (member :gray :black :white) nil 0 make::topsort-color) (type :file #37# nil 1 nil) (make::name nil #38# nil 2 nil) (make::indent 0 #39# nil 3 nil) (make::host nil t nil 4 nil) (make::device nil t nil 5 nil) (make::source-root-dir nil t nil 6 nil) (make::source-pathname make::*source-pathname-default* t nil 7 nil) (make::source-extension nil t nil 8 nil) (make::binary-pathname make::*binary-pathname-default* t nil 9 nil) (make::binary-root-dir nil t nil 10 nil) (make::binary-extension nil t nil 11 nil) (package nil t nil 12 nil) (make::language nil #40# nil 13 nil) (make::compiler nil #41# nil 14 nil) (make::loader nil #42# nil 15 nil) (make::compiler-options nil list nil 16 nil) (make::components nil list nil 17 nil) (make::depends-on nil list nil 18 nil) (make::proclamations nil t nil 19 nil) (make::initially-do #43# t nil 20 nil) (make::finally-do #44# t nil 21 nil) (make::compile-form #45# t nil 22 nil) (make::load-form #46# t nil 23 nil) (make::load-only nil t nil 24 nil) (make::compile-only nil t nil 25 nil) (make::load-always nil t nil 26 nil) (make::banner nil #47# nil 27 nil) (documentation nil #48# nil 28 nil) (make::long-documentation nil #49# nil 29 nil) (make::author nil #50# nil 30 nil) (make::licence nil #51# nil 31 nil) (make::maintainer nil #52# nil 32 nil) (make::version nil #53# nil 33 nil) (make::non-required-p nil boolean nil 34 nil)) make::copy-component make::topological-sort-node make::print-component (make::make-component) make::component-p si::define-structure make::make-component (nil :non-required-p :version :maintainer :licence :author :long-documentation :documentation :banner :load-always :compile-only :load-only :load-form :compile-form :finally-do :initially-do :proclamations :depends-on :components :compiler-options :loader :compiler :language :package :binary-extension :binary-root-dir :binary-pathname :source-extension :source-pathname :source-root-dir :device :host :indent :name :type :color) :white #:color :file #:type #:name #:indent #:host #:device #:source-root-dir make::*source-pathname-default* #:source-pathname #:source-extension make::*binary-pathname-default* #:binary-pathname #:binary-root-dir #:binary-extension #:package #:language #:compiler #:loader #:compiler-options #:components #:depends-on #:proclamations #Y(nil nil nil (26 75 73 29) #36# #1# 0) #:initially-do #Y(nil nil nil (26 75 73 29) #36# #1# 0) #:finally-do #Y(nil nil nil (26 75 73 29) #36# #1# 0) #:compile-form #Y(nil nil nil (26 75 73 29) #36# #1# 0) #:load-form #:load-only #:compile-only #:load-always #:banner #:documentation #:long-documentation #:author #:licence #:maintainer #:version #:non-required-p boolean typep make::non-required-p si::structure-type-error (or null string) (or null string) make::version (or null string) (or null string) make::maintainer (or null string) (or null string) make::licence (or null string) (or null string) make::author (or null string) (or null string) make::long-documentation (or null string) (or null string) documentation (or null string) (or null string) make::banner list make::depends-on make::components make::compiler-options (or null symbol function) (or null symbol function) make::loader (or null symbol function) (or null symbol function) make::compiler (or null symbol) (or null symbol) make::language (mod 1024) (mod 1024) make::indent (or symbol string) (or symbol string) make::name (member :defsystem :system :subsystem :module :file :private-file) (member :defsystem :system :subsystem :module :file :private-file) type (member :gray :black :white) (member :gray :black :white) make::color 0 si::make-structure #Y(make::make-component nil nil (28 11 22 40 3 14 12 46 13 22 40 3 14 14 46 15 22 40 2 77 46 16 22 40 3 9 0 46 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 3 14 21 46 22 22 40 2 77 46 23 22 40 3 14 24 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 22 40 2 77 46 35 22 40 4 34 36 12 46 37 22 40 4 34 38 12 46 39 22 40 4 34 40 12 46 41 22 40 4 34 42 12 46 43 22 40 2 77 46 44 22 40 2 77 46 45 22 40 2 77 46 46 22 40 2 77 46 47 22 40 2 77 46 48 22 40 2 77 46 49 22 40 2 77 46 50 22 40 2 77 46 51 22 40 2 77 46 52 22 40 2 77 46 53 22 40 2 77 46 54 13 0 15 55 19 2 56 76 39 12 13 0 15 55 15 0 15 57 19 4 58 13 1 15 59 19 2 56 76 39 12 13 1 15 60 15 0 15 61 19 4 58 13 2 15 62 19 2 56 76 39 12 13 2 15 63 15 0 15 64 19 4 58 13 3 15 65 19 2 56 76 39 12 13 3 15 66 15 0 15 67 19 4 58 13 4 15 68 19 2 56 76 39 12 13 4 15 69 15 0 15 70 19 4 58 13 5 15 71 19 2 56 76 39 12 13 5 15 72 15 0 15 73 19 4 58 13 6 15 74 19 2 56 76 39 12 13 6 15 75 15 0 15 76 19 4 58 13 7 15 77 19 2 56 76 39 12 13 7 15 78 15 0 15 79 19 4 58 13 16 15 80 19 2 56 76 39 12 13 16 15 80 15 0 15 81 19 4 58 13 17 15 80 19 2 56 76 39 12 13 17 15 80 15 0 15 82 19 4 58 13 18 15 80 19 2 56 76 39 12 13 18 15 80 15 0 15 83 19 4 58 13 19 15 84 19 2 56 76 39 12 13 19 15 85 15 0 15 86 19 4 58 13 20 15 87 19 2 56 76 39 12 13 20 15 88 15 0 15 89 19 4 58 13 21 15 90 19 2 56 76 39 12 13 21 15 91 15 0 15 92 19 4 58 13 31 15 93 19 2 56 76 39 12 13 31 15 94 15 0 15 95 19 4 58 13 32 15 96 19 2 56 76 39 12 13 32 15 97 15 0 15 98 19 4 58 13 33 15 99 19 2 56 76 39 12 13 33 15 100 15 0 15 101 19 4 58 13 34 15 102 19 2 56 76 39 12 13 34 15 103 15 0 15 104 19 4 58 15 105 13 34 13 33 13 32 13 31 13 30 13 29 13 28 13 27 13 26 13 25 13 24 13 23 13 22 13 21 13 20 13 19 13 18 13 17 13 16 13 15 13 14 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 36 106 29) #36# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 15 5 77 77 15 6 9 37 77 77 15 7 19 15 8 15 0 19 1 107 78 103 15 9 1 105 12 19 2 106 1 0 73 29) #54=#A(t (108) (make::foreign-system "FOREIGN-SYSTEM-" (make::kind make::object) ((make::color :white (member :gray :black :white) nil 0 make::component-color) (type :system t nil 1 make::component-type) (make::name nil (or symbol string) nil 2 make::component-name) (make::indent 0 (mod 1024) nil 3 make::component-indent) (make::host nil t nil 4 make::component-host) (make::device nil t nil 5 make::component-device) (make::source-root-dir nil t nil 6 make::component-source-root-dir) (make::source-pathname make::*source-pathname-default* t nil 7 make::component-source-pathname) (make::source-extension nil t nil 8 make::component-source-extension) (make::binary-pathname make::*binary-pathname-default* t nil 9 make::component-binary-pathname) (make::binary-root-dir nil t nil 10 make::component-binary-root-dir) (make::binary-extension nil t nil 11 make::component-binary-extension) (package nil t nil 12 make::component-package) (make::language nil (or null symbol) nil 13 make::component-language) (make::compiler nil (or null symbol function) nil 14 make::component-compiler) (make::loader nil (or null symbol function) nil 15 make::component-loader) (make::compiler-options nil list nil 16 make::component-compiler-options) (make::components nil list nil 17 make::component-components) (make::depends-on nil list nil 18 make::component-depends-on) (make::proclamations nil t nil 19 make::component-proclamations) (make::initially-do (lambda nil nil) t nil 20 make::component-initially-do) (make::finally-do (lambda nil nil) t nil 21 make::component-finally-do) (make::compile-form (lambda nil nil) t nil 22 make::component-compile-form) (make::load-form (lambda nil nil) t nil 23 make::component-load-form) (make::load-only nil t nil 24 make::component-load-only) (make::compile-only nil t nil 25 make::component-compile-only) (make::load-always nil t nil 26 make::component-load-always) (make::banner nil (or null string) nil 27 make::component-banner) (documentation nil (or null string) nil 28 make::component-documentation) (make::long-documentation nil (or null string) nil 29 make::component-long-documentation) (make::author nil (or null string) nil 30 make::component-author) (make::licence nil (or null string) nil 31 make::component-licence) (make::maintainer nil (or null string) nil 32 make::component-maintainer) (make::version nil (or null string) nil 33 make::component-version) (make::non-required-p nil boolean nil 34 make::component-non-required-p) (make::kind nil t nil 35 nil) (make::object nil t nil 36 nil)) make::copy-foreign-system make::component (make::make-foreign-system) make::foreign-system-p si::define-structure make::make-foreign-system (nil :object :kind :non-required-p :version :maintainer :licence :author :long-documentation :documentation :banner :load-always :compile-only :load-only :load-form :compile-form :finally-do :initially-do :proclamations :depends-on :components :compiler-options :loader :compiler :language :package :binary-extension :binary-root-dir :binary-pathname :source-extension :source-pathname :source-root-dir :device :host :indent :name :type :color) :white #:color :system #:type #:name #:indent #:host #:device #:source-root-dir make::*source-pathname-default* #:source-pathname #:source-extension make::*binary-pathname-default* #:binary-pathname #:binary-root-dir #:binary-extension #:package #:language #:compiler #:loader #:compiler-options #:components #:depends-on #:proclamations #Y(nil nil nil (26 75 73 29) #54# #1# 0) #:initially-do #Y(nil nil nil (26 75 73 29) #54# #1# 0) #:finally-do #Y(nil nil nil (26 75 73 29) #54# #1# 0) #:compile-form #Y(nil nil nil (26 75 73 29) #54# #1# 0) #:load-form #:load-only #:compile-only #:load-always #:banner #:documentation #:long-documentation #:author #:licence #:maintainer #:version #:non-required-p #:kind #:object boolean typep make::non-required-p si::structure-type-error (or null string) (or null string) make::version (or null string) (or null string) make::maintainer (or null string) (or null string) make::licence (or null string) (or null string) make::author (or null string) (or null string) make::long-documentation (or null string) (or null string) documentation (or null string) (or null string) make::banner list make::depends-on make::components make::compiler-options (or null symbol function) (or null symbol function) make::loader (or null symbol function) (or null symbol function) make::compiler (or null symbol) (or null symbol) make::language (mod 1024) (mod 1024) make::indent (or symbol string) (or symbol string) make::name (member :gray :black :white) (member :gray :black :white) make::color 0 si::make-structure #Y(make::make-foreign-system nil nil (28 10 22 40 3 14 11 46 12 22 40 3 14 13 46 14 22 40 2 77 46 15 22 40 3 9 0 46 16 22 40 2 77 46 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 3 14 20 46 21 22 40 2 77 46 22 22 40 3 14 23 46 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 27 22 40 2 77 46 28 22 40 2 77 46 29 22 40 2 77 46 30 22 40 2 77 46 31 22 40 2 77 46 32 22 40 2 77 46 33 22 40 2 77 46 34 22 40 4 34 35 12 46 36 22 40 4 34 37 12 46 38 22 40 4 34 39 12 46 40 22 40 4 34 41 12 46 42 22 40 2 77 46 43 22 40 2 77 46 44 22 40 2 77 46 45 22 40 2 77 46 46 22 40 2 77 46 47 22 40 2 77 46 48 22 40 2 77 46 49 22 40 2 77 46 50 22 40 2 77 46 51 22 40 2 77 46 52 22 40 2 77 46 53 22 40 2 77 46 54 22 40 2 77 46 55 13 2 15 56 19 2 57 76 39 12 13 2 15 56 15 0 15 58 19 4 59 13 3 15 60 19 2 57 76 39 12 13 3 15 61 15 0 15 62 19 4 59 13 4 15 63 19 2 57 76 39 12 13 4 15 64 15 0 15 65 19 4 59 13 5 15 66 19 2 57 76 39 12 13 5 15 67 15 0 15 68 19 4 59 13 6 15 69 19 2 57 76 39 12 13 6 15 70 15 0 15 71 19 4 59 13 7 15 72 19 2 57 76 39 12 13 7 15 73 15 0 15 74 19 4 59 13 8 15 75 19 2 57 76 39 12 13 8 15 76 15 0 15 77 19 4 59 13 9 15 78 19 2 57 76 39 12 13 9 15 79 15 0 15 80 19 4 59 13 18 15 81 19 2 57 76 39 12 13 18 15 81 15 0 15 82 19 4 59 13 19 15 81 19 2 57 76 39 12 13 19 15 81 15 0 15 83 19 4 59 13 20 15 81 19 2 57 76 39 12 13 20 15 81 15 0 15 84 19 4 59 13 21 15 85 19 2 57 76 39 12 13 21 15 86 15 0 15 87 19 4 59 13 22 15 88 19 2 57 76 39 12 13 22 15 89 15 0 15 90 19 4 59 13 23 15 91 19 2 57 76 39 12 13 23 15 92 15 0 15 93 19 4 59 13 33 15 94 19 2 57 76 39 12 13 33 15 95 15 0 15 96 19 4 59 13 34 15 97 19 2 57 76 39 12 13 34 15 98 15 0 15 99 19 4 59 13 36 15 100 19 2 57 76 39 12 13 36 15 101 15 0 15 102 19 4 59 15 103 13 36 13 35 13 34 13 33 13 32 13 31 13 30 13 29 13 28 13 27 13 26 13 25 13 24 13 23 13 22 13 21 13 20 13 19 13 18 13 17 13 16 13 15 13 14 13 13 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 38 104 29) #54# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #55=#A(t (17) (make::register-foreign-system make::name (nil :kind :representation) make::representation make::kind :name :kind :object make::make-foreign-system make::fs #:g19000 #:g19001 make::canonicalize-system-name make::*defined-systems* si::hash-set #Y(make::register-foreign-system nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 2 77 46 4 14 5 13 2 14 6 13 0 14 7 13 1 19 6 8 45 9 10 3 45 10 10 1 45 11 13 1 19 1 12 12 14 13 13 0 19 3 14 43 1 43 1 43 1 29) #55# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 10 12 1 11 7 3 12 15 12 1 13 6 3 12 14 14 15 15 77 77 19 1 16 6 3 6 1 6 2 12 19 4 17 1 0 73 29) #56=#A(t (18) (make::missing-component (simple-condition) :initfunction make::mmc stream #57="MK:DEFSYSTEM: missing component ~S for ~S." make::missing-component-name make::missing-component-component format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 19 4 8 29) #56# #1# 0) #Y(nil nil nil (26 34 9 73 29) #56# #1# 0) (:initform (lambda (make::mmc stream) (format stream #57# (make::missing-component-name make::mmc) (make::missing-component-component make::mmc))) :name si::report-function) (:initargs (:name) :readers (make::missing-component-name) :name make::name) (:initargs (:component) :readers (make::missing-component-component) :name make::component) :direct-default-initargs :component constantly clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 10 12 1 11 7 3 6 1 12 77 19 4 12 1 0 73 29) #58=#A(t (13) (make::missing-module (make::missing-component) :initfunction make::mmc stream #59="MK:DEFSYSTEM: missing module ~S for ~S." make::missing-component-name make::missing-component-component format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 19 4 8 29) #58# #1# 0) #Y(nil nil nil (26 34 9 73 29) #58# #1# 0) (:initform (lambda (make::mmc stream) (format stream #59# (make::missing-component-name make::mmc) (make::missing-component-component make::mmc))) :name si::report-function) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 10 12 1 11 7 3 6 1 12 77 19 4 12 1 0 73 29) #60=#A(t (13) (make::missing-system (make::missing-module) :initfunction make::msc stream #61="MK:DEFSYSTEM: missing system ~S~@[ for S~]." make::missing-component-name make::missing-component-component format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 19 4 8 29) #60# #1# 0) #Y(nil nil nil (26 34 9 73 29) #60# #1# 0) (:initform (lambda (make::msc stream) (format stream #61# (make::missing-component-name make::msc) (make::missing-component-component make::msc))) :name si::report-function) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*file-load-time-table* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 24 12 19 2 25 1 0 73 29) #62=#A(t (26) (make::component-load-time make::component #:g19007 string typep make::*file-load-time-table* gethash pathname namestring make::component-type #:g19008 :defsystem make::component-name make::name make::compute-system-path make::path :file :private-file :source make::component-full-pathname (:defsystem :private-file :file) si::ecase-error (string pathname make::component) si::etypecase-error #Y(make::component-load-time nil nil (24 45 1 26 10 0 73 39 154 10 0 45 2 13 0 15 3 19 2 4 39 10 13 1 14 5 19 2 6 38 130 13 0 15 7 19 2 4 39 13 10 1 16 8 12 14 5 19 2 6 38 109 13 0 15 1 19 2 4 39 93 13 1 19 1 9 45 10 10 0 42 11 39 13 2 19 1 12 45 13 10 0 39 7 13 0 77 19 2 14 45 15 10 0 73 39 11 10 0 16 8 12 14 5 19 2 6 43 2 38 39 41 16 4 42 17 26 13 2 14 18 19 2 19 45 15 10 0 73 39 8 13 0 14 5 19 2 6 43 1 38 8 13 0 15 20 19 2 21 43 1 38 8 13 0 15 22 19 2 23 43 1 29) #62# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 1 0 73 29) #63=#A(t (29) (make::component-load-time make::value make::component when etypecase string setf gethash make::*file-load-time-table* pathname namestring the ecase make::component-type :defsystem let* make::name make::component-name (make::path (when make::name (make::compute-system-path make::name nil))) (declare (type (or string pathname null) make::path)) make::path (gethash (namestring make::path) make::*file-load-time-table*) (:file :private-file) let make::component-full-pathname :source (gethash make::path make::*file-load-time-table*) #Y(make::component-load-time nil nil (24 45 1 24 45 2 26 15 3 13 0 15 4 13 0 15 5 15 6 15 7 13 0 1 8 6 3 12 10 1 6 3 6 2 12 15 9 15 6 15 7 15 10 15 11 15 9 10 0 6 3 6 2 12 1 8 6 3 12 10 1 6 3 6 2 12 15 2 15 12 15 13 10 0 6 2 12 14 14 15 15 15 16 15 17 10 0 6 2 6 2 12 1 18 6 2 12 15 19 15 3 15 20 15 6 15 21 10 1 6 3 6 3 6 4 6 2 12 15 22 15 23 15 20 15 24 13 0 11 25 6 3 6 2 6 1 12 15 3 15 20 15 6 15 26 10 1 6 3 6 3 6 3 6 2 6 4 6 2 6 5 12 10 1 6 4 73 29) #63# #1# 0) si::do-defsetf)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 28 12 19 2 29 1 0 73 29) #64=#A(t (30) (make::compute-system-path make::module-name make::definition-pname #:g19010 symbol typep string string-downcase (symbol string) si::etypecase-error make::module-string-name :name :type make::*system-extension* make-pathname make::file-pathname :directory :relative make::lib-file-pathname probe-file make::*central-registry* listp si::%dolist-var make::registry make::registry-pathname make::reg-path make::append-directories make::file #Y(make::compute-system-path nil nil (24 45 1 24 45 2 26 10 1 45 3 13 0 15 4 19 2 5 39 11 10 2 16 6 12 19 1 7 38 21 13 0 15 6 19 2 5 39 5 10 2 38 8 13 0 15 8 19 2 9 43 1 45 10 14 11 13 0 14 12 14 13 19 4 14 45 15 14 16 14 17 10 1 6 2 12 14 11 13 1 14 12 14 13 19 6 14 45 18 10 3 39 5 10 3 16 19 73 40 118 11 20 39 103 11 20 16 21 39 74 58 60 69 11 20 45 22 75 45 23 38 51 10 1 4 51 0 13 0 19 1 24 45 25 13 0 13 5 19 2 26 16 19 40 10 13 0 13 4 19 2 26 16 19 45 27 10 0 39 6 10 0 73 36 4 43 2 10 1 5 51 1 10 1 40 -53 75 73 43 2 63 38 22 14 20 13 1 19 2 26 16 19 73 40 10 14 20 13 0 19 2 26 16 19 38 12 10 1 16 19 73 40 5 10 0 16 19 43 3 29) #64# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 1 0 73 29) #65=#A(t (24) (make::system-definition-pathname make::system-name #:g19014 #:g19015 0 error si::temp #Y(nil nil nil (24 45 6 26 10 0 51 2 35 1 0 29) #65# #1# 0) si::*handler-clusters* :error make::find-system condition make::system :type "system" :defaults :source make::component-full-pathname pathname make-pathname make::system-def-pathname probe-file #Y(make::system-definition-pathname nil nil (24 45 1 26 57 2 60 50 75 45 3 57 4 61 1 25 15 5 34 7 3 6 1 12 11 8 3 48 8 13 3 14 9 19 2 10 36 2 44 1 10 1 45 11 77 13 0 72 2 43 1 36 2 62 43 1 63 45 12 10 0 39 35 14 13 15 14 14 15 13 0 14 16 19 2 17 16 18 12 19 4 19 45 20 13 0 10 0 16 21 12 72 2 43 1 38 5 77 77 72 2 43 1 29) #65# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*reload-systems-from-disk* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 56 12 19 2 57 1 0 73 29) #66=#A(t (58) (make::find-system make::system-name :ask make::mode make::definition-pname #:g19017 make::get-system #\y "System ~A not loaded. Shall I try loading it? " make::y-or-n-p-wait :load :error make::missing-system :name error :load-or-nil make::system make::*reload-systems-from-disk* make::foreign-system-p "Foreign system ~S cannot be reloaded by MK:DEFSYSTEM." warn make::compute-system-path make::path make::component-load-time file-write-date < "Loading system ~A from file ~A" format make::tell-user-generic load #:g19019 #:g19020 #:g19021 string typep make::*file-load-time-table* si::hash-set pathname namestring make::component make::component-type #:g19028 :defsystem make::component-name make::name :file :private-file :source make::component-full-pathname (:defsystem :private-file :file) si::ecase-error (string pathname make::component) si::etypecase-error "Foreign system ~S cannot be reloaded by MK:DEFSYSTEM." "Can't find system named ~s." (:ask :error :load-or-nil :load) #Y(make::find-system nil nil (24 45 1 25 40 3 14 2 46 3 25 40 2 77 46 4 26 57 0 60 447 10 2 45 5 10 0 42 2 34 13 4 19 1 6 73 40 24 15 7 9 20 15 8 13 4 19 4 9 73 39 10 13 4 14 10 13 2 19 3 0 38 402 42 11 20 13 4 19 1 6 73 40 10 15 12 14 13 13 4 19 3 14 38 380 42 15 304 13 4 19 1 6 45 16 11 17 76 39 3 10 0 73 40 283 13 0 19 1 18 39 12 15 19 13 0 19 2 20 75 73 36 2 73 40 262 13 5 13 3 19 2 21 45 22 10 0 39 28 10 1 76 40 23 13 0 19 1 23 76 40 15 13 0 19 1 23 12 10 0 16 24 12 19 2 25 39 210 77 15 26 13 6 13 0 19 4 27 12 19 1 28 13 0 19 1 29 13 6 19 1 6 51 1 10 1 39 180 10 0 45 30 10 1 16 24 45 31 10 1 39 162 10 1 45 32 13 0 15 33 19 2 34 39 12 13 2 14 35 13 1 19 3 36 38 134 13 0 15 37 19 2 34 39 15 10 2 16 38 12 14 35 13 1 19 3 36 38 111 13 0 15 39 19 2 34 39 95 13 2 19 1 40 45 41 10 0 42 42 40 13 3 19 1 43 45 44 10 0 39 7 13 0 77 19 2 21 45 22 10 0 39 13 10 0 16 38 12 14 35 13 4 19 3 36 43 2 38 40 41 45 4 42 46 27 13 3 14 47 19 2 48 45 22 10 0 39 10 13 0 14 35 13 3 19 3 36 43 1 38 8 13 0 15 49 19 2 50 43 1 38 8 13 0 15 51 19 2 52 43 1 10 0 43 1 43 1 10 1 43 1 73 40 4 10 0 73 43 1 38 74 42 10 64 11 17 76 39 6 13 4 19 1 6 73 40 49 13 4 19 1 6 12 19 1 18 39 16 15 53 13 4 19 1 6 12 19 2 20 75 73 36 1 73 40 20 13 4 14 15 13 2 19 3 0 73 40 8 15 54 13 4 19 2 14 38 8 13 0 15 55 19 2 50 43 1 63 29) #66# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #67=#A(t (10) (make::print-component make::component stream make::depth "#<~:@(~A~): ~A>" make::component-type make::component-name format #Y(make::print-component nil nil (24 45 1 24 45 2 24 45 3 26 13 1 15 4 13 2 19 1 5 12 13 2 19 1 6 12 19 4 7 29) #67# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 23 12 19 2 24 1 0 73 29) #68=#A(t (25) (make::describe-system make::name *standard-output* stream make::component typep :load make::find-system make::system "~&~A ~A: ~
                    ~@[~&   Host: ~A~]~
                    ~@[~&   Device: ~A~]~
                    ~@[~&   Package: ~A~]~
                    ~&   Source: ~@[~A~] ~@[~A~] ~@[~A~]~
                    ~&   Binary: ~@[~A~] ~@[~A~] ~@[~A~]~
                    ~@[~&   Depends On: ~A ~]~&   Components:~{~15T~A~&~}" make::component-type make::component-name make::component-host make::component-device make::component-package :source make::component-root-dir make::component-pathname make::component-extension :binary make::component-depends-on make::component-components format #Y(make::describe-system nil nil (24 45 1 25 40 3 14 2 46 3 26 13 1 15 4 19 2 5 39 5 10 1 38 8 13 1 14 6 19 2 7 45 8 13 1 15 9 13 0 19 1 10 12 13 0 19 1 11 12 13 0 19 1 12 12 13 0 19 1 13 12 13 0 19 1 14 12 13 0 14 15 19 2 16 12 13 0 14 15 19 2 17 12 13 0 14 15 19 2 18 12 13 0 14 19 19 2 16 12 13 0 14 19 19 2 17 12 13 0 14 19 19 2 18 12 13 0 19 1 20 12 13 0 19 1 21 12 19 15 22 10 0 73 43 1 29) #68# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #69=#A(t (11) (make::canonicalize-component-name make::component make::component-name string typep #:g19037 string-downcase #:g19038 si::structure-set #Y(make::canonicalize-component-name nil nil (24 45 1 26 13 0 19 1 2 12 15 3 19 2 4 39 8 13 0 19 1 2 38 33 10 0 45 5 13 1 19 1 2 16 3 12 19 1 6 45 7 13 1 15 1 9 2 13 0 19 4 8 43 1 43 1 29) #69# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #70=#A(t (14) (make::component-pathname make::component type #:g19040 :source make::component-source-pathname :binary make::component-binary-pathname :error make::component-error-pathname (:source :binary :error) si::ecase-error #Y(make::component-pathname nil nil (24 45 1 24 45 2 26 10 1 73 39 46 10 0 45 3 10 0 42 4 8 13 2 19 1 5 38 28 42 6 8 13 2 19 1 7 38 18 42 8 8 13 2 19 1 9 38 8 13 0 15 10 19 2 11 43 1 29) #70# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #71=#A(t (9) (make::component-error-pathname make::component :binary make::component-pathname make::binary make::*compile-error-file-type* make::new-file-type #Y(make::component-error-pathname nil nil (24 45 1 26 13 0 14 2 19 2 3 45 4 13 0 14 5 19 2 6 43 1 29) #71# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #72=#A(t (13) (make::component-pathname make::value make::component type when ecase :source setf make::component-source-pathname :binary make::component-binary-pathname #Y(make::component-pathname nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 1 15 5 13 0 14 6 15 7 15 8 10 1 6 2 12 10 2 6 3 6 2 12 14 9 15 7 15 10 10 1 6 2 12 10 2 6 3 6 2 6 4 6 3 73 29) #72# #1# 0) si::do-defsetf)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #73=#A(t (13) (make::component-root-dir make::component type #:g19042 :source make::component-source-root-dir :binary :error make::component-binary-root-dir (:source :error :binary) si::ecase-error #Y(make::component-root-dir nil nil (24 45 1 24 45 2 26 10 1 73 39 39 10 0 45 3 10 0 42 4 8 13 2 19 1 5 38 21 41 6 4 42 7 8 13 2 19 1 8 38 8 13 0 15 9 19 2 10 43 1 29) #73# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #74=#A(t (13) (make::component-root-dir make::value make::component type when ecase :source setf make::component-source-root-dir :binary make::component-binary-root-dir #Y(make::component-root-dir nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 1 15 5 13 0 14 6 15 7 15 8 10 1 6 2 12 10 2 6 3 6 2 12 14 9 15 7 15 10 10 1 6 2 12 10 2 6 3 6 2 6 4 6 3 73 29) #74# #1# 0) si::do-defsetf)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*source-pathnames-table* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*binary-pathnames-table* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 11 2 52 0 1 0 73 29) #A(t (3) (make::*reset-full-pathname-table* si::*make-special t)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #75=#A(t (6) (make::clear-full-pathname-tables make::*source-pathnames-table* clrhash make::*binary-pathnames-table* #Y(make::clear-full-pathname-tables nil nil (26 11 1 16 2 11 3 16 2 29) #75# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #76=#A(t (16) (make::component-full-pathname make::component type make::*version* make::version :source make::*source-pathnames-table* gethash make::old make::component-full-pathname-i make::new si::hash-set :binary make::*binary-pathnames-table* #Y(make::component-full-pathname nil nil (24 45 1 24 45 2 25 40 3 14 3 46 4 26 10 2 73 39 104 10 1 42 5 44 13 2 14 6 19 2 7 45 8 10 0 73 40 26 13 3 13 2 13 1 19 3 9 45 10 13 4 14 6 13 0 19 3 11 10 0 73 43 1 43 1 38 56 42 12 44 13 2 14 13 19 2 7 45 8 10 0 73 40 26 13 3 13 2 13 1 19 3 9 45 10 13 4 14 13 13 0 19 3 11 10 0 73 43 1 43 1 38 10 13 2 13 1 13 0 19 3 9 29) #76# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 32 12 19 2 33 1 0 73 29) #77=#A(t (34) (make::component-full-pathname-i make::component type make::*version* make::version make::version-dir make::version-replace make::translate-version make::*version-dir* make::*version-replace* make::component-root-dir make::append-directories make::component-pathname pathname make::pathname-logical-p :name make::component-name :type make::component-extension make-pathname merge-pathnames translate-logical-pathname namestring :host make::component-host pathname-host :directory pathname-directory pathname-name :device make::component-device pathname-device #Y(make::component-full-pathname-i nil nil (24 45 1 24 45 2 25 40 3 14 3 46 4 26 75 45 5 75 45 6 10 2 39 13 13 2 19 1 7 51 1 55 0 1 38 9 11 8 51 1 11 9 51 0 10 0 39 6 10 1 73 38 14 13 4 13 3 19 2 10 12 13 1 19 2 11 12 13 4 13 3 19 2 12 12 19 2 11 45 13 13 0 19 1 14 39 39 13 0 14 15 13 5 19 1 16 12 14 17 13 5 13 4 19 2 18 12 19 4 19 12 19 2 20 51 0 13 0 19 1 21 16 22 38 72 14 23 13 5 19 1 24 73 40 6 13 0 19 1 25 12 14 26 13 0 19 1 27 12 14 15 13 0 19 1 28 73 40 6 13 5 19 1 16 12 14 17 13 5 13 4 19 2 18 12 14 29 13 5 19 1 30 73 40 6 13 0 19 1 31 12 19 10 19 16 22 43 1 29) #77# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #78=#A(t (15) (make::translate-version make::version "" symbolp string make::sversion lower-case-p find-if string-downcase stringp t "~&; Illegal version ~S" error #Y(make::translate-version nil nil (24 45 1 26 10 0 76 39 8 15 2 77 72 2 38 62 10 0 16 3 39 35 10 0 16 4 45 5 33 6 12 13 0 19 2 7 39 6 10 0 73 38 6 13 0 19 1 8 12 43 1 77 72 2 38 22 10 0 16 9 39 9 13 0 14 10 72 2 38 8 15 11 13 0 19 2 12 29) #78# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 1 0 73 29) #79=#A(t (18) (make::component-extension make::component type (nil :local) make::local #:g19058 :source make::component-source-extension make::default-source-extension :binary make::component-binary-extension make::default-binary-extension :error make::*compile-error-file-type* (:source :binary :error) si::ecase-error #Y(make::component-extension nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 10 1 45 5 10 0 42 6 22 13 3 19 1 7 73 40 12 10 1 76 73 39 6 13 3 19 1 8 38 40 42 9 22 13 3 19 1 10 73 40 12 10 1 76 73 39 6 13 3 19 1 11 38 16 42 12 6 11 13 73 38 8 13 0 15 14 19 2 15 43 1 29) #79# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #80=#A(t (14) (make::component-extension make::value make::component type ecase :source setf make::component-source-extension :binary make::component-binary-extension :error make::*compile-error-file-type* #Y(make::component-extension nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 0 14 5 15 6 15 7 10 1 6 2 12 10 2 6 3 6 2 12 14 8 15 6 15 9 10 1 6 2 12 10 2 6 3 6 2 12 14 10 15 6 15 11 10 2 6 3 6 2 6 5 73 29) #80# #1# 0) si::do-defsetf)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 51 12 19 2 52 1 0 73 29) #81=#A(t (53) (make::create-component type make::name make::definition-body make::parent make::indent make::make-component :type :name :indent apply make::component :load-only find #:g19076 make::component-load-only #:g19077 si::structure-set :compile-only #:g19078 make::component-compile-only #:g19079 :compiler-options #:g19080 make::component-compiler-options #:g19081 :load-always #:g19082 make::component-load-always #:g19083 make::canonicalize-component-name #:g19084 make::component-package #:g19085 :defsystem eq :system :subsystem #:g19086 #:g19087 make::canonicalize-system-name make::*defined-systems* si::hash-set make::create-component-pathnames + make::expand-component-components make::component-components make::link-component-depends-on #:g19091 make::topological-sort #:g19092 #Y(make::create-component nil nil (24 45 1 24 45 2 24 45 3 25 40 2 77 46 4 25 40 3 9 0 46 5 26 33 6 12 14 7 13 4 14 8 13 3 14 9 13 0 13 2 19 8 10 45 11 14 12 13 3 19 2 13 76 39 31 10 0 45 14 10 3 39 6 13 3 19 1 15 45 16 13 1 15 11 9 24 13 0 19 4 17 43 1 43 1 14 18 13 3 19 2 13 76 39 31 10 0 45 19 10 3 39 6 13 3 19 1 20 45 21 13 1 15 11 9 25 13 0 19 4 17 43 1 43 1 14 22 13 3 19 2 13 76 39 31 10 0 45 23 10 3 39 6 13 3 19 1 24 45 25 13 1 15 11 9 16 13 0 19 4 17 43 1 43 1 14 26 13 3 19 2 13 76 39 31 10 0 45 27 10 3 39 6 13 3 19 1 28 45 29 13 1 15 11 9 26 13 0 19 4 17 43 1 43 1 13 0 19 1 30 10 0 45 31 13 1 19 1 32 40 10 10 3 39 6 13 3 19 1 32 45 33 13 1 15 11 9 12 13 0 19 4 17 43 1 43 1 13 5 11 34 17 35 40 15 13 5 11 36 17 35 40 7 13 5 11 37 17 35 39 26 10 4 45 38 10 1 45 39 13 1 19 1 40 12 14 41 13 0 19 3 42 43 1 43 1 13 0 13 2 19 2 43 13 0 13 1 9 2 19 2 44 12 19 2 45 13 0 19 1 46 12 19 1 47 10 0 45 48 13 1 19 1 46 12 19 1 49 45 50 13 1 15 11 9 17 13 0 19 4 17 43 1 43 1 10 0 73 43 1 29) #81# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 29 12 19 2 30 1 0 73 29) #82=#A(t (31) (make::preprocess-component-definition make::definition-body list* make::*component-evaluated-slots* #:loop-list19107 make::slot make::value #:loop-list-head19108 #:loop-list-tail19109 0 getf #:g19111 si::rem-f si::flag #:g19110 #:g19112 #:g19113 rplacd make::*component-form-slots* #:loop-list19114 #:loop-list-head19115 #:loop-list-tail19116 #:g19118 #:g19117 #:g19119 lambda #:g19120 quote append #Y(make::preprocess-component-definition nil nil (24 45 1 26 15 2 58 60 127 77 14 3 46 4 46 5 75 45 6 75 6 1 45 7 10 0 45 8 57 9 61 2 2 87 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 13 7 13 4 19 2 10 51 3 10 3 39 53 10 4 45 11 13 8 10 0 17 12 47 1 13 45 14 10 0 51 10 10 1 43 2 43 1 10 1 45 15 13 5 10 4 6 2 45 16 13 1 10 0 17 17 10 0 43 1 43 1 5 51 1 35 0 0 10 2 5 73 36 6 62 73 43 2 43 1 43 2 63 12 58 60 119 77 14 18 46 19 46 5 75 6 1 45 20 10 0 45 21 57 9 61 2 2 84 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 3 45 22 13 7 10 0 17 12 47 1 13 45 23 10 0 51 9 10 1 43 2 43 1 10 1 45 24 13 4 15 25 77 13 7 13 4 19 2 10 6 3 6 2 45 26 13 1 10 0 17 17 10 0 43 1 43 1 5 51 1 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 15 27 10 0 6 2 6 1 12 19 3 28 7 2 73 29) #82# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 14 16 9 2 19 4 17 1 0 73 29) #83=#A(t (18) (make::defsystem #:g19122 #:g19121 #:g19123 si::dm-too-few-arguments make::name make::definition-body :source-pathname find (when *load-pathname* (make-pathname :name nil :type nil :defaults *load-pathname*)) make::create-component :defsystem quote make::preprocess-component-definition (nil 0) #Y(make::defsystem nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 14 7 13 0 19 2 8 76 39 11 14 7 15 9 10 0 7 3 51 0 15 10 14 11 15 12 10 1 6 2 12 13 0 19 1 13 12 1 14 7 5 73 29) #83# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 83 12 19 2 84 1 0 73 29) #84=#A(t (85) (make::create-component-pathnames make::component make::parent #:g19182 make::component-language #:g19183 si::structure-set #:g19184 make::component-compiler #:g19185 #:g19186 make::component-loader #:g19187 #:g19188 :source make::component-root-dir eval #:g19189 #:g19190 #:g19191 #:g19192 :binary #:g19193 #:g19194 (:source :binary) si::ecase-error #:g19195 #:g19196 #:g19197 #:g19198 #:g19199 #:g19200 #:g19201 (:source :binary) #:g19202 make::component-pathname #:g19203 #:g19204 #:g19205 #:g19206 #:g19207 #:g19208 (:source :binary) #:g19209 #:g19210 #:g19211 #:g19212 #:g19213 #:g19214 #:g19215 (:source :binary) #:g19216 make::component-host *default-pathname-defaults* pathname-host #:g19217 #:g19218 make::component-device #:g19219 #:g19220 :local t make::component-extension make::default-source-extension #:g19221 #:g19222 #:g19223 #:g19224 #:g19225 #:g19226 :error make::*compile-error-file-type* (:source :binary :error) #:g19228 make::default-binary-extension #:g19229 #:g19230 #:g19231 #:g19232 #:g19233 #:g19234 (:source :binary :error) make::generate-component-pathname #Y(make::create-component-pathnames nil nil (24 45 1 24 45 2 26 10 1 45 3 13 2 19 1 4 40 10 10 1 39 6 13 1 19 1 4 45 5 13 1 15 1 9 13 13 0 19 4 6 43 1 43 1 10 1 45 7 13 2 19 1 8 40 10 10 1 39 6 13 1 19 1 8 45 9 13 1 15 1 9 14 13 0 19 4 6 43 1 43 1 10 1 45 10 13 2 19 1 11 40 10 10 1 39 6 13 1 19 1 11 45 12 13 1 15 1 9 15 13 0 19 4 6 43 1 43 1 10 1 45 13 13 2 14 14 19 2 15 16 16 45 17 10 1 39 72 11 14 45 18 10 0 42 14 26 10 2 45 19 10 2 45 20 13 1 15 1 9 6 13 0 19 4 6 43 1 43 1 38 36 42 21 26 10 2 45 22 10 2 45 23 13 1 15 1 9 10 13 0 19 4 6 43 1 43 1 38 8 13 0 15 24 19 2 25 43 1 43 1 43 1 10 1 45 26 13 2 14 21 19 2 15 16 16 45 27 10 1 39 72 11 21 45 28 10 0 42 14 26 10 2 45 29 10 2 45 30 13 1 15 1 9 6 13 0 19 4 6 43 1 43 1 38 36 42 21 26 10 2 45 31 10 2 45 32 13 1 15 1 9 10 13 0 19 4 6 43 1 43 1 38 8 13 0 15 33 19 2 25 43 1 43 1 43 1 10 1 45 34 13 2 14 14 19 2 35 16 16 45 36 10 1 39 72 11 14 45 37 10 0 42 14 26 10 2 45 38 10 2 45 39 13 1 15 1 9 7 13 0 19 4 6 43 1 43 1 38 36 42 21 26 10 2 45 40 10 2 45 41 13 1 15 1 9 9 13 0 19 4 6 43 1 43 1 38 8 13 0 15 42 19 2 25 43 1 43 1 43 1 10 1 45 43 13 2 14 21 19 2 35 16 16 45 44 10 1 39 72 11 21 45 45 10 0 42 14 26 10 2 45 46 10 2 45 47 13 1 15 1 9 7 13 0 19 4 6 43 1 43 1 38 36 42 21 26 10 2 45 48 10 2 45 49 13 1 15 1 9 9 13 0 19 4 6 43 1 43 1 38 8 13 0 15 50 19 2 25 43 1 43 1 43 1 10 1 45 51 13 2 19 1 52 40 17 10 1 39 6 13 1 19 1 52 40 6 14 53 19 1 54 45 55 13 1 15 1 9 4 13 0 19 4 6 43 1 43 1 10 1 45 56 13 2 19 1 57 40 10 10 1 39 6 13 1 19 1 57 45 58 13 1 15 1 9 5 13 0 19 4 6 43 1 43 1 10 1 45 59 13 2 14 14 14 60 14 61 19 4 62 40 26 13 2 19 1 4 39 6 13 2 19 1 63 40 12 10 1 39 8 13 1 14 14 19 2 62 45 64 11 14 45 65 10 0 42 14 26 10 2 45 66 10 2 45 67 13 1 15 1 9 8 13 0 19 4 6 43 1 43 1 38 45 42 21 26 10 2 45 68 10 2 45 69 13 1 15 1 9 11 13 0 19 4 6 43 1 43 1 38 17 42 70 7 10 1 52 71 38 8 13 0 15 72 19 2 25 43 1 43 1 43 1 10 1 45 73 13 2 14 21 14 60 14 61 19 4 62 40 26 13 2 19 1 4 39 6 13 2 19 1 74 40 12 10 1 39 8 13 1 14 21 19 2 62 45 75 11 21 45 76 10 0 42 14 26 10 2 45 77 10 2 45 78 13 1 15 1 9 8 13 0 19 4 6 43 1 43 1 38 45 42 21 26 10 2 45 79 10 2 45 80 13 1 15 1 9 11 13 0 19 4 6 43 1 43 1 38 17 42 70 7 10 1 52 71 38 8 13 0 15 81 19 2 25 43 1 43 1 43 1 13 1 13 0 14 14 19 3 82 13 1 13 0 14 21 19 3 82 29) #84# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 112 12 19 2 113 1 0 73 29) #85=#A(t (114) (make::generate-component-pathname make::component make::parent pathname-type make::component-type :defsystem :system #:g19316 #:g19317 make::component-pathname :binary eq :source make::component-root-dir #:g19318 #:g19319 #:g19320 #:g19321 si::structure-set #:g19322 #:g19323 (:source :binary) si::ecase-error #:g19324 #:g19325 #:g19326 #:g19327 #:g19328 #:g19329 #:g19330 #:g19331 (:source :binary) :private-file #:g19332 #:g19333 "" #:g19334 #:g19335 #:g19336 #:g19337 #:g19338 #:g19339 (:source :binary) make::null-string #:g19340 #:g19341 #:g19342 #:g19343 #:g19344 #:g19345 #:g19346 #:g19347 (:source :binary) #:g19348 #:g19349 make::component-name #:g19350 #:g19351 #:g19352 #:g19353 #:g19354 #:g19355 (:source :binary) :module :subsystem #:g19356 #:g19357 #:g19358 #:g19359 #:g19360 #:g19361 #:g19362 #:g19363 (:source :binary) #:g19364 #:g19365 make::append-directories #:g19366 #:g19367 #:g19368 #:g19369 #:g19370 #:g19371 (:source :binary) :file #:g19372 #:g19373 #:g19374 #:g19375 #:g19376 #:g19377 #:g19378 #:g19379 (:source :binary) #:g19380 #:g19381 #:g19382 #:g19383 #:g19384 #:g19385 #:g19386 #:g19387 (:source :binary) #:g19388 #:g19389 #:g19390 #:g19391 #:g19392 #:g19393 #:g19394 #:g19395 (:source :binary) #Y(make::generate-component-pathname nil nil (24 45 1 24 45 2 24 45 3 26 13 2 19 1 4 41 5 4 42 6 207 10 2 45 7 10 1 45 8 13 4 13 2 19 2 9 40 16 13 2 11 10 17 11 39 8 13 4 14 12 19 2 13 45 14 10 2 39 72 10 1 45 15 10 0 42 12 26 10 3 45 16 10 2 45 17 13 1 15 1 9 6 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 19 10 2 45 20 13 1 15 1 9 10 13 0 19 4 18 43 1 43 1 38 8 13 0 15 21 19 2 22 43 1 43 1 43 2 10 2 45 23 10 1 45 24 75 45 25 10 2 73 39 72 10 1 45 26 10 0 42 12 26 10 3 45 27 10 2 45 28 13 1 15 1 9 7 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 29 10 2 45 30 13 1 15 1 9 9 13 0 19 4 18 43 1 43 1 38 8 13 0 15 31 19 2 22 43 1 43 1 43 2 38 930 42 32 337 10 2 45 33 10 1 45 34 1 35 45 36 10 2 39 72 10 1 45 37 10 0 42 12 26 10 3 45 38 10 2 45 39 13 1 15 1 9 6 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 40 10 2 45 41 13 1 15 1 9 10 13 0 19 4 18 43 1 43 1 38 8 13 0 15 42 19 2 22 43 1 43 1 43 2 13 2 13 0 19 2 9 12 19 1 43 39 91 10 2 45 44 10 1 45 45 75 45 46 10 2 39 72 10 1 45 47 10 0 42 12 26 10 3 45 48 10 2 45 49 13 1 15 1 9 7 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 50 10 2 45 51 13 1 15 1 9 9 13 0 19 4 18 43 1 43 1 38 8 13 0 15 52 19 2 22 43 1 43 1 43 2 10 2 45 53 10 1 45 54 13 2 11 10 17 11 39 9 13 4 14 10 19 2 9 76 39 8 13 4 14 12 19 2 9 40 24 13 4 13 2 19 2 9 39 8 13 4 13 2 19 2 9 40 6 13 4 19 1 55 45 56 10 2 73 39 72 10 1 45 57 10 0 42 12 26 10 3 45 58 10 2 45 59 13 1 15 1 9 7 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 60 10 2 45 61 13 1 15 1 9 9 13 0 19 4 18 43 1 43 1 38 8 13 0 15 62 19 2 22 43 1 43 1 43 2 38 591 41 63 4 42 64 243 10 2 45 65 10 1 45 66 13 3 13 2 19 2 13 45 67 10 2 39 72 10 1 45 68 10 0 42 12 26 10 3 45 69 10 2 45 70 13 1 15 1 9 6 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 71 10 2 45 72 13 1 15 1 9 10 13 0 19 4 18 43 1 43 1 38 8 13 0 15 73 19 2 22 43 1 43 1 43 2 10 2 45 74 10 1 45 75 13 2 11 10 17 11 39 9 13 4 14 10 19 2 9 76 39 8 13 4 14 12 19 2 9 40 28 13 3 13 2 19 2 9 12 13 4 13 2 19 2 9 73 40 6 13 4 19 1 55 12 19 2 76 45 77 10 2 73 39 72 10 1 45 78 10 0 42 12 26 10 3 45 79 10 2 45 80 13 1 15 1 9 7 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 81 10 2 45 82 13 1 15 1 9 9 13 0 19 4 18 43 1 43 1 38 8 13 0 15 83 19 2 22 43 1 43 1 43 2 38 343 42 84 338 10 2 45 85 10 1 45 86 13 3 13 2 19 2 13 45 87 10 2 39 72 10 1 45 88 10 0 42 12 26 10 3 45 89 10 2 45 90 13 1 15 1 9 6 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 91 10 2 45 92 13 1 15 1 9 10 13 0 19 4 18 43 1 43 1 38 8 13 0 15 93 19 2 22 43 1 43 1 43 2 13 2 13 0 19 2 9 12 19 1 43 39 91 10 2 45 94 10 1 45 95 75 45 96 10 2 39 72 10 1 45 97 10 0 42 12 26 10 3 45 98 10 2 45 99 13 1 15 1 9 7 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 100 10 2 45 101 13 1 15 1 9 9 13 0 19 4 18 43 1 43 1 38 8 13 0 15 102 19 2 22 43 1 43 1 43 2 10 2 45 103 10 1 45 104 13 3 13 2 19 2 9 12 13 4 13 2 19 2 9 73 40 25 13 4 19 1 55 73 40 17 13 2 11 10 17 11 73 39 8 13 4 14 12 19 2 9 12 19 2 76 45 105 10 2 73 39 72 10 1 45 106 10 0 42 12 26 10 3 45 107 10 2 45 108 13 1 15 1 9 7 13 0 19 4 18 43 1 43 1 38 36 42 10 26 10 3 45 109 10 2 45 110 13 1 15 1 9 9 13 0 19 4 18 43 1 43 1 38 8 13 0 15 111 19 2 22 43 1 43 1 43 2 38 3 75 73 29) #85# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #86=#A(t (16) (make::expand-component-components make::component make::indent make::component-components make::definitions :serial eq #:g19400 make::expand-serial-component-chain #:g19401 si::structure-set #:g19402 make::expand-component-definitions #:g19403 #Y(make::expand-component-components nil nil (24 45 1 25 40 3 9 0 46 2 26 13 1 19 1 3 45 4 10 0 4 12 11 5 17 6 39 35 10 2 45 7 10 1 5 12 13 3 13 2 19 3 8 45 9 13 1 15 1 9 17 13 0 19 4 10 43 1 43 1 38 31 10 2 45 11 13 1 13 3 13 2 19 3 12 45 13 13 1 15 1 9 17 13 0 19 4 10 43 1 43 1 43 1 29) #86# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #87=#A(t (12) (make::expand-component-definitions make::definitions make::parent make::indent make::components si::%dolist-var make::definition make::expand-component-definition make::new nreverse #Y(make::expand-component-definitions nil nil (24 45 1 24 45 2 25 40 3 9 0 46 3 26 75 45 4 10 3 45 5 75 45 6 38 35 10 1 4 51 0 13 0 13 4 13 3 19 3 7 45 8 10 0 39 8 13 0 10 3 3 51 3 43 1 10 1 5 51 1 10 1 40 -37 43 2 10 0 16 9 43 1 29) #87# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #88=#A(t (21) (make::expand-serial-component-chain make::definitions make::parent make::indent make::components make::previous si::%dolist-var make::definition make::expand-component-definition make::new #:g19422 #:g19420 make::component-depends-on adjoin #:g19421 make::component si::structure-set make::component-name nreverse #Y(make::expand-serial-component-chain nil nil (24 45 1 24 45 2 25 40 3 9 0 46 3 26 77 77 46 4 46 5 10 4 45 6 75 45 7 38 80 10 1 4 51 0 13 0 13 5 13 4 19 3 8 45 9 10 0 39 53 10 3 39 35 10 3 45 10 10 1 45 11 13 1 13 0 19 1 12 12 19 2 13 45 14 13 1 15 15 9 18 13 0 19 4 16 43 3 13 0 19 1 17 51 3 13 0 10 4 3 51 4 43 1 10 1 5 51 1 10 1 40 -82 43 2 10 1 16 18 43 2 29) #88# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 75 52 0 1 0 73 29) #A(t (2) (make::*enable-straz-absolute-string-hack* si::*make-special)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #89=#A(t (11) (make::absolute-file-namestring-p string #\: :test char= find make::null-string char #\/ #Y(make::absolute-file-namestring-p nil nil (24 45 1 26 15 2 13 0 14 3 33 4 12 19 4 5 73 40 22 13 0 19 1 6 76 73 39 13 13 0 8 0 17 7 12 15 8 19 2 4 29) #89# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #90=#A(t (17) (make::expand-component-definition make::definition make::parent make::indent stringp make::*enable-straz-absolute-string-hack* make::absolute-file-namestring-p :private-file make::create-component :file listp (:defsystem :system :subsystem :module :file :private-file) member second cddr #Y(make::expand-component-definition nil nil (24 45 1 24 45 2 25 40 3 9 0 46 3 26 10 2 76 39 5 75 73 38 111 10 2 16 4 39 40 11 5 39 6 13 2 19 1 6 39 15 14 7 13 2 77 13 1 13 0 19 5 8 38 13 14 9 13 2 77 13 1 13 0 19 5 8 38 66 10 2 16 10 39 11 10 2 4 12 15 11 19 2 12 76 39 20 14 9 10 2 4 12 10 2 5 12 13 1 13 0 19 5 8 38 29 10 2 16 10 73 39 22 10 2 4 12 10 2 16 13 12 10 2 16 14 12 13 1 13 0 19 5 8 29) #90# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 24 12 19 2 25 1 0 73 29) #91=#A(t (26) (make::link-component-depends-on make::components si::%dolist-var make::component make::*system-dependencies-delayed* make::component-type :defsystem eq #:g19430 make::dependency string :key make::component-name :test string-equal find make::parent "Dependency ~S of component ~S not found." warn #Y(nil nil nil (24 45 9 26 10 0 16 10 12 13 4 14 11 33 12 12 14 13 33 14 12 19 6 15 45 16 10 0 39 6 10 0 73 38 10 15 17 13 1 13 3 19 3 18 43 1 29) #91# #1# 0) make::component-depends-on mapcar #:g19431 si::structure-set #Y(make::link-component-depends-on nil nil (24 45 1 26 10 0 45 2 75 45 3 38 61 10 1 4 51 0 11 4 39 11 13 0 19 1 5 12 11 6 17 7 76 39 34 10 0 45 8 34 19 12 13 1 19 1 20 12 19 2 21 45 22 13 1 15 3 9 18 13 0 19 4 23 43 1 43 1 10 1 5 51 1 10 1 40 -63 75 73 43 2 29) #91# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 28 12 19 2 29 1 0 73 29) #92=#A(t (30) (make::topological-sort list make::sorted-list make::znode #:g19451 :gray #:g19452 make::topological-sort-node si::structure-set make::*system-dependencies-delayed* make::component-type :system eq make::component-depends-on si::%dolist-var make::child make::topsort-color :white t "~&Detected cycle containing ~A" format #:g19453 :black #:g19454 #Y(make::dfs-visit nil nil (24 45 3 26 10 0 45 4 11 5 45 6 13 1 15 7 9 0 13 0 19 4 8 43 1 43 1 11 9 39 11 13 0 19 1 10 12 11 11 17 12 76 39 70 13 0 19 1 13 45 14 75 45 15 38 52 10 1 4 51 0 13 0 19 1 16 12 11 17 17 12 39 9 13 0 32 3 18 1 38 22 13 0 19 1 16 12 11 5 17 12 39 10 14 18 15 19 13 0 19 3 20 10 1 5 51 1 10 1 40 -54 43 2 10 0 45 21 11 22 45 23 13 1 15 7 9 0 13 0 19 4 8 43 1 43 1 13 0 10 2 3 51 2 73 29) #92# #1# 0) #:g19458 #:g19459 nreverse #Y(make::topological-sort nil nil (24 45 1 26 75 45 2 31 1 24 10 2 45 14 75 45 3 38 34 10 1 4 51 0 10 0 45 25 11 17 45 26 13 1 15 7 9 0 13 0 19 4 8 43 1 43 1 10 1 5 51 1 10 1 40 -36 43 2 10 2 45 14 75 45 3 38 29 10 1 4 51 0 13 0 19 1 16 12 11 17 17 12 39 7 13 0 32 2 18 1 10 1 5 51 1 10 1 40 -31 43 2 10 1 16 27 43 1 29) #92# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #93=#A(t (21) (make::split-string string (nil :test :item) #\  make::item char= make::test length make::result make::index make::len si::%dotimes-var make::i char = subseq 1+ < reverse #Y(make::split-string nil nil (24 45 1 28 2 22 40 3 15 3 46 4 22 40 4 33 5 12 46 6 10 2 16 7 12 9 0 77 46 8 46 9 46 10 10 0 45 11 8 0 45 12 38 54 13 5 13 7 10 0 17 13 12 13 6 20 2 23 39 32 13 3 13 0 19 2 14 76 39 16 13 7 13 3 13 0 19 3 15 12 10 4 3 51 4 10 0 16 16 51 3 10 0 16 16 51 0 13 0 13 1 19 2 17 40 -61 13 3 13 2 19 2 14 76 39 14 13 7 13 3 19 2 15 12 10 4 3 51 4 10 4 16 18 43 2 43 3 29) #93# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #94=#A(t (8) (make::prompt-string make::component "; ~:[~;TEST:~]~V,1@T " make::*oos-test* make::component-indent format #Y(make::prompt-string nil nil (24 45 1 26 77 15 2 14 3 13 0 19 1 4 12 19 4 5 29) #94# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 1 0 73 29) #95=#A(t (24) (make::format-justified-string make::prompt make::contents make::width *standard-output* stream length + make::prompt-length < "~%~A- ~A" format "~%~A-" make::cursor make::split-string make::content 1+ make::content-length #:g19482 " ~A" "~%~A  ~A" finish-output #Y(make::format-justified-string nil nil (24 45 1 24 45 2 25 40 3 9 80 46 3 25 40 3 14 4 46 5 26 9 2 10 3 16 6 12 19 2 7 45 8 13 0 10 3 16 6 12 19 2 7 12 13 2 19 2 9 39 14 13 1 15 10 13 4 13 3 19 4 11 38 122 13 1 15 12 13 4 19 3 11 10 0 45 13 13 4 19 1 14 45 2 10 0 4 45 15 10 0 16 6 16 16 45 17 38 80 13 3 13 0 19 2 7 12 13 6 19 2 9 39 27 10 0 45 18 13 4 13 0 19 2 7 51 4 43 1 13 5 15 19 13 1 19 3 11 38 21 13 4 13 0 19 2 7 51 3 13 5 15 20 13 8 13 1 19 4 11 10 2 5 51 2 10 2 4 51 1 10 1 16 6 16 16 51 0 10 2 76 39 -83 43 4 43 1 13 0 19 1 21 29) #95# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 23 12 19 2 24 1 0 73 29) #96=#A(t (25) (make::tell-user make::what make::component type make::no-dots make::force make::*oos-verbose* make::prompt-string "~A ~(~A~) ~@[\"~A\"~] ~:[~;...~]" compile :compile make::component-load-only "Loading" "Compiling" load :load "Loading" make::component-type make::component-full-pathname make::component-name make::*tell-user-when-done* format make::format-justified-string #Y(make::tell-user nil nil (24 45 1 24 45 2 25 40 2 77 46 3 25 40 2 77 46 4 25 40 2 77 46 5 26 11 6 40 3 10 0 73 39 93 13 3 19 1 7 12 77 15 8 10 4 41 9 4 42 10 18 13 3 19 1 11 39 6 1 12 73 38 4 1 13 73 38 15 41 14 4 42 15 6 1 16 73 38 4 10 4 73 12 13 3 19 1 17 12 10 2 39 8 13 3 13 2 19 2 18 73 40 6 13 3 19 1 19 12 11 20 73 39 5 10 1 76 73 12 19 6 21 12 19 2 22 29) #96# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #97=#A(t (14) (make::tell-user-done make::component make::force make::no-dots make::*tell-user-when-done* make::*oos-verbose* t "~&~A~:[~;...~] Done." make::prompt-string format *standard-output* finish-output #Y(make::tell-user-done nil nil (24 45 1 25 40 2 77 46 2 25 40 2 77 46 3 26 11 4 39 7 11 5 40 3 10 1 73 39 23 14 6 15 7 13 2 19 1 8 12 10 0 76 12 19 4 9 14 10 19 1 11 29) #97# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 14 19 9 2 19 4 20 1 0 73 29) #98=#A(t (21) (make::with-tell-user #:g19485 #:g19484 #:g19486 si::dm-too-few-arguments #:g19487 #:g19488 make::what make::component type make::no-dots make::force make::body si::dm-too-many-arguments progn make::tell-user make::tell-user-done append #Y(make::with-tell-user nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 76 39 6 13 5 19 1 4 10 1 4 12 10 1 5 51 1 22 45 8 10 2 39 13 10 2 4 12 10 2 5 51 2 22 38 2 75 45 9 10 3 39 13 10 3 4 12 10 3 5 51 3 22 38 2 75 45 10 10 4 39 13 10 4 4 12 10 4 5 51 4 22 38 2 75 45 11 10 7 45 12 10 6 39 6 13 10 19 1 13 15 14 15 15 13 5 13 4 13 3 13 2 10 1 6 6 12 13 0 15 16 13 4 13 1 10 2 6 4 6 1 12 19 2 17 7 3 73 29) #98# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #99=#A(t (15) (make::tell-user-no-files make::component make::force make::*oos-verbose* make::prompt-string "Source file ~A ~
             ~:[and binary file ~A ~;~]not found, not loading." :source make::component-full-pathname make::*load-source-if-no-binary* make::*load-source-instead-of-binary* :binary format make::format-justified-string #Y(make::tell-user-no-files nil nil (24 45 1 25 40 2 77 46 2 26 11 3 40 3 10 0 73 39 42 13 1 19 1 4 12 77 15 5 13 1 14 6 19 2 7 12 11 8 73 40 4 11 9 73 12 13 1 14 10 19 2 7 12 19 5 11 12 19 2 12 29) #99# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #100=#A(t (13) (make::tell-user-require-system make::name make::parent make::*oos-verbose* t "~&; ~:[~;TEST:~] - System ~A requires ~S" make::*oos-test* make::component-name format *standard-output* finish-output #Y(make::tell-user-require-system nil nil (24 45 1 24 45 2 26 11 3 73 39 23 14 4 15 5 14 6 13 0 19 1 7 12 13 1 19 5 8 14 9 19 1 10 29) #100# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #101=#A(t (11) (make::tell-user-generic string make::*oos-verbose* t "~&; ~:[~;TEST:~] - ~A" make::*oos-test* format *standard-output* finish-output #Y(make::tell-user-generic nil nil (24 45 1 26 11 2 73 39 17 14 3 15 4 14 5 13 0 19 4 6 14 7 19 1 8 29) #101# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 11 2 52 0 1 0 73 29) #A(t (3) (make::*use-timeouts* si::*make-special t)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 11 2 52 0 1 0 73 29) #A(t (3) (make::*clear-input-before-query* si::*make-special t)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*sleep-amount* si::*make-special 0.1)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 2 12 19 2 3 1 0 73 29) #102=#A(t (4) (make::internal-real-time-in-seconds get-universal-time #Y(make::internal-real-time-in-seconds nil nil (26 19 0 1 29) #102# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 1 0 73 29) #103=#A(t (18) (make::read-char-wait make::timeout make::input-stream t make::eof-error-p make::eof-value make::peek make::internal-real-time-in-seconds make::start make::*sleep-amount* zerop sleep listen + < read-char #Y(make::read-char-wait nil nil (25 40 3 9 20 46 1 25 40 2 77 46 2 25 40 3 14 3 46 4 25 40 2 77 46 5 26 75 45 6 19 0 7 45 8 38 12 11 9 16 10 76 39 5 11 9 16 11 13 4 19 1 12 51 1 40 16 13 0 13 5 19 2 13 12 19 0 7 12 19 2 14 39 -36 10 1 73 39 10 13 4 13 3 13 2 19 3 15 43 1 29) #103# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 1 0 73 29) #104=#A(t (29) (make::y-or-n-p-wait #\y make::default make::timeout make::format-string make::args make::*clear-input-before-query* *query-io* clear-input fresh-line format apply finish-output 0 make::*use-timeouts* make::read-char-wait read-char char (#\Tab #\Newline #\Return) find "~@[~A~]" t (#\y #\Y #\ ) :test char= (#\n #\N) "~&Type \"y\" for yes or \"n\" for no. " #Y(make::y-or-n-p-wait nil nil (25 40 3 15 1 46 2 25 40 3 9 20 46 3 25 40 2 77 46 4 27 45 5 11 6 39 6 14 7 19 1 8 10 1 39 23 14 7 19 1 9 33 10 12 14 7 13 1 13 0 19 4 11 14 7 19 1 12 58 60 168 57 13 61 1 1 11 14 39 12 13 4 14 7 77 77 19 4 15 38 6 14 7 19 1 16 45 16 10 0 40 3 10 6 45 17 13 0 15 18 19 2 19 76 39 115 10 1 76 39 15 14 7 15 20 13 7 19 3 10 14 7 19 1 12 10 0 76 39 8 11 21 73 36 3 38 84 13 0 15 22 14 23 33 24 12 19 4 19 39 8 11 21 73 36 3 38 63 13 0 15 25 14 23 33 24 12 19 4 19 39 7 75 73 36 3 38 43 11 6 39 6 14 7 19 1 8 14 7 15 26 19 2 10 10 5 39 18 14 7 19 1 9 33 10 12 14 7 13 5 13 4 19 4 11 14 7 19 1 12 43 2 35 0 0 62 73 63 29) #104# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::%%component%% si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ((make::%%component%%) export)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 14 14 9 2 19 4 15 1 0 73 29) #105=#A(t (16) (make::with-special-component-vars #:g19492 #:g19491 #:g19493 si::dm-too-few-arguments #:g19494 #:g19495 make::c make::forms si::dm-too-many-arguments let make::%%component%% (declare (special make::%%component%%)) #Y(make::with-special-component-vars nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 3 45 8 10 2 39 6 13 6 19 1 9 15 10 15 11 10 1 6 2 6 1 12 15 12 10 0 7 4 73 29) #105# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 47 12 19 2 48 1 0 73 29) #106=#A(t (49) (make::operate-on-system make::name make::operation (nil :override-compilation-unit :minimal-load :dribble :compile-during-load :bother-user-if-no-binary :load-source-if-no-binary :load-source-instead-of-binary :verbose :test :version :force) make::force make::*version* make::version make::*oos-test* make::test make::*oos-verbose* make::verbose make::*load-source-instead-of-binary* make::load-source-instead-of-binary make::*load-source-if-no-binary* make::load-source-if-no-binary make::*bother-user-if-no-binary* make::bother-user-if-no-binary make::*compile-during-load* make::compile-during-load dribble make::*minimal-load* make::minimal-load t make::override-compilation-unit make::*reset-full-pathname-table* make::clear-full-pathname-tables load :load :all compile :compile :new-source-and-dependents make::translate-version make::*version-replace* make::*version-dir* make::component-p make::component-type (:system :defsystem :subsystem) member make::find-system make::system *compile-verbose* *load-verbose* make::component-operation "Operation ~A undefined." error make::operate-on-component #Y(make::operate-on-system nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 22 40 3 14 5 46 6 22 40 3 14 7 46 8 22 40 3 14 9 46 10 22 40 3 14 11 46 12 22 40 3 14 13 46 14 22 40 3 14 15 46 16 22 40 3 14 17 46 18 22 40 2 77 46 19 22 40 3 14 20 46 21 22 40 3 14 22 46 23 64 176 11 24 39 4 19 0 25 10 2 39 6 13 2 19 1 19 10 8 39 5 11 22 51 7 10 10 76 39 31 10 11 41 26 4 42 27 7 11 28 51 10 38 17 41 29 4 42 30 7 11 31 51 10 38 5 11 28 51 10 13 9 19 1 32 50 1 33 48 34 14 22 14 22 13 9 13 7 13 8 13 5 13 3 13 4 13 6 13 1 13 12 19 1 35 39 12 13 12 19 1 36 12 15 37 19 2 38 39 6 10 12 73 38 8 13 12 14 27 19 2 39 12 46 40 49 20 49 11 49 15 49 17 49 13 49 7 49 9 49 5 49 41 49 42 13 12 19 1 43 76 39 8 15 44 13 12 19 2 45 13 0 13 12 13 11 19 3 46 43 1 44 10 44 2 65 10 2 39 4 19 0 19 66 29) #106# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 33 12 19 2 34 1 0 73 29) #107=#A(t (35) (make::compile-system make::name (nil :minimal-load :dribble :compile-during-load :bother-user-if-no-binary :load-source-if-no-binary :load-source-instead-of-binary :verbose :test :version :force) make::force make::*version* make::version make::*oos-test* make::test make::*oos-verbose* make::verbose make::*load-source-instead-of-binary* make::load-source-instead-of-binary make::*load-source-if-no-binary* make::load-source-if-no-binary make::*bother-user-if-no-binary* make::bother-user-if-no-binary make::*compile-during-load* make::compile-during-load dribble make::*minimal-load* make::minimal-load :compile :force :version :test :verbose :load-source-instead-of-binary :load-source-if-no-binary :bother-user-if-no-binary :compile-during-load :dribble :minimal-load make::operate-on-system #Y(make::compile-system nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 3 14 4 46 5 22 40 3 14 6 46 7 22 40 3 14 8 46 9 22 40 3 14 10 46 11 22 40 3 14 12 46 13 22 40 3 14 14 46 15 22 40 3 14 16 46 17 22 40 2 77 46 18 22 40 3 14 19 46 20 13 10 14 21 14 22 13 9 14 23 13 8 14 24 13 7 14 25 13 6 14 26 13 5 14 27 13 4 14 28 13 3 14 29 13 2 14 30 13 1 14 31 13 0 19 22 32 29) #107# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 33 12 19 2 34 1 0 73 29) #108=#A(t (35) (make::load-system make::name (nil :minimal-load :dribble :compile-during-load :bother-user-if-no-binary :load-source-if-no-binary :load-source-instead-of-binary :verbose :test :version :force) make::force make::*version* make::version make::*oos-test* make::test make::*oos-verbose* make::verbose make::*load-source-instead-of-binary* make::load-source-instead-of-binary make::*load-source-if-no-binary* make::load-source-if-no-binary make::*bother-user-if-no-binary* make::bother-user-if-no-binary make::*compile-during-load* make::compile-during-load dribble make::*minimal-load* make::minimal-load :load :force :version :test :verbose :load-source-instead-of-binary :load-source-if-no-binary :bother-user-if-no-binary :compile-during-load :dribble :minimal-load make::operate-on-system #Y(make::load-system nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 3 14 4 46 5 22 40 3 14 6 46 7 22 40 3 14 8 46 9 22 40 3 14 10 46 11 22 40 3 14 12 46 13 22 40 3 14 14 46 15 22 40 3 14 16 46 17 22 40 2 77 46 18 22 40 3 14 19 46 20 13 10 14 21 14 22 13 9 14 23 13 8 14 24 13 7 14 25 13 6 14 26 13 5 14 27 13 4 14 28 13 3 14 29 13 2 14 30 13 1 14 31 13 0 19 22 32 29) #108# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #109=#A(t (21) (make::clean-system make::name (nil :dribble :verbose :test :version :force) :all make::force make::*version* make::version make::*oos-test* make::test make::*oos-verbose* make::verbose dribble :delete-binaries :force :version :test :verbose :dribble make::operate-on-system #Y(make::clean-system nil nil (24 45 1 28 2 22 40 3 14 3 46 4 22 40 3 14 5 46 6 22 40 3 14 7 46 8 22 40 3 14 9 46 10 22 40 2 77 46 11 13 5 14 12 14 13 13 4 14 14 13 3 14 15 13 2 14 16 13 1 14 17 13 0 19 12 18 29) #109# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #110=#A(t (20) (make::edit-system make::name (nil :dribble :verbose :test :version :force) make::force make::*version* make::version make::*oos-test* make::test make::*oos-verbose* make::verbose dribble :edit :force :version :test :verbose :dribble make::operate-on-system #Y(make::edit-system nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 3 14 4 46 5 22 40 3 14 6 46 7 22 40 3 14 8 46 9 22 40 2 77 46 10 13 5 14 11 14 12 13 4 14 13 13 3 14 14 13 2 14 15 13 1 14 16 13 0 19 12 17 29) #110# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #111=#A(t (20) (make::hardcopy-system make::name (nil :dribble :verbose :test :version :force) make::force make::*version* make::version make::*oos-test* make::test make::*oos-verbose* make::verbose dribble :hardcopy :force :version :test :verbose :dribble make::operate-on-system #Y(make::hardcopy-system nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 3 14 4 46 5 22 40 3 14 6 46 7 22 40 3 14 8 46 9 22 40 2 77 46 10 13 5 14 11 14 12 13 4 14 13 13 3 14 14 13 2 14 15 13 1 14 16 13 0 19 12 17 29) #111# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #112=#A(t (21) (make::ensure-external-system-def-loaded make::component (member (make::component-type make::component) '#113=(:subsystem :system)) si::assert-failure make::component-type #113# member make::component-components make::component-name make::cname make::undefsystem t make::*reload-systems-from-disk* :load make::find-system make::system-component #:g19498 #:g19499 si::structure-set #Y(make::ensure-external-system-def-loaded nil nil (24 45 1 26 38 6 15 2 19 1 3 13 0 19 1 4 12 15 5 19 2 6 76 40 -18 13 0 19 1 7 76 73 39 61 13 0 19 1 8 45 9 13 0 19 1 10 11 11 48 12 13 1 19 1 8 12 14 13 19 2 14 45 15 10 2 45 16 10 1 6 1 45 17 13 1 15 1 9 17 13 0 19 4 18 43 1 43 1 43 1 44 1 43 1 29) #112# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 51 12 19 2 52 1 0 73 29) #114=#A(t (53) (make::operate-on-component make::component make::operation make::force make::changed make::component-type *package* package-name make::old-package type make::component-package "Using package ~A" format make::tell-user-generic make::*oos-test* find-package string make::component-name string-equal t "~%Component ~A not loaded:~%" "  Package ~A is not defined" error make::new-require package :system eq :subsystem make::ensure-external-system-def-loaded :defsystem make::operate-on-system-dependencies make::component-proclamations "Doing proclamations for ~A" proclaim make::component-initially-do "Doing initializations for ~A" make::%%component%% make::initially-do functionp eval :file :private-file make::component-operation :module make::operate-on-components make::component-finally-do "Doing finalizations for ~A" make::finally-do "Providing system ~A~%" make::canonicalize-system-name provide #Y(make::operate-on-component nil nil (24 45 1 24 45 2 24 45 3 26 75 45 4 13 3 19 1 5 12 11 6 16 7 12 46 8 46 9 64 365 13 5 19 1 10 39 103 77 15 11 13 5 19 1 10 12 19 3 12 12 19 1 13 11 14 76 39 82 13 5 19 1 10 16 15 76 39 53 13 5 19 1 10 16 16 12 13 5 19 1 17 12 19 2 18 39 25 14 19 15 20 13 5 19 1 17 12 19 3 12 15 21 13 5 19 1 10 12 19 2 22 13 5 19 1 10 12 19 1 23 13 5 19 1 10 16 15 45 24 10 0 39 5 10 0 52 6 43 1 13 0 11 25 17 26 40 7 13 0 11 27 17 26 39 6 13 5 19 1 28 13 0 11 29 17 26 40 7 13 0 11 25 17 26 39 10 13 5 13 4 13 3 19 3 30 13 5 19 1 31 39 31 77 15 32 13 5 19 1 17 12 19 3 12 12 19 1 13 11 14 76 39 10 13 5 19 1 31 12 19 1 33 13 5 19 1 34 39 54 77 15 35 13 5 19 1 17 12 19 3 12 12 19 1 13 11 14 76 39 33 10 5 48 36 13 5 19 1 34 45 37 10 0 16 38 39 8 13 0 20 0 23 38 5 10 0 16 39 43 1 44 1 10 0 41 40 4 42 41 16 13 4 19 1 42 12 13 5 13 3 20 2 23 38 27 41 43 10 41 25 7 41 27 4 42 29 14 13 5 13 4 13 3 13 2 19 4 44 38 2 75 51 2 13 5 19 1 45 39 54 77 15 46 13 5 19 1 17 12 19 3 12 12 19 1 13 11 14 76 39 33 10 5 48 36 13 5 19 1 45 45 47 10 0 16 38 39 8 13 0 20 0 23 38 5 10 0 16 39 43 1 44 1 65 10 1 16 15 52 6 66 13 0 11 29 17 26 40 15 13 0 11 25 17 26 40 7 13 0 11 27 17 26 39 34 77 15 48 13 5 19 1 17 12 19 3 12 12 19 1 13 11 14 40 14 13 5 19 1 17 12 19 1 49 12 19 1 50 43 2 10 0 73 29) #114# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*force* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (make::*providing-blocks-load-propagation* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 41 12 19 2 42 1 0 73 29) #115=#A(t (43) (make::operate-on-system-dependencies make::component make::operation make::force make::*system-dependencies-delayed* make::*force* make::component-depends-on si::%dolist-var make::system make::*operations-propagate-to-subsystems* listp stringp symbolp :load-or-nil make::find-system make::*providing-blocks-load-propagation* (load :load) find make::canonicalize-system-name *modules* :test string-equal :force make::operate-on-system #:g19510 #:g19511 si::dm-too-few-arguments make::system-name make::definition-pathname make::action make::version si::dm-too-many-arguments make::tell-user-require-system make::*oos-test* eval make::*version* make::new-require make::component-p make::component-type (:defsystem :subsystem :system) member #Y(make::operate-on-system-dependencies nil nil (24 45 1 24 45 2 25 40 2 77 46 3 26 11 4 73 39 313 10 0 48 5 13 2 19 1 6 45 7 75 45 8 38 287 10 1 4 51 0 11 9 39 27 10 0 16 10 76 39 20 10 0 16 11 40 5 10 0 16 12 39 8 13 0 14 13 19 2 14 39 46 11 15 39 26 13 3 15 16 19 2 17 39 17 13 0 19 1 18 12 14 19 14 20 33 21 12 19 4 17 76 39 12 13 0 13 3 14 22 13 2 19 4 23 38 200 10 0 16 10 39 157 10 0 45 24 10 0 45 25 10 0 76 39 6 13 1 19 1 26 10 0 4 12 10 0 5 51 0 22 45 27 10 1 76 39 6 13 2 19 1 26 10 1 4 12 10 1 5 51 1 22 45 28 10 2 76 39 6 13 3 19 1 26 10 2 4 12 10 2 5 51 2 22 45 29 10 3 39 13 10 3 4 12 10 3 5 51 3 22 38 2 75 45 30 10 4 39 6 13 5 19 1 31 10 3 76 39 4 10 2 76 39 6 10 1 73 38 4 10 6 73 12 13 10 19 2 32 11 33 40 23 13 3 77 10 2 16 34 12 13 1 10 0 73 40 4 11 35 73 12 19 5 36 43 6 38 38 13 0 19 1 37 39 13 13 0 19 1 38 12 15 39 19 2 40 76 40 17 13 0 13 4 19 2 32 11 33 40 6 13 0 19 1 36 10 1 5 51 1 10 1 40 -289 75 73 43 2 44 1 29) #115# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #116=#A(t (10) (make::module-depends-on-changed make::module make::changed make::component-depends-on si::%dolist-var make::dependent member t #Y(make::module-depends-on-changed nil nil (24 45 1 24 45 2 26 58 60 46 13 2 19 1 3 45 4 75 45 5 38 25 10 1 4 51 0 13 0 13 3 19 2 6 39 6 11 7 73 36 2 10 1 5 51 1 10 1 40 -27 75 73 43 2 63 29) #116# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 34 12 19 2 35 1 0 73 29) #117=#A(t (36) (make::operate-on-components make::component make::operation make::force make::changed make::tell-user make::component-components si::%dolist-var make::module make::module-depends-on-changed make::non-empty-listp :new-source-and-dependents eq :new-source-all :all make::component-name :test string-equal :key string member make::operate-on-component compile :compile make::%%component%% make::component-compile-form make::compile-form functionp eval load :load make::component-load-form make::load-form make::tell-user-done #Y(make::operate-on-components nil nil (24 45 1 24 45 2 24 45 3 24 45 4 26 13 2 13 3 77 77 77 19 5 5 13 3 19 1 6 39 128 13 3 19 1 6 45 7 75 45 8 38 108 10 1 4 51 0 13 0 13 4 13 0 13 2 19 2 9 39 14 13 3 19 1 10 40 7 13 3 11 11 17 12 39 19 13 3 11 11 17 12 39 6 11 13 73 38 4 11 14 73 38 39 13 3 19 1 10 39 22 13 0 19 1 15 12 13 3 14 16 33 17 12 14 18 33 19 12 19 6 20 39 6 11 14 73 38 4 10 3 73 12 19 3 21 39 8 13 0 10 2 3 51 2 10 1 5 51 1 10 1 40 -110 43 2 38 81 10 2 41 22 4 42 23 35 10 3 48 24 13 3 19 1 25 45 26 10 0 16 27 39 8 13 0 20 0 23 38 5 10 0 16 28 43 1 44 1 38 39 41 29 4 42 30 33 10 3 48 24 13 3 19 1 31 45 32 10 0 16 27 39 8 13 0 20 0 23 38 5 10 0 16 28 43 1 44 1 13 3 77 77 19 3 33 10 0 73 29) #117# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (make::*old-require* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 48 12 19 2 49 1 0 73 29) #118=#A(t (50) (make::new-require make::module-name pathname make::definition-pname make::default-action make::*version* make::version string *modules* :test string= find #:g19520 #:g19521 0 make::missing-module si::temp #Y(nil nil nil (24 45 16 26 10 0 51 2 35 1 0 29) #118# #1# 0) error #Y(nil nil nil (24 45 16 26 10 0 51 2 35 1 1 29) #118# #1# 0) si::*handler-clusters* make::*old-require* :load-or-nil make::find-system :load :force make::*force* :version make::*oos-test* :verbose make::*oos-verbose* :load-source-if-no-binary make::*load-source-if-no-binary* :bother-user-if-no-binary make::*bother-user-if-no-binary* :compile-during-load make::*compile-during-load* :load-source-instead-of-binary make::*load-source-instead-of-binary* :minimal-load make::*minimal-load* make::operate-on-system eval make::missing-system :name make::mmc signal make::e #Y(make::new-require nil nil (24 45 1 25 40 2 77 46 2 25 40 2 77 46 3 25 40 2 77 46 4 25 40 3 14 5 46 6 26 10 4 39 16 10 4 16 7 12 14 8 14 9 33 10 12 19 4 11 76 73 39 173 57 12 60 169 75 45 13 57 14 61 2 126 138 15 15 34 17 3 12 15 18 34 19 3 6 2 12 11 20 3 48 20 10 6 39 12 14 21 13 7 13 6 20 2 23 38 87 13 7 14 22 13 5 19 3 23 39 46 13 7 14 24 14 25 14 26 14 27 13 3 14 9 14 28 14 29 14 30 14 31 14 32 14 33 14 34 14 35 14 36 14 37 14 38 14 39 14 40 19 20 41 38 31 10 4 39 5 10 4 16 42 73 40 20 14 21 13 7 20 1 23 73 40 10 15 43 14 44 13 7 19 3 18 36 2 44 1 10 1 45 45 13 0 19 1 46 43 1 36 2 10 1 45 47 15 43 14 44 13 8 19 3 18 43 1 36 2 62 73 43 1 63 29) #118# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (11 0 76 73 39 34 1 1 16 2 52 0 11 3 76 73 39 22 15 4 75 17 5 15 1 1 6 16 2 12 19 2 7 15 8 11 9 17 5 29) #A(t (10) (make::*old-require* require symbol-function make::*dont-redefine-require* "CL" ext::package-lock make::new-require si::fset "CL" t)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 15 0 14 13 19 2 14 52 13 73 29) #119=#A(t (15) (make::cmucl-mk-defsystem-module-provider make::name string string-downcase make::module-name :load-or-nil make::find-system :compile-during-load t :verbose make::load-system #Y(make::cmucl-mk-defsystem-module-provider nil nil (24 45 1 26 10 0 16 2 12 19 1 3 45 4 13 0 14 5 19 2 6 73 39 13 13 0 14 7 14 8 14 9 77 19 5 10 43 1 29) #119# #1# 0) si::fset ext::*module-provider-functions* adjoin)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 11 14 3 33 4 12 19 2 5 52 0 1 0 73 29) #A(t (6) (make::*language-table* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #120=#A(t (6) (make::find-language make::name make::*language-table* gethash #Y(make::find-language nil nil (24 45 1 26 13 0 14 2 19 2 3 29) #120# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 15 5 77 15 6 9 5 77 77 15 7 19 15 8 15 0 19 1 20 78 16 15 9 1 18 12 19 2 19 1 0 73 29) #121=#A(t (21) (make::language "LANGUAGE-" (make::name make::compiler make::loader make::source-extension make::binary-extension) ((make::name nil t nil 0 nil) (make::compiler nil t nil 1 nil) (make::loader nil t nil 2 nil) (make::source-extension nil t nil 3 nil) (make::binary-extension nil t nil 4 nil)) make::copy-language make::print-language (make::make-language) make::language-p si::define-structure make::make-language (nil :binary-extension :source-extension :loader :compiler :name) #:name #:compiler #:loader #:source-extension #:binary-extension 0 si::make-structure #Y(make::make-language nil nil (28 10 22 40 2 77 46 11 22 40 2 77 46 12 22 40 2 77 46 13 22 40 2 77 46 14 22 40 2 77 46 15 15 16 13 4 13 3 13 2 13 1 13 0 19 6 17 29) #121# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #122=#A(t (11) (make::print-language make::language stream make::depth "#<~:@(~A~): ~A ~A>" make::language-name make::language-source-extension make::language-binary-extension format #Y(make::print-language nil nil (24 45 1 24 45 2 24 45 3 26 13 1 15 4 13 2 19 1 5 12 13 2 19 1 6 12 13 2 19 1 7 12 19 5 8 29) #122# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #123=#A(t (11) (make::compile-function make::component make::component-compiler make::component-language :lisp make::find-language make::language make::language-compiler compile-file #Y(make::compile-function nil nil (24 45 1 26 13 0 19 1 2 73 40 35 13 0 19 1 3 73 40 4 11 4 73 12 19 1 5 45 6 10 0 39 6 13 0 19 1 7 43 1 73 40 4 33 8 73 29) #123# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #124=#A(t (11) (make::load-function make::component make::component-loader make::component-language :lisp make::find-language make::language make::language-loader load #Y(make::load-function nil nil (24 45 1 26 13 0 19 1 2 73 40 35 13 0 19 1 3 73 40 4 11 4 73 12 19 1 5 45 6 10 0 39 6 13 0 19 1 7 43 1 73 40 4 33 8 73 29) #124# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #125=#A(t (10) (make::default-source-extension make::component make::component-language :lisp make::find-language make::language make::language-source-extension make::*filename-extensions* #Y(make::default-source-extension nil nil (24 45 1 26 13 0 19 1 2 73 40 4 11 3 73 12 19 1 4 45 5 10 0 39 6 13 0 19 1 6 73 40 5 11 7 4 73 43 1 29) #125# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #126=#A(t (10) (make::default-binary-extension make::component make::component-language :lisp make::find-language make::language make::language-binary-extension make::*filename-extensions* #Y(make::default-binary-extension nil nil (24 45 1 26 13 0 19 1 2 73 40 4 11 3 73 12 19 1 4 45 5 10 0 39 6 13 0 19 1 6 73 40 5 11 7 5 73 43 1 29) #126# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 32 12 14 33 9 2 19 4 34 1 0 73 29) #127=#A(t (35) (make::define-language #:g19529 #:g19528 #:g19530 si::dm-too-few-arguments make::name :compiler si::search-keyword #:g19531 si::missing-keyword eq make::compiler :loader #:g19532 make::loader :source-extension #:g19533 make::source-extension :binary-extension #:g19534 make::binary-extension (:binary-extension :source-extension :loader :compiler) si::check-keyword "LANGUAGE" gensym make::language let make::make-language :name setf gethash make::*language-table* #Y(make::define-language nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 13 1 15 6 19 2 7 45 8 13 0 1 9 17 10 39 4 75 38 3 10 0 45 11 13 3 15 12 19 2 7 45 13 13 0 1 9 17 10 39 4 75 38 3 10 0 45 14 13 5 15 15 19 2 7 45 16 13 0 1 9 17 10 39 4 75 38 3 10 0 45 17 13 7 15 18 19 2 7 45 19 13 0 1 9 17 10 39 4 75 38 3 10 0 45 20 13 9 15 21 19 2 22 15 23 19 1 24 45 25 15 26 13 0 15 27 14 28 13 9 14 6 13 7 14 12 13 5 14 15 13 3 14 18 10 1 6 11 6 2 6 1 12 15 29 15 30 13 9 1 31 6 3 12 10 0 6 3 12 10 9 6 4 73 43 1 29) #127# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (14 0 14 1 14 2 33 3 12 14 4 33 5 12 14 6 11 7 4 12 14 8 11 7 5 12 19 10 9 45 10 14 1 14 11 13 0 19 3 12 11 1 73 43 1 29) #A(t (13) (:name :lisp :compiler compile-file :loader load :source-extension make::*filename-extensions* :binary-extension make::make-language #:language19535 make::*language-table* si::hash-set)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #128=#A(t (14) (make::scheme-compile-file make::filename make::args #:scheme find-package make::scheme-package compile-file symbol-name find-symbol symbol-function #:interaction-environment apply #Y(make::scheme-compile-file nil nil (24 45 1 27 45 2 1 3 16 4 45 5 1 6 16 7 12 13 0 19 2 8 16 9 12 13 2 1 10 16 7 12 13 0 19 2 8 16 9 12 20 0 23 12 13 1 19 4 11 43 1 29) #128# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (14 0 14 1 14 2 33 3 12 14 4 33 5 12 14 6 15 7 14 8 15 9 19 10 10 45 11 14 1 14 12 13 0 19 3 13 11 1 73 43 1 29) #A(t (14) (:name :scheme :compiler make::scheme-compile-file :loader load :source-extension "scm" :binary-extension "bin" make::make-language #:language19538 make::*language-table* si::hash-set)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*c-compiler* si::*make-special "gcc")) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #129=#A(t (8) (make::run-unix-program make::program make::arguments "~A~@[ ~{~A~^ ~}~]" format make::system #Y(make::run-unix-program nil nil (24 45 1 24 45 2 26 77 15 3 13 1 13 0 19 4 4 12 19 1 5 29) #129# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (make::*default-shell* si::*make-special boundp "/bin/sh")) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #130=#A(t (15) (make::run-shell-command make::command-control-string make::arguments (nil :shell :output) *trace-output* make::output make::*default-shell* make::shell format apply make::command "RUN-SHELL-PROGRAM not implemented for this Lisp" error #Y(make::run-shell-command nil nil (24 45 1 24 45 2 28 3 22 40 3 14 4 46 5 22 40 3 14 6 46 7 33 8 12 77 13 3 13 2 19 4 9 45 10 15 11 19 1 12 43 1 29) #130# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #131=#A(t (13) (make::default-output-pathname make::path1 make::path2 type t eq :type make-pathname pathname merge-pathnames translate-logical-pathname #Y(make::default-output-pathname nil nil (24 45 1 24 45 2 24 45 3 26 13 2 11 4 17 5 39 23 14 6 13 0 19 2 7 12 10 1 16 8 12 19 2 9 12 19 1 10 38 9 10 2 16 8 12 19 1 10 29) #131# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #132=#A(t (27) (make::run-compiler make::program make::arguments make::output-file make::error-file make::error-output make::verbose make::streams make-broadcast-stream delete apply #Y(make::make-useable-stream nil nil (27 45 7 33 8 12 77 13 0 19 2 9 12 19 2 10 29) #132# #1# 0) file-write-date make::output-file-written make::fatal-error make::old-timestamp make::verbose-stream *trace-output* "Running ~A~@[ ~{~A~^ ~}~]~%" format make::run-unix-program probe-file eql "~A written~%" "Running of ~A finished~%" #Y(make::run-compiler nil nil (24 45 1 24 45 2 24 45 3 24 45 4 24 45 5 24 45 6 26 30 1 11 77 10 4 16 12 12 77 77 46 13 46 14 46 15 46 16 64 94 10 5 73 39 4 11 17 73 12 32 4 18 1 51 0 13 0 15 18 13 10 13 9 19 4 19 13 10 13 9 19 2 20 39 2 75 51 2 10 8 16 21 39 10 13 1 10 8 16 12 17 22 76 51 3 10 3 39 10 13 0 15 23 13 8 19 3 19 13 0 15 24 13 10 19 3 19 10 3 73 39 4 10 8 73 12 13 2 13 2 72 3 65 10 3 39 3 10 8 10 2 10 2 66 43 4 43 1 29) #132# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 54 12 19 2 55 1 0 73 29) #133=#A(t (56) (make::c-compile-file make::filename make::args (nil :error :libraries :library-paths :include-paths :definitions :cflags :optimize :link :debug :verbose :error-output :error-file :output-file) t make::output-file make::error-file make::error-output *compile-verbose* make::verbose debug make::link optimize make::cflags make::definitions make::include-paths make::library-paths make::libraries error make::flag make::options identity make::func make::option "~A~A" format #Y(nil nil nil (24 45 23 26 77 15 24 13 3 13 1 13 0 20 1 23 12 19 4 25 29) #133# #1# 0) mapcar #Y(make::map-options nil nil (24 45 19 24 45 20 25 40 4 33 21 12 46 22 26 34 26 12 13 1 19 2 27 29) #133# #1# 0) "o" make::default-output-pathname ("-c") ("-g") "-O~D" "-D" make::definition atom "~A=~A" apply #Y(nil nil nil (24 45 35 26 10 0 16 36 39 6 10 0 73 38 12 33 25 12 77 15 37 13 0 19 4 38 29) #133# #1# 0) "-I" truename namestring "-o" translate-logical-pathname "-L" "-l" append make::arguments make::*c-compiler* make::run-compiler make::fatal-errors make::warnings "Compilation failed" #Y(make::c-compile-file nil nil (24 45 1 27 45 2 28 3 22 40 3 14 4 46 5 22 40 3 14 4 46 6 22 40 3 14 4 46 7 22 40 3 14 8 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 22 40 2 77 46 13 22 40 2 77 46 14 22 40 2 77 46 15 22 40 2 77 46 16 22 40 2 77 46 17 22 40 3 14 4 46 18 30 1 28 13 13 13 15 15 29 19 3 30 45 5 10 9 76 73 39 4 1 31 73 12 10 10 73 39 4 1 32 73 12 10 8 73 39 12 77 15 33 13 8 19 3 25 6 1 73 12 13 7 15 34 13 6 34 39 12 32 1 18 3 12 15 40 13 5 33 41 12 32 1 18 3 12 10 16 16 41 16 42 12 15 43 13 0 19 1 44 16 42 12 15 45 13 4 33 41 12 32 1 18 3 12 15 46 13 3 32 1 18 2 12 19 2 47 7 4 12 19 7 47 45 48 14 49 13 0 13 1 13 14 13 13 13 12 19 6 50 47 2 51 47 1 52 45 5 10 6 39 8 10 0 76 40 3 10 2 39 8 15 53 19 1 18 38 9 13 0 13 1 13 2 72 3 43 3 43 2 43 1 29) #133# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (14 0 14 1 14 2 33 3 12 14 4 33 5 12 14 6 15 7 14 8 15 9 19 10 10 45 11 14 1 14 12 13 0 19 3 13 11 1 73 43 1 29) #A(t (14) (:name :c :compiler make::c-compile-file :loader load :source-extension "c" :binary-extension "o" make::make-language #:language19547 make::*language-table* si::hash-set)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ((make::*fortran-compiler* make::*fortran-options*) export)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*fortran-compiler* si::*make-special "g77")) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*fortran-options* si::*make-special ("-O"))) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #134=#A(t (15) (make::fortran-compile-file make::filename make::args (t :error-file :output-file) make::output-file make::error-file make::*fortran-options* "-c" "-o" append make::arg-list make::*fortran-compiler* make::run-unix-program #Y(make::fortran-compile-file nil nil (24 45 1 27 45 2 28 3 22 40 2 77 46 4 22 40 2 77 46 5 14 6 15 7 13 3 10 1 39 7 15 8 10 1 6 2 7 3 12 19 2 9 45 10 14 11 13 0 19 2 12 43 1 29) #134# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (14 0 14 1 14 2 33 3 12 14 4 33 5 12 14 6 15 7 14 8 15 9 19 10 10 45 11 14 1 14 12 13 0 19 3 13 11 1 73 43 1 29) #A(t (14) (:name :fortran :compiler make::fortran-compile-file :loader identity :source-extension "f" :binary-extension "o" make::make-language #:language19550 make::*language-table* si::hash-set)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ((make::*ar-program* make::build-lib) export)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*ar-program* si::*make-special "ar")) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #135=#A(t (15) (make::build-lib make::libname directory "rv" truename make::args t ";;; Building archive ~A~%" format make::*ar-program* mapcar append make::run-unix-program #Y(make::build-lib nil nil (24 45 1 24 45 2 26 15 3 10 1 16 4 6 2 45 5 14 6 15 7 13 2 19 3 8 14 9 13 0 33 4 12 13 1 19 1 2 12 19 2 10 12 19 2 11 12 19 2 12 43 1 29) #135# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (14 0 15 1 19 2 2 15 3 15 1 19 2 2 14 4 15 5 19 2 2 15 6 15 5 19 2 2 29) #A(t (7) (:compile make::compile-and-load-operation make::component-operation compile :load make::load-file-operation load)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #136=#A(t (9) (make::compile-and-load-operation make::component make::force make::compile-file-operation make::changed make::component-compile-only make::load-file-operation #Y(make::compile-and-load-operation nil nil (24 45 1 24 45 2 26 13 1 13 0 19 2 3 45 4 10 0 39 6 13 2 19 1 5 39 6 10 0 73 38 14 13 2 13 1 19 2 6 73 39 4 10 0 73 43 1 29) #136# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #137=#A(t (11) (make::unmunge-lucid namestring make::null-string char #\/ char= string "./" concatenate #Y(make::unmunge-lucid nil nil (24 45 1 26 13 0 19 1 2 39 6 10 0 73 38 29 13 0 8 0 17 3 12 15 4 19 2 5 39 6 10 0 73 38 10 15 6 15 7 13 0 19 3 8 29) #137# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 34 12 19 2 35 1 0 73 29) #138=#A(t (36) (make::compile-file-operation make::component make::force make::component-load-only (:all :new-source-all t) :test eq find (:new-source :new-source-and-dependents) make::needs-compilation :source make::component-full-pathname make::source-pname make::must-compile probe-file "Compiling source" make::tell-user :binary make::output-file :host pathname-host :directory pathname-directory make-pathname ensure-directories-exist make::*oos-test* make::compile-function :output-file make::component-compiler-options apply make::tell-user-done "Source file not found. Not compiling" :no-dots :force #Y(make::compile-file-operation nil nil (24 45 1 24 45 2 26 13 1 19 1 3 76 73 39 37 13 0 15 4 14 5 33 6 12 19 4 7 73 40 22 13 0 15 8 14 5 33 6 12 19 4 7 73 39 7 13 1 77 19 2 9 12 13 1 14 10 19 2 11 12 46 12 46 13 10 0 39 5 10 1 16 14 39 83 15 15 13 3 14 10 77 77 19 5 16 13 3 14 17 19 2 11 45 18 14 19 13 0 19 1 20 12 14 21 13 0 19 1 22 12 19 4 23 12 19 1 24 11 25 40 22 13 4 19 1 26 12 13 2 14 27 13 0 13 4 19 1 28 12 19 5 29 43 1 13 3 77 77 19 3 30 10 0 73 38 24 10 0 39 18 15 31 13 3 14 10 14 32 14 33 19 5 16 75 73 38 3 75 73 43 2 29) #138# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 73 39 12 15 2 15 3 19 2 4 12 19 1 5 29) #A(t (6) ("PORT" find-package "COMPILED-FILE-P" "PORT" find-symbol import)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 76 73 39 12 15 0 1 4 12 19 2 5 1 0 73 29) #139=#A(t (6) (make::compiled-file-p fboundp make::file-name t #Y(make::compiled-file-p nil nil (24 45 2 26 11 3 73 29) #139# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #140=#A(t (14) (make::needs-compilation make::component make::force :source make::component-full-pathname :binary make::binary-pname make::source-pname probe-file file-write-date < make::compiled-file-p #Y(make::needs-compilation nil nil (24 45 1 24 45 2 26 13 1 14 3 19 2 4 12 13 1 14 5 19 2 4 12 46 6 46 7 10 0 16 8 73 39 32 10 1 16 8 76 73 40 24 10 1 16 9 12 10 0 16 9 12 19 2 10 73 40 8 13 1 19 1 11 76 73 43 2 29) #140# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 1 0 73 29) #141=#A(t (18) (make::needs-loading make::component t make::check-source make::check-binary make::component-load-time :source make::component-full-pathname :binary make::binary-pname make::source-pname make::load-time make::component-load-always probe-file file-write-date < #Y(make::needs-loading nil nil (24 45 1 25 40 3 14 2 46 3 25 40 3 14 2 46 4 26 13 2 19 1 5 12 13 2 14 6 19 2 7 12 13 2 14 8 19 2 7 12 46 9 46 10 46 11 13 5 19 1 12 73 40 51 10 0 76 73 40 45 10 3 39 5 10 2 16 13 39 11 13 0 10 2 16 14 12 19 2 15 73 40 22 10 4 39 5 10 1 16 13 73 39 11 13 0 10 1 16 14 12 19 2 15 43 3 29) #141# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 82 12 19 2 83 1 0 73 29) #142=#A(t (84) (make::load-file-operation make::component make::force :binary make::component-full-pathname make::binary-pname :source make::source-pname probe-file make::binary-exists make::source-exists t make::needs-loading make::source-needs-loading make::binary-needs-loading make::component-load-only make::needs-compilation (:new-source :new-source-and-dependents :new-source-all) :test eq find make::check-for-new-source (:all :new-source-all t) make::load-binary make::*load-source-instead-of-binary* make::load-source make::compile-and-load-source-if-no-binary make::compile-and-load make::*minimal-load* (:all :new-source-all) make::compile-file-operation "Loading binary" make::tell-user make::*oos-test* make::load-function #:g19605 file-write-date #:g19606 #:g19607 string typep make::*file-load-time-table* si::hash-set pathname namestring make::component-type #:g19614 :defsystem make::component-name make::name make::compute-system-path make::path :file :private-file (:defsystem :private-file :file) si::ecase-error (string pathname make::component) si::etypecase-error make::tell-user-done make::*compile-during-load* make::load-source-if-no-binary "Loading source" #:g19621 #:g19622 #:g19623 #:g19630 (:defsystem :private-file :file) (string pathname make::component) "Loading binary" #:g19637 #:g19638 #:g19639 #:g19646 (:defsystem :private-file :file) (string pathname make::component) :force make::tell-user-no-files make::*files-missing-is-an-error* "Continue, ignoring missing files." "~&Source file ~S ~:[and binary file ~S ~;~]do not exist." make::*load-source-if-no-binary* cerror #Y(make::load-file-operation nil nil (24 45 1 24 45 2 26 13 1 14 3 19 2 4 45 5 13 2 14 6 19 2 4 45 7 10 1 16 8 45 9 10 1 16 8 45 10 13 5 14 11 77 19 3 12 45 13 13 6 77 14 11 19 3 12 45 14 13 7 19 1 15 39 5 10 1 38 8 13 7 13 6 19 2 16 45 16 13 7 15 17 14 18 33 19 12 19 4 20 45 21 13 8 15 22 14 18 33 19 12 19 4 20 40 3 10 2 45 23 11 24 40 18 10 0 39 6 13 10 19 1 15 40 7 10 1 39 3 10 2 45 25 10 3 39 14 10 1 40 3 10 2 39 6 13 11 19 1 26 45 27 11 28 39 14 13 11 15 29 14 18 33 19 12 19 4 20 76 39 17 10 1 39 5 10 6 51 1 10 2 39 5 10 5 51 2 10 1 40 7 10 2 40 3 10 0 73 39 758 10 0 39 225 13 12 14 11 19 2 30 15 31 13 12 14 3 77 77 19 5 32 11 33 40 191 13 12 19 1 34 12 13 10 20 1 23 10 12 45 35 10 11 16 36 45 37 10 1 39 162 10 1 45 38 13 0 15 39 19 2 40 39 12 13 2 14 41 13 1 19 3 42 38 134 13 0 15 43 19 2 40 39 15 10 2 16 44 12 14 41 13 1 19 3 42 38 111 13 0 15 1 19 2 40 39 95 13 2 19 1 45 45 46 10 0 42 47 40 13 3 19 1 48 45 49 10 0 39 7 13 0 77 19 2 50 45 51 10 0 39 13 10 0 16 44 12 14 41 13 4 19 3 42 43 2 38 40 41 52 4 42 53 27 13 3 14 6 19 2 4 45 51 10 0 39 10 13 0 14 41 13 3 19 3 42 43 1 38 8 13 0 15 54 19 2 55 43 1 38 8 13 0 15 56 19 2 57 43 1 10 0 43 1 43 1 13 12 77 77 19 3 58 11 11 73 38 530 10 7 39 35 10 1 39 15 11 24 40 11 13 12 19 1 15 40 4 11 59 76 40 15 10 2 39 11 10 8 76 39 6 13 12 19 1 60 39 218 15 61 13 12 14 6 77 77 19 5 32 11 33 40 191 13 12 19 1 34 12 13 9 20 1 23 10 12 45 62 10 10 16 36 45 63 10 1 39 162 10 1 45 64 13 0 15 39 19 2 40 39 12 13 2 14 41 13 1 19 3 42 38 134 13 0 15 43 19 2 40 39 15 10 2 16 44 12 14 41 13 1 19 3 42 38 111 13 0 15 1 19 2 40 39 95 13 2 19 1 45 45 65 10 0 42 47 40 13 3 19 1 48 45 49 10 0 39 7 13 0 77 19 2 50 45 51 10 0 39 13 10 0 16 44 12 14 41 13 4 19 3 42 43 2 38 40 41 52 4 42 53 27 13 3 14 6 19 2 4 45 51 10 0 39 10 13 0 14 41 13 3 19 3 42 43 1 38 8 13 0 15 66 19 2 55 43 1 38 8 13 0 15 67 19 2 57 43 1 10 0 43 1 43 1 13 12 77 77 19 3 58 11 11 73 38 273 10 8 39 3 10 2 39 218 15 68 13 12 14 3 77 77 19 5 32 11 33 40 191 13 12 19 1 34 12 13 10 20 1 23 10 12 45 69 10 11 16 36 45 70 10 1 39 162 10 1 45 71 13 0 15 39 19 2 40 39 12 13 2 14 41 13 1 19 3 42 38 134 13 0 15 43 19 2 40 39 15 10 2 16 44 12 14 41 13 1 19 3 42 38 111 13 0 15 1 19 2 40 39 95 13 2 19 1 45 45 72 10 0 42 47 40 13 3 19 1 48 45 49 10 0 39 7 13 0 77 19 2 50 45 51 10 0 39 13 10 0 16 44 12 14 41 13 4 19 3 42 43 2 38 40 41 52 4 42 53 27 13 3 14 6 19 2 4 45 51 10 0 39 10 13 0 14 41 13 3 19 3 42 43 1 38 8 13 0 15 73 19 2 55 43 1 38 8 13 0 15 74 19 2 57 43 1 10 0 43 1 43 1 13 12 77 77 19 3 58 11 11 73 38 48 10 8 76 39 4 10 7 76 39 36 13 12 14 75 19 2 76 11 77 39 21 15 78 15 79 13 9 11 80 73 40 4 11 24 73 12 13 10 19 5 81 75 73 38 3 75 73 43 11 29) #142# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (14 0 15 1 19 2 2 15 3 15 1 19 2 2 14 4 15 1 19 2 2 15 5 15 1 19 2 2 29) #A(t (6) (:clean make::delete-binaries-operation make::component-operation make::clean :delete-binaries make::delete-binaries)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #143=#A(t (21) (make::delete-binaries-operation make::component make::force :all eq t (:new-source :new-source-and-dependents :new-source-all) :test find make::needs-compilation :binary make::component-full-pathname make::binary-pname probe-file "Deleting binary" make::tell-user make::*oos-test* delete-file make::tell-user-done #Y(make::delete-binaries-operation nil nil (24 45 1 24 45 2 26 13 0 11 3 17 4 40 29 13 0 11 5 17 4 40 21 13 0 15 6 14 7 33 4 12 19 4 8 39 7 13 1 77 19 2 9 73 39 45 13 1 14 10 19 2 11 45 12 10 0 16 13 73 39 27 15 14 13 2 14 10 77 77 19 5 15 11 16 40 5 10 0 16 17 13 2 77 77 19 3 18 43 1 29) #143# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #144=#A(t (7) (make::binary-exists make::component :binary make::component-full-pathname probe-file #Y(make::binary-exists nil nil (24 45 1 26 13 0 14 2 19 2 3 16 4 29) #144# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 20 12 19 2 21 1 0 73 29) #145=#A(t (22) (make::compile-and-load-source-if-no-binary make::component make::*load-source-instead-of-binary* make::*load-source-if-no-binary* make::binary-exists make::component-load-only make::*compile-during-load* :query eq make::prompt-string make::prompt #\y "~A- Binary file ~A is old or does not exist. ~
                     ~&~A  Compile (and load) source file ~A instead? " :binary make::component-full-pathname :source make::y-or-n-p-wait make::compile-source "~A- Should I bother you if this happens again? " "~A- Should I compile while loading the system? " #Y(make::compile-and-load-source-if-no-binary nil nil (24 45 1 26 11 2 40 11 11 3 39 7 13 0 19 1 4 76 76 73 39 99 13 0 19 1 5 39 5 75 73 38 88 14 6 11 7 17 8 39 73 13 0 19 1 9 45 10 15 11 9 30 15 12 13 0 13 1 14 13 19 2 14 12 13 0 13 1 14 15 19 2 14 12 19 7 16 45 17 15 11 9 30 15 18 13 1 19 4 16 76 39 14 15 11 9 30 15 19 13 1 19 4 16 52 6 10 0 73 43 2 38 8 11 6 73 40 3 75 73 29) #145# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #146=#A(t (20) (make::load-source-if-no-binary make::component make::*load-source-instead-of-binary* make::*load-source-if-no-binary* make::binary-exists make::component-load-only make::*bother-user-if-no-binary* make::prompt-string make::prompt #\y "~A- Binary file ~A does not exist. ~
                       ~&~A  Load source file ~A instead? " :binary make::component-full-pathname :source make::y-or-n-p-wait make::load-source #\n "~A- Should I bother you if this happens again? " #Y(make::load-source-if-no-binary nil nil (24 45 1 26 11 2 76 73 39 92 11 3 39 7 13 0 19 1 4 76 73 40 79 13 0 19 1 5 73 40 71 11 6 73 39 66 13 0 19 1 7 45 8 15 9 9 30 15 10 13 0 13 1 14 11 19 2 12 12 13 0 13 1 14 13 19 2 12 12 19 7 14 45 15 15 16 9 30 15 17 13 1 19 4 14 52 6 11 6 76 39 5 10 0 52 3 10 0 73 43 2 29) #146# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #147=#A(t (14) (make::files-which-need-compilation make::system make::comp :source make::component-full-pathname #Y(nil nil nil (24 45 2 26 13 0 14 3 19 2 4 29) #147# #1# 0) :load make::find-system :new-source make::file-components-in-component remove mapcar #Y(make::files-which-need-compilation nil nil (24 45 1 26 34 5 12 77 13 0 14 6 19 2 7 12 14 8 19 2 9 12 19 2 10 12 19 2 11 29) #147# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #148=#A(t (23) (make::files-in-system-and-dependents make::name :all make::force :source type make::version :load make::find-system make::system make::translate-version make::*version-replace* make::*version-dir* make::*version* make::file-pathnames-in-component make::result make::component-depends-on reverse si::%dolist-var make::dependent append #Y(make::files-in-system-and-dependents nil nil (24 45 1 25 40 3 14 2 46 3 25 40 3 14 4 46 5 25 40 2 77 46 6 26 13 3 14 7 19 2 8 45 9 13 1 19 1 10 50 1 11 48 12 10 1 48 13 13 0 13 2 13 3 19 3 14 45 15 13 1 19 1 16 16 17 45 18 75 45 19 38 30 10 1 4 51 0 13 0 13 6 13 5 13 4 19 4 0 12 13 2 19 2 20 51 2 10 1 5 51 1 10 1 40 -32 43 2 10 0 73 43 1 44 1 44 2 43 1 29) #148# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #149=#A(t (21) (make::files-in-system make::name :all make::force :source type make::version make::component-p make::component-type (:defsystem :system :subsystem) member :load make::find-system make::system make::translate-version make::*version-replace* make::*version-dir* make::*version* make::file-pathnames-in-component #Y(make::files-in-system nil nil (24 45 1 25 40 3 14 2 46 3 25 40 3 14 4 46 5 25 40 2 77 46 6 26 13 3 19 1 7 39 12 13 3 19 1 8 12 15 9 19 2 10 39 5 10 3 38 8 13 3 14 11 19 2 12 45 13 13 1 19 1 14 50 1 15 48 16 10 1 48 17 13 0 13 2 13 3 19 3 18 44 1 44 2 43 1 29) #149# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #150=#A(t (12) (make::file-pathnames-in-component make::component type :all make::force make::comp make::component-full-pathname #Y(nil nil nil (24 45 5 26 13 0 13 2 19 2 6 29) #150# #1# 0) make::file-components-in-component mapcar #Y(make::file-pathnames-in-component nil nil (24 45 1 24 45 2 25 40 3 14 3 46 4 26 34 7 12 13 2 13 0 19 2 8 12 19 2 9 29) #150# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 35 12 19 2 36 1 0 73 29) #151=#A(t (37) (make::file-components-in-component make::component :all make::force make::result make::changed make::component-type :file :private-file (:all t) :test eq find make::non-empty-listp make::needs-compilation :module :system :subsystem :defsystem make::component-components si::%dolist-var make::module make::dependent member #Y(nil nil nil (24 45 22 26 13 0 13 3 19 2 23 29) #151# #1# 0) make::component-depends-on some :new-source-and-dependents make::component-name string-equal :key string make::c make::r append #Y(make::file-components-in-component nil nil (24 45 1 25 40 3 14 2 46 3 26 75 45 4 75 45 5 13 3 19 1 6 41 7 4 42 8 41 13 2 15 9 14 10 33 11 12 19 4 12 40 15 13 2 19 1 13 76 39 7 13 3 77 19 2 14 51 0 39 7 10 3 6 1 51 1 38 146 41 15 10 41 16 7 41 17 4 42 18 134 13 3 19 1 19 45 20 75 45 21 38 116 10 1 4 51 0 13 0 34 24 12 13 0 19 1 25 12 19 2 26 39 14 13 4 19 1 13 40 7 13 4 11 27 17 11 39 6 11 2 73 38 39 13 4 19 1 13 39 22 13 0 19 1 28 12 13 4 14 10 33 29 12 14 30 33 31 12 19 6 23 39 6 11 2 73 38 4 10 4 73 12 19 2 0 47 1 32 45 33 10 1 39 17 13 2 10 4 3 51 4 13 5 13 0 19 2 34 51 5 43 2 10 1 5 51 1 10 1 40 -118 43 2 13 1 13 0 72 2 29) #151# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 1 16 2 12 19 2 3 29) #A(t (4) (make::oos make::operate-on-system symbol-function si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (make::*print-command* si::*make-special "enscript -2Gr")) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #152=#A(t (16) (make::system-source-size make::system-name :all make::force :source make::files-in-system make::file-list make::file-list-size make::total-size t "~&~a/~a (~:d file~:p) totals ~:d byte~:p (~:d kB)" length round format #Y(make::system-source-size nil nil (24 45 1 25 40 3 14 2 46 3 26 13 1 13 0 14 4 19 3 5 45 6 13 0 19 1 7 45 8 14 9 15 10 13 3 13 2 10 1 16 11 12 13 0 13 0 9 1024 19 2 12 12 19 7 13 10 0 73 43 2 29) #152# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #153=#A(t (15) (make::file-list-size make::file-list make::total-size si::%dolist-var make::file open stream file-length #:g19666 + close :abort t #Y(make::file-list-size nil nil (24 45 1 26 8 0 45 2 10 1 45 3 75 45 4 38 66 10 1 4 51 0 13 0 19 1 5 45 6 64 31 10 0 16 7 45 8 13 4 13 0 19 2 9 51 4 73 43 1 69 10 0 39 6 13 0 19 1 10 70 65 10 0 39 10 13 0 14 11 14 12 19 3 10 66 43 1 10 1 5 51 1 10 1 40 -68 43 2 10 0 73 43 1 29) #153# #1# 0) si::fset)) #1# 0))
