(#Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 15 2 77 77 77 19 10 3 29) #A(t (4) ("SB-BSD-SOCKETS" ("CL" "FFI" "SI") ("GET-HOST-BY-NAME" "GET-HOST-BY-ADDRESS" "SOCKET-BIND" "SOCKET-ACCEPT" "SOCKET-CONNECT" "SOCKET-PEERNAME" "SOCKET-NAME" "SOCKET-LISTEN" "SOCKET-RECEIVE" "SOCKET-CLOSE" "SOCKET-MAKE-STREAM" "GET-PROTOCOL-BY-NAME" "MAKE-INET-ADDRESS" "LOCAL-SOCKET" "SOCKET" "INET-SOCKET" "SOCKET-FILE-DESCRIPTOR" "SOCKET-FAMILY" "SOCKET-PROTOCOL" "SOCKET-TYPE" "SOCKET-ERROR" "NAME-SERVICE-ERROR" "NON-BLOCKING-MODE" "HOST-ENT-NAME" "HOST-ENT-ALIASES" "HOST-ENT-ADDRESS-TYPE" "HOST-ENT-ADDRESSES" "HOST-ENT" "HOST-ENT-ADDRESS" "SOCKET-SEND") si::dodefpackage)) #1=#P"/Users/strobolights/dev/mecl/ecl-build-for-ios64/compile.lsp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SB-BSD-SOCKETS" si::select-package)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 15 7 15 8 15 9 15 10 15 11 15 12 15 13 15 14 15 15 15 16 15 17 15 18 15 19 15 20 15 21 15 22 15 23 19 24 24 29) #A(t (25) ("#include <sys/types.h>" "#include <sys/socket.h>" "#include <sys/un.h>" "#define wincoerce(t,x) (x)" "#include <sys/time.h>" "#include <netdb.h>" "#include <string.h>" "#include <unistd.h>" "#include <netinet/in.h>" "#include <netinet/tcp.h>" "#include <errno.h>" "#include <fcntl.h>" "#ifndef MSG_CONFIRM" "#define MSG_CONFIRM 0" "#endif" "#ifndef MSG_NOSIGNAL" "#define MSG_NOSIGNAL 0" "#endif" "#ifndef MSG_DONTWAIT" "#define MSG_DONTWAIT 0" "#endif" "#ifndef MSG_EOR" "#define MSG_EOR 0" "#endif" ffi::clines)) #1# 0) #Y(si::bytecodes nil nil (75 73 29) #A(t (0) ()) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 1 77 77 15 2 15 9 14 4 11 5 6 6 12 19 2 6 17 7 15 10 15 1 77 77 15 2 15 11 14 4 11 5 6 6 12 19 2 6 17 7 15 12 15 1 77 77 15 2 15 13 14 4 11 5 6 6 12 19 2 6 17 7 1 12 73 29) #A(t (14) (sb-bsd-sockets::+af-inet+ #2="The special form c-inline cannot be used in the interpreter: ~A" :int "AF_INET" :one-liner t error si::*make-constant sb-bsd-sockets::+af-local+ "AF_LOCAL" sb-bsd-sockets::+eagain+ "EAGAIN" sb-bsd-sockets::+eintr+ "EINTR")) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #3=#A(t (12) (sb-bsd-sockets::ff-socket #:g24960 #:g24961 #:g24962 #2# (:int :int :int) :int "ecl_disable_interrupts();@(return)=socket(#0,#1,#2);ecl_enable_interrupts();" :one-liner error #Y(sb-bsd-sockets::ff-socket nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 2 13 1 10 0 6 3 12 15 5 15 6 15 7 14 8 75 6 6 12 19 2 9 29) #3# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #4=#A(t (11) (sb-bsd-sockets::ff-listen #:g24963 #:g24964 #2# (:int :int) :int "ecl_disable_interrupts();@(return)=listen(#0,#1);ecl_enable_interrupts();" :one-liner error #Y(sb-bsd-sockets::ff-listen nil nil (24 45 1 24 45 2 26 15 3 13 1 10 0 6 2 12 15 4 15 5 15 6 14 7 75 6 6 12 19 2 8 29) #4# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #5=#A(t (10) (sb-bsd-sockets::ff-close #:g24965 #2# (:int) :int "ecl_disable_interrupts();@(return)=close(#0);ecl_enable_interrupts();" :one-liner error #Y(sb-bsd-sockets::ff-close nil nil (24 45 1 26 15 2 10 0 6 1 12 15 3 15 4 15 5 14 6 75 6 6 12 19 2 7 29) #5# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #6=#A(t (23) (sb-bsd-sockets::split string max (#\  #\Tab) sb-bsd-sockets::ws char find #Y(sb-bsd-sockets::is-ws nil nil (24 45 5 26 13 0 13 1 19 2 6 29) #6# #1# 0) sb-bsd-sockets::start sb-bsd-sockets::index sb-bsd-sockets::word-count #:loop-list-head24968 #:loop-list-tail24969 0 position-if-not 1+ = :start position-if subseq rplacd #Y(sb-bsd-sockets::split nil nil (24 45 1 25 40 2 77 46 2 25 40 3 15 3 46 4 26 30 1 7 58 60 150 75 45 8 75 45 9 8 0 45 10 75 6 1 45 11 10 0 45 12 57 13 61 2 12 108 32 7 12 13 10 19 2 14 51 5 10 5 39 32 10 9 39 11 10 3 16 15 12 13 9 19 2 16 39 4 75 38 13 32 7 12 13 10 14 17 13 5 19 4 18 51 4 10 5 76 39 4 35 0 1 13 1 13 10 13 5 13 4 19 3 19 6 1 51 1 17 20 8 1 39 7 10 3 16 15 51 3 10 4 76 39 4 35 0 1 32 7 12 13 10 14 17 13 4 19 4 14 51 5 35 0 0 10 2 5 73 36 6 62 73 43 2 43 1 43 1 43 1 63 43 1 29) #6# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 14 2 1 3 6 2 12 19 4 4 29) #A(t (5) (sb-bsd-sockets::host-ent ((:writers ((setf sb-bsd-sockets::host-ent-name)) :readers (sb-bsd-sockets::host-ent-name) :initargs (:name) :name sb-bsd-sockets::name) (:writers ((setf sb-bsd-sockets::host-ent-aliases)) :readers (sb-bsd-sockets::host-ent-aliases) :initargs (:aliases) :name sb-bsd-sockets::aliases) (:writers ((setf sb-bsd-sockets::host-ent-address-type)) :readers (sb-bsd-sockets::host-ent-address-type) :initargs (:type) :name sb-bsd-sockets::address-type) (:writers ((setf sb-bsd-sockets::host-ent-addresses)) :readers (sb-bsd-sockets::host-ent-addresses) :initargs (:addresses) :name sb-bsd-sockets::addresses)) :documentation "" clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::host-ent-address :delete-methods t :lambda-list (sb-bsd-sockets::host-ent) :documentation "" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #7=#A(t (8) (sb-bsd-sockets::host-ent-address (sb-bsd-sockets::host-ent) (sb-bsd-sockets::host-ent) sb-bsd-sockets::host-ent sb-bsd-sockets::host-ent-addresses #Y(nil nil nil (24 45 3 26 13 0 19 1 4 4 73 29) #7# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 1 0 73 29) #8=#A(t (18) (sb-bsd-sockets::get-host-by-name sb-bsd-sockets::host-name sb-bsd-sockets::host-ent make-instance #2# (setf sb-bsd-sockets::host-ent-name) (setf sb-bsd-sockets::host-ent-aliases) (setf sb-bsd-sockets::host-ent-address-type) (setf sb-bsd-sockets::host-ent-addresses) (:cstring t t t t t) t "
{
	struct hostent *hostent = gethostbyname(#0);

	if (hostent != NULL) {
 	        char **aliases;
                char **addrs;
                cl_object aliases_list = ECL_NIL;
                cl_object addr_list = ECL_NIL;
                int length = hostent->h_length;

		funcall(3,#2,make_simple_base_string(hostent->h_name),#1);
                funcall(3,#4,ecl_make_integer(hostent->h_addrtype),#1);

                for (aliases = hostent->h_aliases; *aliases != NULL; aliases++) {
                        aliases_list = CONS(make_simple_base_string(*aliases),aliases_list);
                }
                funcall(3,#3,aliases_list,#1);

                for (addrs = hostent->h_addr_list; *addrs != NULL; addrs++) {
                        int pos;
                        cl_object vector = funcall(2,@make-array,MAKE_FIXNUM(length));
                        for (pos = 0; pos < length; pos++)
                                ecl_aset(vector, pos, MAKE_FIXNUM((unsigned char)((*addrs)[pos])));
                        addr_list = CONS(vector, addr_list);


                }
                funcall(3,#5,addr_list,#1);

                @(return) = #1;
	} else {
		@(return) = ECL_NIL;
	}
}" :side-effects error "get-host-by-name" sb-bsd-sockets::name-service-error #Y(sb-bsd-sockets::get-host-by-name nil nil (24 45 1 26 15 2 19 1 3 45 2 15 4 13 1 13 0 33 5 12 33 6 12 33 7 12 33 8 6 6 12 15 9 15 10 15 11 14 12 11 10 6 6 12 19 2 13 39 6 10 0 73 38 6 15 14 19 1 15 43 1 29) #8# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 1 0 73 29) #9=#A(t (24) (sb-bsd-sockets::get-host-by-address sb-bsd-sockets::address (and (typep sb-bsd-sockets::address 'vector) (= (length sb-bsd-sockets::address) 4)) si::assert-failure vector typep length = sb-bsd-sockets::host-ent make-instance #2# (setf sb-bsd-sockets::host-ent-name) (setf sb-bsd-sockets::host-ent-aliases) (setf sb-bsd-sockets::host-ent-address-type) (setf sb-bsd-sockets::host-ent-addresses) (t t t t t t) t "
{
	unsigned char vector[4];
	struct hostent *hostent;
	vector[0] = fixint(ecl_aref(#0,0));
	vector[1] = fixint(ecl_aref(#0,1));
	vector[2] = fixint(ecl_aref(#0,2));
	vector[3] = fixint(ecl_aref(#0,3));
	ecl_disable_interrupts();
	hostent = gethostbyaddr(wincoerce(const char *, vector),4,AF_INET);
	ecl_enable_interrupts();

	if (hostent != NULL) {
 	        char **aliases;
                char **addrs;
                cl_object aliases_list = ECL_NIL;
                cl_object addr_list = ECL_NIL;
                int length = hostent->h_length;

		funcall(3,#2,make_simple_base_string(hostent->h_name),#1);
                funcall(3,#4,ecl_make_integer(hostent->h_addrtype),#1);

                for (aliases = hostent->h_aliases; *aliases != NULL; aliases++) {
                        aliases_list = CONS(make_simple_base_string(*aliases),aliases_list);
                }
                funcall(3,#3,aliases_list,#1);

                for (addrs = hostent->h_addr_list; *addrs != NULL; addrs++) {
                        int pos;
                        cl_object vector = funcall(2,@make-array,MAKE_FIXNUM(length));
                        for (pos = 0; pos < length; pos++)
                                ecl_aset(vector, pos, MAKE_FIXNUM((unsigned char)((*addrs)[pos])));
                        addr_list = CONS(vector, addr_list);


                }
                funcall(3,#5,addr_list,#1);

                @(return) = #1;
	} else {
		@(return) = ECL_NIL;
	}
}" :side-effects error "get-host-by-address" sb-bsd-sockets::name-service-error #Y(sb-bsd-sockets::get-host-by-address nil nil (24 45 1 26 38 6 15 2 19 1 3 13 0 15 4 19 2 5 39 11 10 0 16 6 12 9 4 19 2 7 76 40 -26 15 8 19 1 9 45 8 15 10 13 1 13 0 33 11 12 33 12 12 33 13 12 33 14 6 6 12 15 15 15 16 15 17 14 18 11 16 6 6 12 19 2 19 39 6 10 0 73 38 6 15 20 19 1 21 43 1 29) #9# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 14 2 1 5 12 1 6 7 3 12 15 7 15 8 1 9 6 5 12 14 10 1 11 6 2 12 19 4 12 29) #10=#A(t (13) (sb-bsd-sockets::socket (:readers (sb-bsd-sockets::socket-file-descriptor) :initargs (:descriptor) :name sb-bsd-sockets::file-descriptor) :initfunction #11="No socket family" error #Y(nil nil nil (26 15 3 19 1 4 29) #10# #1# 0) (:readers (sb-bsd-sockets::socket-family) :initform (error #11#) :name sb-bsd-sockets::family) (:documentation ("Protocol used by the socket. If a
keyword, the symbol-name of the keyword will be passed to
GET-PROTOCOL-BY-NAME downcased, and the returned value used as
protocol. Other values are used as-is.") :readers (sb-bsd-sockets::socket-protocol) :initargs (:protocol) :name sb-bsd-sockets::protocol) (:documentation ("Type of the socket: :STREAM or :DATAGRAM.") :initform :stream :readers (sb-bsd-sockets::socket-type) :initargs (:type) :name type) (:name stream) :documentation "Common base class of all sockets, not meant to be
directly instantiated." clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 10 19 6 13 29) #12=#A(t (14) (print-object (sb-bsd-sockets::socket t) (ffi::object stream) ffi::object stream "descriptor " princ sb-bsd-sockets::file-descriptor slot-value #Y(si::.print-unreadable-object-body. nil nil (26 15 5 13 0 19 2 6 13 1 15 7 19 2 8 12 13 0 19 2 6 29) #12# #1# 0) t si::print-unreadable-object-function #Y(nil nil nil (24 45 3 24 45 4 26 30 1 9 13 2 13 1 14 10 14 10 32 0 12 19 5 11 43 1 29) #12# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 44 12 14 25 19 6 45 29) #13=#A(t (46) (shared-initialize (:after) (sb-bsd-sockets::socket t) (sb-bsd-sockets::socket sb-bsd-sockets::slot-names &key sb-bsd-sockets::protocol type &allow-other-keys) sb-bsd-sockets::socket sb-bsd-sockets::slot-names (t :type :protocol) sb-bsd-sockets::protocol type keywordp symbol-name string-downcase sb-bsd-sockets::get-protocol-by-name sb-bsd-sockets::proto-num sb-bsd-sockets::file-descriptor slot-boundp sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::socket-family sb-bsd-sockets::socket-type #:g24991 :datagram #2# :int "SOCK_DGRAM" :one-liner t error :stream "SOCK_STREAM" (:datagram :stream) si::ecase-error sb-bsd-sockets::ff-socket sb-bsd-sockets::fd = "socket" sb-bsd-sockets::socket-error #:g24992 #:g24993 #:g24994 (setf slot-value) #:g24995 #:g24996 #:g24997 (setf slot-value) #Y(nil nil nil (24 45 4 24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 10 1 39 5 10 1 16 9 39 15 10 1 16 10 12 19 1 11 12 19 1 12 38 11 10 1 39 5 10 1 38 3 8 0 45 13 13 4 15 14 19 2 15 39 6 13 4 19 1 16 40 81 13 4 19 1 17 12 10 1 40 6 13 4 19 1 18 45 19 10 0 42 20 21 15 21 77 77 15 22 15 23 14 24 11 25 6 6 12 19 2 26 38 31 42 27 21 15 21 77 77 15 22 15 28 14 24 11 25 6 6 12 19 2 26 38 8 13 0 15 29 19 2 30 12 43 1 13 0 19 3 31 45 32 13 0 9 -1 19 2 33 39 6 15 34 19 1 35 10 5 45 36 1 14 45 37 10 2 45 38 13 0 13 2 13 1 33 39 18 3 43 1 43 2 10 5 45 40 1 7 45 41 10 3 45 42 13 0 13 2 13 1 33 43 18 3 43 1 43 2 43 2 29) #13# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-bind :delete-methods t :lambda-list (sb-bsd-sockets::socket &rest sb-bsd-sockets::address) :documentation "Bind SOCKET to ADDRESS, which may vary according to
socket family.  For the INET family, pass ADDRESS and PORT as two
arguments; for FILE address family sockets, pass the filename string.
See also bind(2)" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-accept :delete-methods t :lambda-list (sb-bsd-sockets::socket) :documentation "Perform the accept(2) call, returning a
newly-created connected socket and the peer address as multiple
values" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-connect :delete-methods t :lambda-list (sb-bsd-sockets::socket &rest sb-bsd-sockets::address) :documentation "Perform the connect(2) call to connect SOCKET to a
  remote PEER.  No useful return value." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-peername :delete-methods t :lambda-list (sb-bsd-sockets::socket) :documentation "Return the socket's peer; depending on the address
  family this may return multiple values" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-name :delete-methods t :lambda-list (sb-bsd-sockets::socket) :documentation "Return the address (as vector of bytes) and port
  that the socket is bound to, as multiple values." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-listen :delete-methods t :lambda-list (sb-bsd-sockets::socket sb-bsd-sockets::backlog) :documentation "Mark SOCKET as willing to accept incoming connections.  BACKLOG
defines the maximum length that the queue of pending connections may
grow to before new connection attempts are refused.  See also listen(2)" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-receive :delete-methods t :lambda-list (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &key sb-bsd-sockets::oob sb-bsd-sockets::peek sb-bsd-sockets::waitall sb-bsd-sockets::element-type) :documentation "Read LENGTH octets from SOCKET into BUFFER (or a freshly-consed buffer if
NIL), using recvfrom(2).  If LENGTH is NIL, the length of BUFFER is
used, so at least one of these two arguments must be non-NIL.  If
BUFFER is supplied, it had better be of an element type one octet wide.
Returns the buffer, its length, and the address of the peer
that sent it, as multiple values.  On datagram sockets, sets MSG_TRUNC
so that the actual packet length is returned even if the buffer was too
small" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-send :delete-methods t :lambda-list (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &key sb-bsd-sockets::address sb-bsd-sockets::external-format sb-bsd-sockets::oob sb-bsd-sockets::eor sb-bsd-sockets::dontroute sb-bsd-sockets::dontwait sb-bsd-sockets::nosignal sb-bsd-sockets::confirm sb-bsd-sockets::more) :documentation "Send length octets from buffer into socket, using sendto(2).
If buffer is a string, it will converted to octets according to external-format&
If length is nil, the length of the octet buffer is used. The format of address
depends on the socket type (for example for inet domain sockets it would be a 
list of an ip address and a port). If no socket address is provided, send(2) 
will be called instead. Returns the number of octets written." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-close :delete-methods t :lambda-list (sb-bsd-sockets::socket) :documentation "Close SOCKET.  May throw any kind of error that write(2) would have
thrown.  If SOCKET-MAKE-STREAM has been called, calls CLOSE on that
stream instead" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-make-stream :delete-methods t :lambda-list (sb-bsd-sockets::socket &rest sb-bsd-sockets::args) :documentation "Find or create a STREAM that can be used for IO
on SOCKET (which must be connected).  ARGS are passed onto
SB-SYS:MAKE-FD-STREAM." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::non-blocking-mode :delete-methods t :lambda-list (sb-bsd-sockets::socket) :documentation "Is SOCKET in non-blocking mode?" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) ((setf sb-bsd-sockets::non-blocking-mode) :delete-methods t :lambda-list (sb-bsd-sockets::non-blocking-p sb-bsd-sockets::socket) :documentation "Put SOCKET in non-blocking mode - or not, according to NON-BLOCKING-P" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (sb-bsd-sockets::socket-close-low-level :delete-methods t :lambda-list (sb-bsd-sockets::socket) :documentation "Close SOCKET at low level. Do not use directly." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #14=#A(t (14) (sb-bsd-sockets::socket-listen (sb-bsd-sockets::socket t) (sb-bsd-sockets::socket sb-bsd-sockets::backlog) sb-bsd-sockets::socket sb-bsd-sockets::backlog sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::ff-listen sb-bsd-sockets::r = "listen" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 12 13 0 19 2 6 45 7 13 0 9 -1 19 2 8 73 39 6 15 9 19 1 10 43 1 29) #14# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #15=#A(t (9) (sb-bsd-sockets::socket-close-low-level (sb-bsd-sockets::socket) (sb-bsd-sockets::socket) sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::ff-close #Y(nil nil nil (24 45 3 26 13 0 19 1 4 12 19 1 5 29) #15# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 23 12 14 24 19 6 25 29) #16=#A(t (26) (sb-bsd-sockets::socket-close (sb-bsd-sockets::socket) (sb-bsd-sockets::socket) sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::fd eql stream slot-boundp slot-value two-way-stream-input-stream close two-way-stream-output-stream slot-makunbound sb-bsd-sockets::socket-close-low-level = "close" sb-bsd-sockets::socket-error #:g25007 sb-bsd-sockets::file-descriptor #:g25008 #:g25009 (setf slot-value) #Y(nil nil nil (24 45 3 26 13 0 19 1 4 45 5 13 0 8 -1 17 6 76 73 39 90 13 1 15 7 19 2 8 39 37 13 1 15 7 19 2 9 45 7 10 0 16 10 12 19 1 11 10 0 16 12 12 19 1 11 43 1 13 1 15 7 19 2 13 38 19 13 1 19 1 14 12 9 -1 19 2 15 39 6 15 16 19 1 17 10 1 45 18 1 19 45 20 8 -1 45 21 13 0 13 2 13 1 33 22 18 3 43 1 43 2 43 1 29) #16# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ("
static void *
safe_buffer_pointer(cl_object x, cl_index size)
{
	cl_type t = type_of(x);
	int ok = 0;
	if (t == t_base_string) {
		ok = (size <= x->base_string.dim);
	} else if (t == t_vector) {
		cl_elttype aet = (cl_elttype)x->vector.elttype;
		if (aet == aet_b8 || aet == aet_i8 || aet == aet_bc) {
			ok = (size <= x->vector.dim);
		} else if (aet == aet_fix || aet == aet_index) {
			cl_index divisor = sizeof(cl_index);
			size = (size + divisor - 1) / divisor;
			ok = (size <= x->vector.dim);
		}
	}
	if (!ok) {
		FEerror(\"Lisp object is not a valid socket buffer: ~A\", 1, x);
	}
	return (void *)x->vector.self.t;
}
" ffi::clines)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 30 12 14 31 19 6 32 29) #17=#A(t (33) (sb-bsd-sockets::socket-receive (sb-bsd-sockets::socket t t) (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &key sb-bsd-sockets::oob sb-bsd-sockets::peek sb-bsd-sockets::waitall sb-bsd-sockets::element-type) sb-bsd-sockets::socket sb-bsd-sockets::buffer length (t :element-type :waitall :peek :oob) sb-bsd-sockets::oob sb-bsd-sockets::peek sb-bsd-sockets::waitall sb-bsd-sockets::element-type "You have to supply either buffer or length!" error :element-type make-array sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::fd #2# (:int :object :int :bool :bool :bool) (values :long :int) "
{
        int flags = ( #3 ? MSG_OOB : 0 )  |
                    ( #4 ? MSG_PEEK : 0 ) |
                    ( #5 ? MSG_WAITALL : 0 );
        cl_type type = type_of(#1);
	ssize_t len;

        ecl_disable_interrupts();
        len = recvfrom(#0, wincoerce(char*, safe_buffer_pointer(#1, #2)),
                       #2, flags, NULL,NULL);
	ecl_enable_interrupts();
        if (len >= 0) {
               if (type == t_vector) { #1->vector.fillp = len; }
               else if (type == t_base_string) { #1->base_string.fillp = len; }
        }
        @(return 0) = len;
        @(return 1) = errno;
}
" :one-liner sb-bsd-sockets::errno sb-bsd-sockets::len-recv = sb-bsd-sockets::+eagain+ sb-bsd-sockets::+eintr+ member "receive" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 24 45 4 24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 22 40 2 77 46 9 22 40 2 77 46 10 10 5 40 3 10 4 76 39 6 15 11 19 1 12 10 5 73 40 10 13 4 14 13 13 0 19 3 14 12 10 4 73 40 5 10 5 16 5 12 13 6 19 1 15 12 46 16 46 5 46 4 15 17 13 2 13 0 13 1 13 6 13 5 10 4 6 6 12 15 18 15 19 15 20 14 21 75 6 6 12 19 2 12 47 1 22 45 23 13 0 9 -1 19 2 24 39 13 13 1 14 25 11 26 6 2 12 19 2 27 39 5 75 73 38 23 13 0 9 -1 19 2 24 39 8 15 28 19 1 29 38 7 13 2 13 0 72 2 43 2 43 3 29) #17# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #18=#A(t (12) (sb-bsd-sockets::get-protocol-by-name sb-bsd-sockets::string-or-symbol string #2# (:cstring) :int "getprotobyname(#0)->p_proto" :one-liner t error #Y(sb-bsd-sockets::get-protocol-by-name nil nil (24 45 1 26 10 0 16 2 45 2 15 3 10 0 6 1 12 15 4 15 5 15 6 14 7 11 8 6 6 12 19 2 9 43 1 29) #18# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #19=#A(t (9) (sb-bsd-sockets::make-inet-address sb-bsd-sockets::dotted-quads vector parse-integer (#\.) sb-bsd-sockets::split map #Y(sb-bsd-sockets::make-inet-address nil nil (24 45 1 26 15 2 33 3 12 13 0 77 15 4 19 3 5 12 19 3 6 29) #19# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 4 12 1 5 7 3 6 1 12 14 6 1 7 6 2 12 19 4 8 29) #20=#A(t (9) (sb-bsd-sockets::inet-socket (sb-bsd-sockets::socket) :initfunction sb-bsd-sockets::+af-inet+ #Y(nil nil nil (26 11 3 73 29) #20# #1# 0) (:initform sb-bsd-sockets::+af-inet+ :name sb-bsd-sockets::family) :documentation "Class representing TCP and UDP sockets.

Examples:

 (make-instance 'inet-socket :type :stream :protocol :tcp)

 (make-instance 'inet-socket :type :datagram :protocol :udp)
" clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #21=#A(t (9) (sb-bsd-sockets::make-inet-socket type sb-bsd-sockets::protocol sb-bsd-sockets::inet-socket :type :protocol make-instance #Y(sb-bsd-sockets::make-inet-socket nil nil (24 45 1 24 45 2 26 15 3 14 4 13 1 14 5 13 0 19 5 6 29) #21# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ("
static void fill_inet_sockaddr(struct sockaddr_in *sockaddr, int port,
			       int a1, int a2, int a3, int a4)
{
#if defined(_MSC_VER) || defined(mingw32)
	memset(sockaddr,0,sizeof(struct sockaddr_in));
#else
	bzero(sockaddr,sizeof(struct sockaddr_in));
#endif
	sockaddr->sin_family = AF_INET;
	sockaddr->sin_port = htons(port);
	sockaddr->sin_addr.s_addr= htonl((uint32_t)a1<<24 | (uint32_t)a2<<16 | (uint32_t)a3<<8 | (uint32_t)a4) ;

}
" ffi::clines)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 26 12 14 22 19 6 27 29) #22=#A(t (28) (sb-bsd-sockets::socket-bind (sb-bsd-sockets::inet-socket) (sb-bsd-sockets::socket &rest sb-bsd-sockets::address) sb-bsd-sockets::socket sb-bsd-sockets::address (= 2 (length sb-bsd-sockets::address)) (sb-bsd-sockets::address) "Socket-bind needs three parameters for inet sockets." si::assert-failure #:g25013 length = second sb-bsd-sockets::port sb-bsd-sockets::ip #2# aref sb-bsd-sockets::socket-file-descriptor (:int :int :int :int :int :int) :int "
{
	struct sockaddr_in sockaddr;
	int output;
	ecl_disable_interrupts();
	fill_inet_sockaddr(&sockaddr, #0, #1, #2, #3, #4);
	output = bind(#5,(struct sockaddr*)&sockaddr, sizeof(struct sockaddr_in));
	ecl_enable_interrupts();
	@(return) = output;
}" :side-effects t error "bind" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 27 45 4 38 23 15 5 15 6 10 0 6 1 12 15 7 19 4 8 45 9 10 0 51 1 43 1 9 2 10 0 16 10 12 19 2 11 76 40 -34 10 0 4 12 10 0 16 12 12 46 13 46 14 9 -1 15 15 13 1 13 0 9 0 19 2 16 12 13 0 9 1 19 2 16 12 13 0 9 2 19 2 16 12 13 0 9 3 19 2 16 12 13 3 19 1 17 6 6 12 15 18 15 19 15 20 14 21 11 22 6 6 12 19 2 23 12 19 2 11 73 39 6 15 24 19 1 25 43 2 29) #22# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 24 12 14 25 19 6 26 29) #23=#A(t (27) (sb-bsd-sockets::socket-accept (sb-bsd-sockets::inet-socket) (sb-bsd-sockets::socket) sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::sfd #2# (:int) (values :int :object :int) "{
        struct sockaddr_in sockaddr;
        socklen_t addr_len = (socklen_t)sizeof(struct sockaddr_in);
        int new_fd;

	ecl_disable_interrupts();
	new_fd = accept(#0, (struct sockaddr*)&sockaddr, &addr_len);
	ecl_enable_interrupts();

	@(return 0) = new_fd;
	@(return 1) = ECL_NIL;
	@(return 2) = 0;
        if (new_fd != -1) {
                uint32_t ip = ntohl(sockaddr.sin_addr.s_addr);
                uint16_t port = ntohs(sockaddr.sin_port);
                cl_object vector = cl_make_array(1,MAKE_FIXNUM(4));

                ecl_aset(vector,0, MAKE_FIXNUM( ip>>24 ));
		ecl_aset(vector,1, MAKE_FIXNUM( (ip>>16) & 0xFF));
		ecl_aset(vector,2, MAKE_FIXNUM( (ip>>8) & 0xFF));
                ecl_aset(vector,3, MAKE_FIXNUM( ip & 0xFF ));

		@(return 1) = vector;
		@(return 2) = port;
	}
}" error sb-bsd-sockets::port vector sb-bsd-sockets::fd = "accept" sb-bsd-sockets::socket-error class-of :type sb-bsd-sockets::socket-type :protocol sb-bsd-sockets::socket-protocol :descriptor make-instance #Y(nil nil nil (24 45 3 26 13 0 19 1 4 45 5 15 6 10 0 6 1 12 15 7 15 8 1 9 6 4 12 19 2 10 47 2 11 47 1 12 45 13 13 0 9 -1 19 2 14 39 8 15 15 19 1 16 38 36 10 4 16 17 12 14 18 13 4 19 1 19 12 14 20 13 4 19 1 21 12 14 22 13 0 19 7 23 12 13 1 13 2 72 3 43 3 43 1 29) #23# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 18 12 14 19 19 6 20 29) #24=#A(t (21) (sb-bsd-sockets::socket-connect (sb-bsd-sockets::inet-socket) (sb-bsd-sockets::socket &rest sb-bsd-sockets::address) sb-bsd-sockets::socket sb-bsd-sockets::address second sb-bsd-sockets::port sb-bsd-sockets::ip #2# aref sb-bsd-sockets::socket-file-descriptor (:int :int :int :int :int :int) :int "
{
	struct sockaddr_in sockaddr;
	int output;

	ecl_disable_interrupts();
	fill_inet_sockaddr(&sockaddr, #0, #1, #2, #3, #4);
	output = connect(#5,(struct sockaddr*)&sockaddr, sizeof(struct sockaddr_in));
	ecl_enable_interrupts();

	@(return) = output;
}" error = "connect" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 27 45 4 10 0 4 12 10 0 16 5 12 46 6 46 7 9 -1 15 8 13 1 13 0 9 0 19 2 9 12 13 0 9 1 19 2 9 12 13 0 9 2 19 2 9 12 13 0 9 3 19 2 9 12 13 3 19 1 10 6 6 12 15 11 15 12 1 13 6 4 12 19 2 14 12 19 2 15 73 39 6 15 16 19 1 17 43 2 29) #24# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #25=#A(t (20) (sb-bsd-sockets::socket-peername (sb-bsd-sockets::inet-socket) (sb-bsd-sockets::socket) sb-bsd-sockets::socket make-array vector sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::fd #2# (:int t) :int "@01;{
        struct sockaddr_in name;
        socklen_t len = sizeof(struct sockaddr_in);
        int ret;

	ecl_disable_interrupts();
	ret = getpeername(#0,(struct sockaddr*)&name,&len);
	ecl_enable_interrupts();

        if (ret == 0) {
                uint32_t ip = ntohl(name.sin_addr.s_addr);
                uint16_t port = ntohs(name.sin_port);

                ecl_aset(#1,0, MAKE_FIXNUM( ip>>24 ));
		ecl_aset(#1,1, MAKE_FIXNUM( (ip>>16) & 0xFF));
		ecl_aset(#1,2, MAKE_FIXNUM( (ip>>8) & 0xFF));
                ecl_aset(#1,3, MAKE_FIXNUM( ip & 0xFF ));

                @(return) = port;
         } else {
                @(return) = -1;
         }
}" error sb-bsd-sockets::port >= "getpeername" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 26 9 4 19 1 4 45 5 13 1 19 1 6 45 7 15 8 13 0 10 1 6 2 12 15 9 15 10 1 11 6 4 12 19 2 12 45 13 13 0 9 0 19 2 14 39 9 13 2 13 0 72 2 38 6 15 15 19 1 16 43 3 29) #25# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #26=#A(t (20) (sb-bsd-sockets::socket-name (sb-bsd-sockets::inet-socket) (sb-bsd-sockets::socket) sb-bsd-sockets::socket make-array vector sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::fd #2# (:int t) :int "@01;{
        struct sockaddr_in name;
        socklen_t len = sizeof(struct sockaddr_in);
        int ret;

	ecl_disable_interrupts();
	ret = getsockname(#0,(struct sockaddr*)&name,&len);
	ecl_enable_interrupts();

        if (ret == 0) {
                uint32_t ip = ntohl(name.sin_addr.s_addr);
                uint16_t port = ntohs(name.sin_port);

                ecl_aset(#1,0, MAKE_FIXNUM( ip>>24 ));
		ecl_aset(#1,1, MAKE_FIXNUM( (ip>>16) & 0xFF));
		ecl_aset(#1,2, MAKE_FIXNUM( (ip>>8) & 0xFF));
                ecl_aset(#1,3, MAKE_FIXNUM( ip & 0xFF ));

                @(return) = port;
         } else {
                @(return) = -1;
         }
}" error sb-bsd-sockets::port >= "getsockname" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 26 9 4 19 1 4 45 5 13 1 19 1 6 45 7 15 8 13 0 10 1 6 2 12 15 9 15 10 1 11 6 4 12 19 2 12 45 13 13 0 9 0 19 2 14 39 9 13 2 13 0 72 2 38 6 15 15 19 1 16 43 3 29) #26# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 38 12 14 39 19 6 40 29) #27=#A(t (41) (sb-bsd-sockets::socket-send (sb-bsd-sockets::socket t t) (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &key sb-bsd-sockets::address sb-bsd-sockets::external-format sb-bsd-sockets::oob sb-bsd-sockets::eor sb-bsd-sockets::dontroute sb-bsd-sockets::dontwait sb-bsd-sockets::nosignal sb-bsd-sockets::confirm sb-bsd-sockets::more) sb-bsd-sockets::socket sb-bsd-sockets::buffer length (t :more :confirm :nosignal :dontwait :dontroute :eor :oob :external-format :address) sb-bsd-sockets::address sb-bsd-sockets::external-format sb-bsd-sockets::oob sb-bsd-sockets::eor sb-bsd-sockets::dontroute sb-bsd-sockets::dontwait sb-bsd-sockets::nosignal sb-bsd-sockets::confirm sb-bsd-sockets::more (or (stringp sb-bsd-sockets::buffer) (typep sb-bsd-sockets::buffer 'vector)) si::assert-failure stringp vector typep sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::fd (= 2 (length sb-bsd-sockets::address)) = #2# second aref (:int :object :int :int :int :int :int :int :bool :bool :bool :bool :bool :bool) :long "
{
	int sock = #0;
	int length = #2;
	void *buffer = safe_buffer_pointer(#1, length);
        int flags = ( #8 ? MSG_OOB : 0 )  |
                    ( #9 ? MSG_EOR : 0 ) |
                    ( #a ? MSG_DONTROUTE : 0 ) |
                    ( #b ? MSG_DONTWAIT : 0 ) |
                    ( #c ? MSG_NOSIGNAL : 0 ) |
                    ( #d ? MSG_CONFIRM : 0 );
        cl_type type = type_of(#1);
        struct sockaddr_in sockaddr;
	ssize_t len;

	ecl_disable_interrupts();
	fill_inet_sockaddr(&sockaddr, #3, #4, #5, #6, #7);
##if (MSG_NOSIGNAL == 0) && defined(SO_NOSIGPIPE)
	{
		int sockopt = #c;
		setsockopt(#0,SOL_SOCKET,SO_NOSIGPIPE,
			   wincoerce(char *,&sockopt),
			   sizeof(int));
	}
##endif
        len = sendto(sock, wincoerce(char *,buffer),
                     length, flags,(struct sockaddr*)&sockaddr, 
                     sizeof(struct sockaddr_in));
	ecl_enable_interrupts();
        @(return) = len;
}
" :one-liner error (:int :object :int :bool :bool :bool :bool :bool :bool) "
{
	int sock = #0;
	int length = #2;
	void *buffer = safe_buffer_pointer(#1, length);
        int flags = ( #3 ? MSG_OOB : 0 )  |
                    ( #4 ? MSG_EOR : 0 ) |
                    ( #5 ? MSG_DONTROUTE : 0 ) |
                    ( #6 ? MSG_DONTWAIT : 0 ) |
                    ( #7 ? MSG_NOSIGNAL : 0 ) |
                    ( #8 ? MSG_CONFIRM : 0 );
        cl_type type = type_of(#1);
        ssize_t len;
	ecl_disable_interrupts();
##if (MSG_NOSIGNAL == 0) && defined(SO_NOSIGPIPE)
	{
		int sockopt = #7;
		setsockopt(#0,SOL_SOCKET,SO_NOSIGPIPE,
			   wincoerce(char *,&sockopt),
			   sizeof(int));
	}
##endif
	len = send(sock, wincoerce(char *, buffer), length, flags);
	ecl_enable_interrupts();
        @(return) = len;
}
" sb-bsd-sockets::len-sent "send" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 24 45 4 24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 22 40 2 77 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 22 40 2 77 46 13 22 40 2 77 46 14 22 40 2 77 46 15 38 6 15 16 19 1 17 10 10 16 18 40 8 13 10 15 19 19 2 20 76 40 -20 10 9 73 40 5 10 10 16 5 12 13 11 19 1 21 12 46 22 46 5 10 10 39 106 38 6 15 23 19 1 17 9 2 10 10 16 5 12 19 2 24 76 40 -17 15 25 13 1 13 12 13 0 10 10 16 26 12 10 10 4 12 9 0 19 2 27 12 10 10 4 12 9 1 19 2 27 12 10 10 4 12 9 2 19 2 27 12 10 10 4 12 9 3 19 2 27 12 13 8 13 7 13 6 13 5 13 4 10 3 6 14 12 15 28 15 29 15 30 14 31 75 6 6 12 19 2 32 38 39 15 25 13 1 13 12 13 0 13 8 13 7 13 6 13 5 13 4 10 3 6 9 12 15 33 15 29 15 34 14 31 75 6 6 12 19 2 32 45 35 13 0 9 -1 19 2 24 39 8 15 36 19 1 37 38 4 10 0 73 43 1 43 2 29) #27# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 4 12 1 5 7 3 6 1 12 14 6 1 7 6 2 12 19 4 8 15 9 77 15 10 15 11 1 33 12 14 34 19 6 35 15 36 77 15 37 15 38 1 50 12 14 34 19 6 35 15 51 77 15 52 15 53 1 62 12 14 34 19 6 35 15 63 77 15 64 15 65 1 70 12 14 34 19 6 35 29) #28=#A(t (71) (sb-bsd-sockets::local-socket (sb-bsd-sockets::socket) :initfunction sb-bsd-sockets::+af-local+ #Y(nil nil nil (26 11 3 73 29) #28# #1# 0) (:initform sb-bsd-sockets::+af-local+ :name sb-bsd-sockets::family) :documentation "Class representing local domain (AF_LOCAL) sockets,
also known as unix-domain sockets." clos::load-defclass sb-bsd-sockets::socket-bind (sb-bsd-sockets::local-socket) (sb-bsd-sockets::socket &rest sb-bsd-sockets::address) sb-bsd-sockets::socket sb-bsd-sockets::address (= 1 (length sb-bsd-sockets::address)) (sb-bsd-sockets::address) "Socket-bind needs two parameters for local sockets." si::assert-failure #:g25017 length = sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::socket-family sb-bsd-sockets::family sb-bsd-sockets::fd sb-bsd-sockets::name #2# (:int :cstring :int) :int "
{
        struct sockaddr_un sockaddr;
	size_t size;
	int output;
##ifdef BSD
        sockaddr.sun_len = sizeof(struct sockaddr_un);
##endif
        sockaddr.sun_family = #2;
        strncpy(sockaddr.sun_path,#1,sizeof(sockaddr.sun_path));
	sockaddr.sun_path[sizeof(sockaddr.sun_path)-1] = '0';

	ecl_disable_interrupts();
	output = bind(#0,(struct sockaddr*)&sockaddr, sizeof(struct sockaddr_un));
	ecl_enable_interrupts();

        @(return) = output;
}" error "bind" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 12 27 45 13 38 23 15 14 15 15 10 0 6 1 12 15 16 19 4 17 45 18 10 0 51 1 43 1 9 1 10 0 16 19 12 19 2 20 76 40 -34 10 0 4 12 13 1 19 1 21 12 13 1 19 1 22 12 46 23 46 24 46 25 9 -1 15 26 13 1 13 0 10 2 6 3 12 15 27 15 28 1 29 6 4 12 19 2 30 12 19 2 20 73 39 6 15 31 19 1 32 43 3 29) #28# #1# 0) t clos::install-method sb-bsd-sockets::socket-accept (sb-bsd-sockets::local-socket) (sb-bsd-sockets::socket) (:int) (values :int :object) "{
        struct sockaddr_un sockaddr;
        socklen_t addr_len = (socklen_t)sizeof(struct sockaddr_un);
        int new_fd;
	ecl_disable_interrupts();
	new_fd = accept(#0, (struct sockaddr *)&sockaddr, &addr_len);
	ecl_enable_interrupts();
	@(return 0) = new_fd;
	@(return 1) = (new_fd == -1) ? ECL_NIL : make_base_string_copy(sockaddr.sun_path);
}" "accept" class-of :type sb-bsd-sockets::socket-type :protocol sb-bsd-sockets::socket-protocol :descriptor make-instance #Y(nil nil nil (24 45 12 26 15 26 13 0 19 1 21 6 1 12 15 39 15 40 1 41 6 4 12 19 2 30 47 1 25 45 24 13 0 9 -1 19 2 20 39 8 15 42 19 1 32 38 34 10 2 16 43 12 14 44 13 2 19 1 45 12 14 46 13 2 19 1 47 12 14 48 13 0 19 7 49 12 13 1 72 2 43 2 29) #28# #1# 0) sb-bsd-sockets::socket-connect (sb-bsd-sockets::local-socket) (sb-bsd-sockets::socket &rest sb-bsd-sockets::address) (= 1 (length sb-bsd-sockets::address)) (sb-bsd-sockets::address) "Socket-connect needs two parameters for local sockets." #:g25021 sb-bsd-sockets::path (:int :int :cstring) "
{
        struct sockaddr_un sockaddr;
	int output;
##ifdef BSD
        sockaddr.sun_len = sizeof(struct sockaddr_un);
##endif
        sockaddr.sun_family = #1;
        strncpy(sockaddr.sun_path,#2,sizeof(sockaddr.sun_path));
	sockaddr.sun_path[sizeof(sockaddr.sun_path)-1] = '0';

	ecl_disable_interrupts();
	output = connect(#0,(struct sockaddr*)&sockaddr, sizeof(struct sockaddr_un));
	ecl_enable_interrupts();

        @(return) = output;
}" "connect" #Y(nil nil nil (24 45 12 27 45 13 38 23 15 54 15 55 10 0 6 1 12 15 56 19 4 17 45 57 10 0 51 1 43 1 9 1 10 0 16 19 12 19 2 20 76 40 -34 10 0 4 12 13 1 19 1 21 12 13 1 19 1 22 12 46 23 46 24 46 58 9 -1 15 26 13 1 13 2 10 0 6 3 12 15 59 15 28 1 60 6 4 12 19 2 30 12 19 2 20 73 39 6 15 61 19 1 32 43 3 29) #28# #1# 0) sb-bsd-sockets::socket-peername (sb-bsd-sockets::local-socket) (sb-bsd-sockets::socket) (:int) "
{
        struct sockaddr_un name;
        socklen_t len = sizeof(struct sockaddr_un);
        int ret;

	ecl_disable_interrupts();
	ret = getpeername(#0,(struct sockaddr*)&name,&len);
	ecl_enable_interrupts();

        if (ret == 0) {
                @(return) = make_base_string_copy(name.sun_path);
        } else {
                @(return) = ECL_NIL;
        }
}" sb-bsd-sockets::peer "getpeername" #Y(nil nil nil (24 45 12 26 13 0 19 1 21 45 24 15 26 10 0 6 1 12 15 66 15 34 1 67 6 4 12 19 2 30 45 68 10 0 39 6 10 0 73 38 6 15 69 19 1 32 43 2 29) #28# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 11 19 6 15 29) #29=#A(t (16) (sb-bsd-sockets::non-blocking-mode (sb-bsd-sockets::socket) (sb-bsd-sockets::socket) sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::fd #2# (:int) :int "fcntl(#0,F_GETFL,NULL)&O_NONBLOCK" :one-liner t error zerop #Y(nil nil nil (24 45 3 26 13 0 19 1 4 45 5 15 6 10 0 6 1 12 15 7 15 8 15 9 14 10 11 11 6 6 12 19 2 12 16 13 76 73 43 1 29) #29# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 16 12 14 17 19 6 18 29) #30=#A(t (19) ((setf sb-bsd-sockets::non-blocking-mode) (t sb-bsd-sockets::socket) (sb-bsd-sockets::non-blocking-p sb-bsd-sockets::socket) sb-bsd-sockets::non-blocking-p sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::nblock sb-bsd-sockets::fd #2# (:int :int) :int "
{
        int oldflags = fcntl(#0,F_GETFL,NULL);
        int newflags = (oldflags & ~O_NONBLOCK) |
                       (#1 ? O_NONBLOCK : 0);
	ecl_disable_interrupts();
        @(return) = fcntl(#0,F_SETFL,newflags);
	ecl_enable_interrupts();
}" error = "fcntl" sb-bsd-sockets::socket-error #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 10 1 39 6 8 1 73 38 4 8 0 73 12 46 6 46 7 9 -1 15 8 13 0 10 1 6 2 12 15 9 15 10 1 11 6 4 12 19 2 12 12 19 2 13 39 8 15 14 19 1 15 38 4 10 3 73 43 2 29) #30# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #31=#A(t (11) (sb-bsd-sockets::dup sb-bsd-sockets::fd #2# (:int) :int "dup(#0)" :one-liner t error #Y(sb-bsd-sockets::dup nil nil (24 45 1 26 15 2 10 0 6 1 12 15 3 15 4 15 5 14 6 11 7 6 6 12 19 2 8 29) #31# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 37 12 19 2 38 1 0 73 29) #32=#A(t (39) (sb-bsd-sockets::make-stream-from-fd sb-bsd-sockets::fd sb-bsd-sockets::mode (nil :name :external-format :element-type :buffering) sb-bsd-sockets::buffering sb-bsd-sockets::element-type :default sb-bsd-sockets::external-format "FD-STREAM" sb-bsd-sockets::name (stringp sb-bsd-sockets::name) (sb-bsd-sockets::name) "name must be a string." si::assert-failure #:g25024 stringp #:g25025 :input #2# :int "ecl_smm_input" :one-liner t error :output "ecl_smm_output" :input-output "ecl_smm_io" (:input :output :input-output) si::ecase-error sb-bsd-sockets::smm-mode integer subtypep (t :int :int t t) "
ecl_make_stream_from_fd(#0,#1,(enum ecl_smmode)#2,
			ecl_normalize_stream_element_type(#3),
                        0,#4)" stream si::set-buffering-mode #Y(sb-bsd-sockets::make-stream-from-fd nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 22 40 2 77 46 5 22 40 3 14 6 46 7 22 40 3 15 8 46 9 38 23 15 10 15 11 10 0 6 1 12 15 12 19 4 13 45 14 10 0 51 1 43 1 10 0 16 15 76 40 -28 10 4 45 16 10 0 42 17 21 15 18 77 77 15 19 15 20 14 21 11 22 6 6 12 19 2 23 38 54 42 24 21 15 18 77 77 15 19 15 25 14 21 11 22 6 6 12 19 2 23 38 31 42 26 21 15 18 77 77 15 19 15 27 14 21 11 22 6 6 12 19 2 23 38 8 13 0 15 28 19 2 29 43 1 45 30 13 3 15 31 19 2 32 76 39 3 10 2 45 7 15 18 13 2 13 7 13 1 13 4 10 0 6 5 12 15 33 15 22 15 34 14 21 11 22 6 6 12 19 2 23 45 35 10 6 39 7 13 0 10 6 17 36 10 0 73 43 3 29) #32# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #33=#A(t (11) (sb-bsd-sockets::auto-close-two-way-stream stream #2# (t) :void "(#0)->stream.flags |= ECL_STREAM_CLOSE_COMPONENTS" :one-liner t error #Y(sb-bsd-sockets::auto-close-two-way-stream nil nil (24 45 1 26 15 2 10 0 6 1 12 15 3 15 4 15 5 14 6 11 7 6 6 12 19 2 8 29) #33# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 1 0 73 29) #34=#A(t (24) (sb-bsd-sockets::socket-make-stream-inner sb-bsd-sockets::fd sb-bsd-sockets::input sb-bsd-sockets::output sb-bsd-sockets::buffering sb-bsd-sockets::element-type sb-bsd-sockets::external-format sb-bsd-sockets::dup t sb-bsd-sockets::in sb-bsd-sockets::out make-two-way-stream stream sb-bsd-sockets::auto-close-two-way-stream :input :buffering :element-type :external-format sb-bsd-sockets::make-stream-from-fd :output "SOCKET-MAKE-STREAM: at least one of :INPUT or :OUTPUT has to be true." error #Y(sb-bsd-sockets::socket-make-stream-inner nil nil (24 45 1 24 45 2 24 45 3 24 45 4 24 45 5 24 45 6 26 10 4 39 3 10 3 39 57 13 5 19 1 7 12 14 8 77 13 2 13 1 13 0 19 6 0 45 9 13 6 77 14 8 13 3 13 2 13 1 19 6 0 45 10 13 1 10 0 17 11 45 12 13 0 19 1 13 10 0 73 43 3 38 56 10 4 39 22 13 5 14 14 14 15 13 2 14 16 13 1 14 17 13 0 19 8 18 38 31 10 3 39 22 13 5 14 19 14 15 13 2 14 16 13 1 14 17 13 0 19 8 18 38 6 15 20 19 1 21 29) #34# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 25 12 14 18 19 6 26 29) #35=#A(t (27) (sb-bsd-sockets::socket-make-stream (sb-bsd-sockets::socket) (sb-bsd-sockets::socket &key (sb-bsd-sockets::input nil sb-bsd-sockets::input-p) (sb-bsd-sockets::output nil sb-bsd-sockets::output-p) (sb-bsd-sockets::buffering :full) (sb-bsd-sockets::element-type 'base-char) (sb-bsd-sockets::external-format :default)) sb-bsd-sockets::socket (t :external-format :element-type :buffering :output :input) sb-bsd-sockets::input-p sb-bsd-sockets::input sb-bsd-sockets::output-p sb-bsd-sockets::output :full sb-bsd-sockets::buffering base-char sb-bsd-sockets::element-type :default sb-bsd-sockets::external-format stream slot-boundp slot-value t sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::socket-make-stream-inner #:g25047 #:g25048 #:g25049 (setf slot-value) #Y(nil nil nil (24 45 3 28 4 22 40 3 77 75 45 5 46 6 22 40 3 77 75 45 7 46 8 22 40 3 14 9 46 10 22 40 3 15 11 46 12 22 40 3 14 13 46 14 13 7 15 15 19 2 16 39 8 13 7 15 15 19 2 17 45 15 10 0 76 39 65 10 7 40 3 10 5 76 39 9 11 18 51 6 11 18 51 4 13 8 19 1 19 12 13 6 13 4 13 3 13 2 13 1 19 6 20 51 0 10 8 45 21 1 15 45 22 10 2 45 23 13 0 13 2 13 1 33 24 18 3 43 1 43 2 10 0 73 43 1 29) #35# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #36=#A(t (8) (ext::stream-fd (sb-bsd-sockets::socket) (sb-bsd-sockets::socket) sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #Y(nil nil nil (24 45 3 26 13 0 19 1 4 29) #36# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 19 12 1 20 7 3 12 15 21 15 22 1 23 6 4 12 14 24 1 25 6 2 12 19 4 26 1 0 73 29) #37=#A(t (27) (sb-bsd-sockets::socket-error (error) :initfunction sb-bsd-sockets::c sb-bsd-sockets::s sb-bsd-sockets::socket-error-errno sb-bsd-sockets::num #38="Socket error in \"~A\": ~A (~A)" sb-bsd-sockets::socket-error-syscall sb-bsd-sockets::socket-error-symbol #2# #39=(:int) :cstring #40="strerror(#0)" :one-liner t error format #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 45 6 13 1 15 7 13 2 19 1 8 12 13 2 19 1 9 73 40 6 13 2 19 1 5 12 15 10 10 0 6 1 12 15 11 15 12 15 13 14 14 11 15 6 6 12 19 2 16 12 19 5 17 43 1 29) #37# #1# 0) #Y(nil nil nil (26 34 18 73 29) #37# #1# 0) (:initform (lambda (sb-bsd-sockets::c sb-bsd-sockets::s) (let ((sb-bsd-sockets::num (sb-bsd-sockets::socket-error-errno sb-bsd-sockets::c))) (format sb-bsd-sockets::s #38# (sb-bsd-sockets::socket-error-syscall sb-bsd-sockets::c) (or (sb-bsd-sockets::socket-error-symbol sb-bsd-sockets::c) (sb-bsd-sockets::socket-error-errno sb-bsd-sockets::c)) (ffi::c-inline (sb-bsd-sockets::num) #39# :cstring #40# :one-liner t)))) :name si::report-function) (:readers (sb-bsd-sockets::socket-error-errno) :initargs (:errno) :initform nil :name sb-bsd-sockets::errno) (:readers (sb-bsd-sockets::socket-error-symbol) :initargs (:symbol) :initform nil :name symbol) (:readers (sb-bsd-sockets::socket-error-syscall) :initargs (:syscall) :initform "outer space" :name sb-bsd-sockets::syscall) :documentation "Common base class of socket related conditions." clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 14 23 9 3 19 4 24 1 0 73 29) #41=#A(t (25) (sb-bsd-sockets::define-socket-condition #:g25051 #:g25050 #:g25052 si::dm-too-few-arguments symbol sb-bsd-sockets::name si::dm-too-many-arguments let defconstant sb-bsd-sockets::c-constant symbol-name define-condition #42=(sb-bsd-sockets::socket-error) :reader sb-bsd-sockets::socket-error-symbol :initform quote export push cons sb-bsd-sockets::*conditions-for-errno* #Y(sb-bsd-sockets::define-socket-condition nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 39 6 13 4 19 1 7 15 8 77 15 9 13 1 15 10 10 1 16 11 6 2 6 3 12 15 12 13 0 15 13 15 5 14 14 15 15 14 16 15 17 10 1 6 2 6 5 6 1 6 4 12 15 18 15 17 10 0 6 2 6 2 12 15 19 15 20 13 1 15 17 10 0 6 2 6 3 12 1 21 6 3 6 6 73 29) #41# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 75 52 0 1 0 73 29) #A(t (2) (sb-bsd-sockets::*conditions-for-errno* si::*make-special)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::eaddrinuse #2# :int "EADDRINUSE" :one-liner t error si::*make-constant sb-bsd-sockets::address-in-use-error #42# ((:initform 'sb-bsd-sockets::eaddrinuse :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::eagain #2# :int "EAGAIN" :one-liner t error si::*make-constant sb-bsd-sockets::interrupted-error #42# ((:initform 'sb-bsd-sockets::eagain :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::ebadf #2# :int "EBADF" :one-liner t error si::*make-constant sb-bsd-sockets::bad-file-descriptor-error #42# ((:initform 'sb-bsd-sockets::ebadf :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::econnrefused #2# :int "ECONNREFUSED" :one-liner t error si::*make-constant sb-bsd-sockets::connection-refused-error #42# ((:initform 'sb-bsd-sockets::econnrefused :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::etimedout #2# :int "ETIMEDOUT" :one-liner t error si::*make-constant sb-bsd-sockets::operation-timeout-error #42# ((:initform 'sb-bsd-sockets::etimedout :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::eintr #2# :int "EINTR" :one-liner t error si::*make-constant sb-bsd-sockets::interrupted-error #42# ((:initform 'sb-bsd-sockets::eintr :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::einval #2# :int "EINVAL" :one-liner t error si::*make-constant sb-bsd-sockets::invalid-argument-error #42# ((:initform 'sb-bsd-sockets::einval :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::enobufs #2# :int "ENOBUFS" :one-liner t error si::*make-constant sb-bsd-sockets::no-buffers-error #42# ((:initform 'sb-bsd-sockets::enobufs :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::enomem #2# :int "ENOMEM" :one-liner t error si::*make-constant sb-bsd-sockets::out-of-memory-error #42# ((:initform 'sb-bsd-sockets::enomem :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::eopnotsupp #2# :int "EOPNOTSUPP" :one-liner t error si::*make-constant sb-bsd-sockets::operation-not-supported-error #42# ((:initform 'sb-bsd-sockets::eopnotsupp :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::eperm #2# :int "EPERM" :one-liner t error si::*make-constant sb-bsd-sockets::operation-not-permitted-error #42# ((:initform 'sb-bsd-sockets::eperm :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::eprotonosupport #2# :int "EPROTONOSUPPORT" :one-liner t error si::*make-constant sb-bsd-sockets::protocol-not-supported-error #42# ((:initform 'sb-bsd-sockets::eprotonosupport :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::esocktnosupport #2# :int "ESOCKTNOSUPPORT" :one-liner t error si::*make-constant sb-bsd-sockets::socket-type-not-supported-error #42# ((:initform 'sb-bsd-sockets::esocktnosupport :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 15 8 19 1 12 14 0 1 8 3 12 11 13 3 52 13 73 29) #A(t (14) (sb-bsd-sockets::enetunreach #2# :int "ENETUNREACH" :one-liner t error si::*make-constant sb-bsd-sockets::network-unreachable-error #42# ((:initform 'sb-bsd-sockets::enetunreach :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) clos::load-defclass export sb-bsd-sockets::*conditions-for-errno*)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #43=#A(t (9) (sb-bsd-sockets::condition-for-errno sb-bsd-sockets::err sb-bsd-sockets::*conditions-for-errno* :test eql assoc sb-bsd-sockets::socket-error #Y(sb-bsd-sockets::condition-for-errno nil nil (24 45 1 26 13 0 14 2 14 3 33 4 12 19 4 5 5 73 40 4 1 6 73 29) #43# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #44=#A(t (15) (sb-bsd-sockets::socket-error sb-bsd-sockets::where #2# :int "errno" :one-liner t error sb-bsd-sockets::errno sb-bsd-sockets::condition-for-errno condition :errno :syscall #Y(sb-bsd-sockets::socket-error nil nil (24 45 1 26 15 2 77 77 15 3 15 4 14 5 11 6 6 6 12 19 2 7 45 8 13 0 19 1 9 45 10 13 0 14 11 13 1 14 12 13 2 19 5 7 43 2 29) #44# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 1 0 73 29) #A(t (3) (sb-bsd-sockets::*name-service-errno* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 1 0 73 29) #45=#A(t (18) (sb-bsd-sockets::name-service-error sb-bsd-sockets::where sb-bsd-sockets::get-name-service-errno sb-bsd-sockets::*name-service-errno* #2# :int "NETDB_INTERNAL" :one-liner t error = sb-bsd-sockets::socket-error sb-bsd-sockets::condition-for-name-service-errno condition :errno :syscall #Y(sb-bsd-sockets::name-service-error nil nil (24 45 1 26 19 0 2 14 3 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 19 2 10 39 8 13 0 19 1 11 38 23 14 3 19 1 12 45 13 13 0 14 14 14 3 14 15 13 1 19 5 9 43 1 29) #45# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 13 12 1 14 7 3 12 15 15 15 16 1 17 6 4 12 77 19 4 18 1 0 73 29) #46=#A(t (19) (sb-bsd-sockets::name-service-error (condition) :initfunction sb-bsd-sockets::c sb-bsd-sockets::s sb-bsd-sockets::name-service-error-errno sb-bsd-sockets::num #47="Name service error in \"~A\": ~A (~A)" sb-bsd-sockets::name-service-error-syscall sb-bsd-sockets::name-service-error-symbol sb-bsd-sockets::get-name-service-error-message format #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 45 6 13 1 15 7 13 2 19 1 8 12 13 2 19 1 9 73 40 6 13 2 19 1 5 12 13 0 19 1 10 12 19 5 11 43 1 29) #46# #1# 0) #Y(nil nil nil (26 34 12 73 29) #46# #1# 0) (:initform (lambda (sb-bsd-sockets::c sb-bsd-sockets::s) (let ((sb-bsd-sockets::num (sb-bsd-sockets::name-service-error-errno sb-bsd-sockets::c))) (format sb-bsd-sockets::s #47# (sb-bsd-sockets::name-service-error-syscall sb-bsd-sockets::c) (or (sb-bsd-sockets::name-service-error-symbol sb-bsd-sockets::c) (sb-bsd-sockets::name-service-error-errno sb-bsd-sockets::c)) (sb-bsd-sockets::get-name-service-error-message sb-bsd-sockets::num)))) :name si::report-function) (:readers (sb-bsd-sockets::name-service-error-errno) :initargs (:errno) :initform nil :name sb-bsd-sockets::errno) (:readers (sb-bsd-sockets::name-service-error-symbol) :initargs (:symbol) :initform nil :name symbol) (:readers (sb-bsd-sockets::name-service-error-syscall) :initargs (:syscall) :initform "an unknown location" :name sb-bsd-sockets::syscall) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 14 23 9 3 19 4 24 1 0 73 29) #48=#A(t (25) (sb-bsd-sockets::define-name-service-condition #:g25068 #:g25067 #:g25069 si::dm-too-few-arguments symbol sb-bsd-sockets::name si::dm-too-many-arguments let defconstant sb-bsd-sockets::c-constant symbol-name define-condition #49=(sb-bsd-sockets::name-service-error) :reader sb-bsd-sockets::name-service-error-symbol :initform quote push cons sb-bsd-sockets::*conditions-for-name-service-errno* export #Y(sb-bsd-sockets::define-name-service-condition nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 39 6 13 4 19 1 7 15 8 77 15 9 13 1 15 10 10 1 16 11 6 2 6 3 12 15 12 13 0 15 13 15 5 14 14 15 15 14 16 15 17 10 1 6 2 6 5 6 1 6 4 12 15 18 15 19 13 1 15 17 10 0 6 2 6 3 12 1 20 6 3 12 15 21 15 17 10 1 6 2 6 2 6 6 73 29) #48# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 75 52 0 1 0 73 29) #A(t (2) (sb-bsd-sockets::*conditions-for-name-service-errno* si::*make-special)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 14 0 1 8 3 12 11 12 3 52 12 15 0 19 1 13 29) #A(t (14) (sb-bsd-sockets::netdb_internal #2# :int "NETDB_INTERNAL" :one-liner t error si::*make-constant sb-bsd-sockets::netdb-internal-error #49# ((:initform 'sb-bsd-sockets::netdb_internal :readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) clos::load-defclass sb-bsd-sockets::*conditions-for-name-service-errno* export)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 14 0 1 8 3 12 11 12 3 52 12 15 0 19 1 13 29) #A(t (14) (sb-bsd-sockets::netdb_success #2# :int "NETDB_SUCCESS" :one-liner t error si::*make-constant sb-bsd-sockets::netdb-success-error #49# ((:initform 'sb-bsd-sockets::netdb_success :readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) clos::load-defclass sb-bsd-sockets::*conditions-for-name-service-errno* export)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 14 0 1 8 3 12 11 12 3 52 12 15 0 19 1 13 29) #A(t (14) (sb-bsd-sockets::host_not_found #2# :int "HOST_NOT_FOUND" :one-liner t error si::*make-constant sb-bsd-sockets::host-not-found-error #49# ((:initform 'sb-bsd-sockets::host_not_found :readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) clos::load-defclass sb-bsd-sockets::*conditions-for-name-service-errno* export)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 14 0 1 8 3 12 11 12 3 52 12 15 0 19 1 13 29) #A(t (14) (sb-bsd-sockets::try_again #2# :int "TRY_AGAIN" :one-liner t error si::*make-constant sb-bsd-sockets::try-again-error #49# ((:initform 'sb-bsd-sockets::try_again :readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) clos::load-defclass sb-bsd-sockets::*conditions-for-name-service-errno* export)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 14 0 1 8 3 12 11 12 3 52 12 15 0 19 1 13 29) #A(t (14) (sb-bsd-sockets::no_recovery #2# :int "NO_RECOVERY" :one-liner t error si::*make-constant sb-bsd-sockets::no-recovery-error #49# ((:initform 'sb-bsd-sockets::no_recovery :readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) clos::load-defclass sb-bsd-sockets::*conditions-for-name-service-errno* export)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 15 8 15 9 15 10 77 19 4 11 14 0 1 8 3 12 11 12 3 52 12 15 0 19 1 13 29) #A(t (14) (sb-bsd-sockets::no_address #2# :int "NO_ADDRESS" :one-liner t error si::*make-constant sb-bsd-sockets::no-address-error #49# ((:initform 'sb-bsd-sockets::no_address :readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) clos::load-defclass sb-bsd-sockets::*conditions-for-name-service-errno* export)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #50=#A(t (9) (sb-bsd-sockets::condition-for-name-service-errno sb-bsd-sockets::err sb-bsd-sockets::*conditions-for-name-service-errno* :test eql assoc sb-bsd-sockets::name-service #Y(sb-bsd-sockets::condition-for-name-service-errno nil nil (24 45 1 26 13 0 14 2 14 3 33 4 12 19 4 5 5 73 40 4 1 6 73 29) #50# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #51=#A(t (10) (sb-bsd-sockets::get-name-service-errno #2# :int "h_errno" :one-liner t error sb-bsd-sockets::*name-service-errno* #Y(sb-bsd-sockets::get-name-service-errno nil nil (26 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 52 7 73 29) #51# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #52=#A(t (11) (sb-bsd-sockets::get-name-service-error-message sb-bsd-sockets::num #2# (:int) :cstring "strerror(#0)" :one-liner t error #Y(sb-bsd-sockets::get-name-service-error-message nil nil (24 45 1 26 15 2 10 0 6 1 12 15 3 15 4 15 5 14 6 11 7 6 6 12 19 2 8 29) #52# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #53=#A(t (16) (sb-bsd-sockets::get-sockopt-int sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const #2# (:int :int :int) t "{
        int sockopt, ret;
        socklen_t socklen = sizeof(int);

	ecl_disable_interrupts();
	ret = getsockopt(#0,#1,#2,wincoerce(char*,&sockopt),&socklen);
	ecl_enable_interrupts();

        @(return) = (ret == 0) ? ecl_make_integer(sockopt) : ECL_NIL;
}" error sb-bsd-sockets::ret "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::get-sockopt-int nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 2 13 1 10 0 6 3 12 15 5 15 6 1 7 6 4 12 19 2 8 45 9 10 0 39 6 10 0 73 38 25 15 10 15 4 77 77 15 11 15 12 14 13 11 6 6 6 12 19 2 8 12 19 2 8 43 1 29) #53# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #54=#A(t (17) (sb-bsd-sockets::get-sockopt-bool sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const #2# (:int :int :int) t "{
        int sockopt, ret;
        socklen_t socklen = sizeof(int);

	ecl_disable_interrupts();
	ret = getsockopt(#0,#1,#2,wincoerce(char*,&sockopt),&socklen);
	ecl_enable_interrupts();

        @(return) = (ret == 0) ? ecl_make_integer(sockopt) : ECL_NIL;
}" error sb-bsd-sockets::ret /= "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::get-sockopt-bool nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 2 13 1 10 0 6 3 12 15 5 15 6 1 7 6 4 12 19 2 8 45 9 10 0 39 10 13 0 9 0 19 2 10 38 25 15 11 15 4 77 77 15 12 15 13 14 14 11 6 6 6 12 19 2 8 12 19 2 8 43 1 29) #54# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #55=#A(t (16) (sb-bsd-sockets::get-sockopt-timeval sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const #2# (:int :int :int) t "{
	struct timeval tv;
        socklen_t socklen = sizeof(struct timeval);
        int ret;

	ecl_disable_interrupts();
	ret = getsockopt(#0,#1,#2,wincoerce(char*,&tv),&socklen);
	ecl_enable_interrupts();

        @(return) = (ret == 0) ? ecl_make_doublefloat((double)tv.tv_sec
					+ ((double)tv.tv_usec) / 1000000.0) : ECL_NIL;
}" error sb-bsd-sockets::ret "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::get-sockopt-timeval nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 2 13 1 10 0 6 3 12 15 5 15 6 1 7 6 4 12 19 2 8 45 9 10 0 39 6 10 0 73 38 25 15 10 15 4 77 77 15 11 15 12 14 13 11 6 6 6 12 19 2 8 12 19 2 8 43 1 29) #55# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #56=#A(t (16) (sb-bsd-sockets::get-sockopt-linger sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const #2# (:int :int :int) t "{
	struct linger sockopt;
	socklen_t socklen = sizeof(struct linger);
	int ret;

	ecl_disable_interrupts();
	ret = getsockopt(#0,#1,#2,wincoerce(char*,&sockopt),&socklen);
	ecl_enable_interrupts();

	@(return) = (ret == 0) ? ecl_make_integer((sockopt.l_onoff != 0) ? sockopt.l_linger : 0) : ECL_NIL;
}" error sb-bsd-sockets::ret "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::get-sockopt-linger nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 2 13 1 10 0 6 3 12 15 5 15 6 1 7 6 4 12 19 2 8 45 9 10 0 39 6 10 0 73 38 25 15 10 15 4 77 77 15 11 15 12 14 13 11 6 6 6 12 19 2 8 12 19 2 8 43 1 29) #56# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #57=#A(t (17) (sb-bsd-sockets::set-sockopt-int sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const sb-bsd-sockets::value #2# (:int :int :int :int) t "{
        int sockopt = #3;
        int ret;

	ecl_disable_interrupts();
	ret = setsockopt(#0,#1,#2,wincoerce(char *,&sockopt),sizeof(int));
	ecl_enable_interrupts();

        @(return) = (ret == 0) ? ECL_T : ECL_NIL;
}" error sb-bsd-sockets::ret "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::set-sockopt-int nil nil (24 45 1 24 45 2 24 45 3 24 45 4 26 15 5 13 3 13 2 13 1 10 0 6 4 12 15 6 15 7 1 8 6 4 12 19 2 9 45 10 10 0 39 6 10 1 73 38 25 15 11 15 5 77 77 15 12 15 13 14 14 11 7 6 6 12 19 2 9 12 19 2 9 43 1 29) #57# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #58=#A(t (17) (sb-bsd-sockets::set-sockopt-bool sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const sb-bsd-sockets::value #2# (:int :int :int :object) t "{
        int sockopt = (#3 == ECL_NIL) ? 0 : 1;
        int ret;

	ecl_disable_interrupts();
	ret = setsockopt(#0,#1,#2,wincoerce(char *,&sockopt),sizeof(int));
	ecl_enable_interrupts();

        @(return) = (ret == 0) ? ECL_T : ECL_NIL;
}" error sb-bsd-sockets::ret "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::set-sockopt-bool nil nil (24 45 1 24 45 2 24 45 3 24 45 4 26 15 5 13 3 13 2 13 1 10 0 6 4 12 15 6 15 7 1 8 6 4 12 19 2 9 45 10 10 0 39 6 10 1 73 38 25 15 11 15 5 77 77 15 12 15 13 14 14 11 7 6 6 12 19 2 9 12 19 2 9 43 1 29) #58# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #59=#A(t (17) (sb-bsd-sockets::set-sockopt-timeval sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const sb-bsd-sockets::value #2# (:int :int :int :double) t "{
	struct timeval tv;
	double tmp = #3;
	int ret;

	ecl_disable_interrupts();
	tv.tv_sec = (int)tmp;
	tv.tv_usec = (int)((tmp-floor(tmp))*1000000.0);
        ret = setsockopt(#0,#1,#2,&tv,sizeof(struct timeval));
	ecl_enable_interrupts();

        @(return) = (ret == 0) ? ECL_T : ECL_NIL;
}" error sb-bsd-sockets::ret "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::set-sockopt-timeval nil nil (24 45 1 24 45 2 24 45 3 24 45 4 26 15 5 13 3 13 2 13 1 10 0 6 4 12 15 6 15 7 1 8 6 4 12 19 2 9 45 10 10 0 39 6 10 1 73 38 25 15 11 15 5 77 77 15 12 15 13 14 14 11 7 6 6 12 19 2 9 12 19 2 9 43 1 29) #59# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #60=#A(t (17) (sb-bsd-sockets::set-sockopt-linger sb-bsd-sockets::fd sb-bsd-sockets::level sb-bsd-sockets::const sb-bsd-sockets::value #2# (:int :int :int :int) t "{
	struct linger sockopt = {0, 0};
	int value = #3;
	int ret;

	if (value > 0) {
		sockopt.l_onoff = 1;
		sockopt.l_linger = value;
	}

	ecl_disable_interrupts();
	ret = setsockopt(#0,#1,#2,wincoerce(char *,&sockopt),
			 sizeof(struct linger));
	ecl_enable_interrupts();

	@(return) = (ret == 0) ? ECL_T : ECL_NIL;
}" error sb-bsd-sockets::ret "Sockopt error: ~A" :cstring "strerror(errno)" :one-liner #Y(sb-bsd-sockets::set-sockopt-linger nil nil (24 45 1 24 45 2 24 45 3 24 45 4 26 15 5 13 3 13 2 13 1 10 0 6 4 12 15 6 15 7 1 8 6 4 12 19 2 9 45 10 10 0 39 6 10 1 73 38 25 15 11 15 5 77 77 15 12 15 13 14 14 11 7 6 6 12 19 2 9 12 19 2 9 43 1 29) #60# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 26 12 14 27 9 6 19 4 28 1 0 73 29) #61=#A(t (29) (sb-bsd-sockets::define-sockopt #:g25082 #:g25081 #:g25083 si::dm-too-few-arguments sb-bsd-sockets::name sb-bsd-sockets::c-level sb-bsd-sockets::c-const type sb-bsd-sockets::read-only si::dm-too-many-arguments progn export quote defun (sb-bsd-sockets::socket) "GET-SOCKOPT-~A" format intern (sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::socket) sb-bsd-sockets::c-constant setf (sb-bsd-sockets::value sb-bsd-sockets::socket) "SET-SOCKOPT-~A" (sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::socket) sb-bsd-sockets::value #Y(sb-bsd-sockets::define-sockopt nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 76 39 6 13 4 19 1 4 10 2 4 12 10 2 5 51 2 22 45 7 10 3 76 39 6 13 5 19 1 4 10 3 4 12 10 3 5 51 3 22 45 8 10 4 39 13 10 4 4 12 10 4 5 51 4 22 38 2 75 45 9 10 5 39 6 13 7 19 1 10 15 11 15 12 15 13 10 4 6 2 6 2 12 15 14 13 4 15 15 77 15 16 13 1 19 3 17 12 19 1 18 12 15 19 15 20 10 3 6 2 12 15 20 10 2 6 2 6 4 6 4 12 10 0 76 39 49 15 14 15 21 10 4 6 2 12 15 22 77 15 23 13 1 19 3 17 12 19 1 18 12 15 24 15 20 10 3 6 2 12 15 20 10 2 6 2 12 1 25 6 5 6 4 6 1 7 4 73 29) #61# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 1 0 73 29) #62=#A(t (14) (sb-bsd-sockets::sockopt-type export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_TYPE" sb-bsd-sockets::get-sockopt-int #Y(sb-bsd-sockets::sockopt-type nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #62# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #63=#A(t (18) (sb-bsd-sockets::sockopt-receive-buffer export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_RCVBUF" sb-bsd-sockets::get-sockopt-int #Y(sb-bsd-sockets::sockopt-receive-buffer nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #63# #1# 0) si::fset #64=(setf sb-bsd-sockets::sockopt-receive-buffer) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-int #Y(#64# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #63# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #65=#A(t (18) (sb-bsd-sockets::sockopt-receive-timeout export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_RCVTIMEO" sb-bsd-sockets::get-sockopt-timeval #Y(sb-bsd-sockets::sockopt-receive-timeout nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #65# #1# 0) si::fset #66=(setf sb-bsd-sockets::sockopt-receive-timeout) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-timeval #Y(#66# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #65# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #67=#A(t (18) (sb-bsd-sockets::sockopt-send-timeout export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_SNDTIMEO" sb-bsd-sockets::get-sockopt-timeval #Y(sb-bsd-sockets::sockopt-send-timeout nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #67# #1# 0) si::fset #68=(setf sb-bsd-sockets::sockopt-send-timeout) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-timeval #Y(#68# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #67# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #69=#A(t (18) (sb-bsd-sockets::sockopt-reuse-address export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_REUSEADDR" sb-bsd-sockets::get-sockopt-bool #Y(sb-bsd-sockets::sockopt-reuse-address nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #69# #1# 0) si::fset #70=(setf sb-bsd-sockets::sockopt-reuse-address) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-bool #Y(#70# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #69# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #71=#A(t (18) (sb-bsd-sockets::sockopt-keep-alive export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_KEEPALIVE" sb-bsd-sockets::get-sockopt-bool #Y(sb-bsd-sockets::sockopt-keep-alive nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #71# #1# 0) si::fset #72=(setf sb-bsd-sockets::sockopt-keep-alive) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-bool #Y(#72# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #71# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #73=#A(t (18) (sb-bsd-sockets::sockopt-dont-route export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_DONTROUTE" sb-bsd-sockets::get-sockopt-bool #Y(sb-bsd-sockets::sockopt-dont-route nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #73# #1# 0) si::fset #74=(setf sb-bsd-sockets::sockopt-dont-route) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-bool #Y(#74# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #73# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #75=#A(t (18) (sb-bsd-sockets::sockopt-linger export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_LINGER" sb-bsd-sockets::get-sockopt-linger #Y(sb-bsd-sockets::sockopt-linger nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #75# #1# 0) si::fset #76=(setf sb-bsd-sockets::sockopt-linger) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-linger #Y(#76# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #75# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #77=#A(t (18) (sb-bsd-sockets::sockopt-reuse-port export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "SOL_SOCKET" :one-liner t error "SO_REUSEPORT" sb-bsd-sockets::get-sockopt-bool #Y(sb-bsd-sockets::sockopt-reuse-port nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #77# #1# 0) si::fset #78=(setf sb-bsd-sockets::sockopt-reuse-port) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-bool #Y(#78# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #77# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 15 0 1 12 12 19 2 13 15 14 1 17 12 19 2 13 1 14 73 29) #79=#A(t (18) (sb-bsd-sockets::sockopt-tcp-nodelay export sb-bsd-sockets::socket sb-bsd-sockets::socket-file-descriptor #2# :int "IPPROTO_TCP" :one-liner t error "TCP_NODELAY" sb-bsd-sockets::get-sockopt-bool #Y(sb-bsd-sockets::sockopt-tcp-nodelay nil nil (24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 19 3 11 29) #79# #1# 0) si::fset #80=(setf sb-bsd-sockets::sockopt-tcp-nodelay) sb-bsd-sockets::value sb-bsd-sockets::set-sockopt-bool #Y(#80# nil nil (24 45 15 24 45 2 26 13 0 19 1 3 12 15 4 77 77 15 5 15 6 14 7 11 8 6 6 12 19 2 9 12 15 4 77 77 15 5 15 10 14 7 11 8 6 6 12 19 2 9 12 13 1 19 4 16 29) #79# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) (sb-bsd-sockets::sockets provide)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) (sb-bsd-sockets::sb-bsd-sockets provide)) #1# 0))
