(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("COMMON-LISP-USER" si::select-package)) #1=#P"/Users/strobolights/dev/mecl/ecl-build-for-ios64/compile.lsp" 0) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 52 1 11 3 16 4 76 73 39 10 14 3 14 5 15 6 19 3 7 29) #A(t (8) (:asdf-unicode *features* adjoin :asdf find-package :use (:common-lisp) make-package)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#2="ASDF" si::select-package)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 19 0 0 76 39 6 14 7 19 1 8 1 9 16 10 1 9 16 11 76 39 4 75 52 9 1 12 16 10 1 12 16 11 76 39 4 75 52 12 1 13 16 10 1 13 16 11 76 39 4 75 52 13 15 14 1 19 12 19 2 6 15 20 1 24 12 19 2 6 15 25 1 32 12 14 4 9 2 19 4 6 1 33 45 34 15 35 77 19 2 36 45 37 11 9 45 38 13 2 10 0 17 39 45 40 10 2 39 3 10 0 76 73 39 84 10 2 39 3 11 13 39 12 14 41 15 42 13 1 13 3 19 4 30 31 12 46 53 61 74 76 80 88 90 103 106 124 127 15 128 14 71 77 14 72 15 129 14 130 15 131 14 132 77 14 133 15 134 14 135 15 136 32 0 18 13 10 15 52 9 10 13 39 8 13 13 11 12 3 38 3 11 12 52 12 73 43 12 43 4 29) #3=#A(t (137) (asdf::use-ecl-byte-compiler-p :ecl-bytecmp *features* member t #Y(asdf::use-ecl-byte-compiler-p nil nil (26 14 1 14 2 19 2 3 73 39 4 11 4 73 29) #3# #1# 0) si::fset :cmp require asdf::*asdf-version* si::*make-special boundp asdf::*upgraded-p* asdf::*asdf-verbose* asdf::find-symbol* asdf::s asdf::p string find-symbol #Y(asdf::find-symbol* nil nil (24 45 15 24 45 16 26 10 1 16 17 12 13 0 19 2 18 29) #3# #1# 0) asdf::strcat asdf::strings concatenate apply #Y(asdf::strcat nil nil (27 45 21 15 22 15 17 13 0 19 3 23 29) #3# #1# 0) asdf::compatfmt #:g19738 #:g19737 #:g19739 si::dm-too-few-arguments format si::dm-too-many-arguments #Y(asdf::compatfmt nil nil (24 45 26 24 45 27 26 10 1 5 45 28 10 0 76 39 6 13 2 19 1 29 10 0 4 12 10 0 5 51 0 22 45 30 10 1 39 6 13 3 19 1 31 10 0 10 0 73 29) #3# #1# 0) "2.26.6" asdf::asdf-version asdf::component find-class asdf::existing-asdf asdf::existing-version equal asdf::already-there *trace-output* "~&~@<; ~@;Upgrading ASDF ~@[from version ~A ~]to version ~A~@:>~%" symbol package (:internal :external) #Y(asdf::present-symbol-p nil nil (24 45 43 24 45 44 26 9 1 13 1 13 0 19 2 14 74 12 15 45 19 2 3 29) #3# #1# 0) asdf::l (:inherited :internal :external) si::packages-iterator #:g19743 #:g19744 reverse #Y(asdf::present-symbols nil nil (24 45 44 26 75 45 47 58 60 62 13 2 15 48 14 4 19 3 49 45 50 75 45 51 75 45 15 38 37 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 5 32 17 18 2 39 8 13 0 10 4 3 51 4 75 39 -38 43 3 63 10 0 16 52 43 1 29) #3# #1# 0) find-package asdf::u package-used-by-list #:loop-list19747 0 unuse-package delete-package #Y(asdf::unlink-package nil nil (24 45 44 26 10 0 16 54 45 55 10 0 73 39 65 13 0 13 0 32 12 18 1 12 32 7 18 2 77 10 0 16 56 12 46 57 46 16 57 58 61 2 2 29 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 3 13 1 19 2 59 35 0 0 62 43 2 10 0 16 60 43 1 29) #3# #1# 0) asdf::name asdf::nicknames asdf::use mapcar :from-end remove-duplicates asdf::previous map rename-package :nicknames :use make-package #Y(asdf::ensure-exists nil nil (24 45 62 24 45 63 24 45 64 26 33 54 12 13 2 10 1 3 12 19 2 65 12 14 66 14 4 19 3 67 45 68 77 32 13 12 10 0 5 12 19 3 69 10 0 4 45 16 10 0 39 23 13 0 13 4 13 3 19 3 70 13 0 13 2 32 8 18 2 10 0 73 38 14 13 4 14 71 13 3 14 72 13 2 19 5 73 43 1 43 1 29) #3# #1# 0) intern #Y(asdf::intern* nil nil (24 45 43 24 45 44 26 10 1 16 17 12 13 0 19 2 75 29) #3# #1# 0) asdf::sym unexport unintern #Y(asdf::remove-symbol nil nil (24 45 43 24 45 44 26 13 1 13 0 19 2 14 45 77 10 0 73 39 18 13 0 13 1 19 2 78 13 0 13 1 19 2 79 10 0 73 43 1 29) #3# #1# 0) asdf::symbols list-all-packages asdf::packages #:loop-list19751 asdf::removed #:loop-list19753 eq #Y(asdf::ensure-unintern nil nil (24 45 44 24 45 81 26 19 0 82 45 83 77 13 1 46 84 46 77 75 45 85 57 58 61 2 2 93 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 13 6 32 13 18 2 51 1 10 1 39 58 77 13 4 46 86 46 16 57 58 61 2 2 42 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 4 13 5 13 1 19 2 14 17 87 39 8 13 4 13 1 19 2 79 35 0 0 62 43 2 35 0 0 62 73 43 1 43 2 43 1 29) #3# #1# 0) shadow #Y(asdf::ensure-shadow nil nil (24 45 44 24 45 81 26 13 0 13 1 19 2 89 29) #3# #1# 0) package-use-list si::%dolist-var asdf::used package-name :test string= (:external) #:g19764 #:g19765 #:g19768 #:g19769 use-package #Y(asdf::ensure-use nil nil (24 45 44 24 45 64 26 10 1 16 91 45 92 75 45 93 38 101 10 1 4 51 0 10 0 16 94 12 13 2 14 95 15 96 19 4 3 76 39 74 13 0 19 1 59 58 60 66 13 1 15 97 14 4 19 3 49 45 98 75 45 99 75 45 77 38 41 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 0 13 7 19 2 14 17 87 39 9 13 0 13 7 32 14 18 2 75 39 -42 43 3 63 10 1 5 51 1 10 1 40 -103 43 2 10 0 16 52 45 92 75 45 93 38 87 10 1 4 51 0 58 60 67 13 1 15 97 14 4 19 3 49 45 100 75 45 101 75 45 77 38 42 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 0 13 7 19 2 14 17 87 76 39 9 13 0 13 7 32 14 18 2 75 39 -43 43 3 63 13 0 13 3 19 2 102 10 1 5 51 1 10 1 40 -89 75 73 43 2 29) #3# #1# 0) #:loop-list19771 fmakunbound #Y(asdf::ensure-fmakunbound nil nil (24 45 44 24 45 81 26 77 13 0 46 104 46 62 75 45 77 57 58 61 2 2 39 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 13 5 19 2 14 51 1 10 1 39 5 10 1 16 105 35 0 0 62 73 43 1 43 2 29) #3# #1# 0) export asdf::newly-exported-symbols asdf::bothly-exported-symbols asdf::formerly-exported-symbols #:g19783 #:g19784 string-equal #:loop-list19787 #:loop-list19790 asdf::user asdf::shadowing package-shadowing-symbols #:loop-list19792 asdf::new asdf::old #:loop-list19793 asdf::x #Y(asdf::ensure-export nil nil (24 45 44 24 45 107 26 77 77 77 46 108 46 109 46 110 58 60 74 13 5 15 97 14 4 19 3 49 45 111 75 45 112 75 45 77 38 49 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 7 14 95 15 113 19 4 3 39 10 13 0 10 5 3 51 5 38 8 13 0 10 4 3 51 4 75 39 -50 43 3 63 77 13 3 46 114 46 77 57 58 61 2 2 43 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 13 4 14 95 15 39 19 4 3 76 39 8 13 1 10 5 3 51 5 35 0 0 62 43 2 77 10 4 16 56 12 46 115 46 116 75 45 117 57 58 61 2 2 100 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 16 118 51 1 77 13 6 46 119 46 120 75 45 121 57 58 61 2 2 52 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 13 6 19 2 14 51 1 10 1 39 9 13 1 13 5 19 2 3 76 39 8 13 1 13 6 19 2 79 35 0 0 62 43 1 43 2 35 0 0 62 43 1 43 2 77 13 2 46 122 46 123 57 58 61 2 2 34 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 13 7 32 15 18 2 12 19 1 107 35 0 0 62 73 43 2 43 3 29) #3# #1# 0) (nil :redefined-functions :export :shadow :unintern :use :nicknames) asdf::redefined-functions #Y(asdf::ensure-package nil nil (24 45 62 28 125 22 40 2 77 46 63 22 40 2 77 46 64 22 40 2 77 46 79 22 40 2 77 46 89 22 40 2 77 46 107 22 40 2 77 46 126 13 6 13 5 13 4 32 15 18 3 45 16 13 0 13 4 32 13 18 2 13 0 13 3 32 12 18 2 13 0 13 2 32 9 18 2 13 0 13 1 32 10 18 2 10 0 73 43 1 29) #3# #1# 0) :asdf (:common-lisp) :export (#:defsystem #:oos #:operate #:find-system #:locate-system #:run-shell-command #:system-definition-pathname #:with-system-definitions #:search-for-system-definition #:find-component #:component-find-path #:compile-system #:load-system #:load-systems #:require-system #:test-system #:clear-system #:operation #:compile-op #:load-op #:load-source-op #:test-op #:feature #:version #:version-satisfies #:upgrade-asdf #:implementation-identifier #:implementation-type #:hostname #:input-files #:output-files #:output-file #:perform #:operation-done-p #:explain #:component #:source-file #:c-source-file #:cl-source-file #:java-source-file #:cl-source-file.cl #:cl-source-file.lsp #:static-file #:doc-file #:html-file #:text-file #:source-file-type #:module #:system #:unix-dso #:module-components #:module-components-by-name #:component-pathname #:component-relative-pathname #:component-name #:component-version #:component-parent #:component-property #:component-system #:component-depends-on #:component-encoding #:component-external-format #:system-description #:system-long-description #:system-author #:system-maintainer #:system-license #:system-licence #:system-source-file #:system-source-directory #:system-relative-pathname #:map-systems #:operation-description #:operation-on-warnings #:operation-on-failure #:component-visited-p #:*system-definition-search-functions* #:*central-registry* #:*compile-file-warnings-behaviour* #:*compile-file-failure-behaviour* #:*resolve-symlinks* #:*load-system-operation* #:*asdf-verbose* #:*verbose-out* #:asdf-version #:operation-error #:compile-failed #:compile-warned #:compile-error #:error-name #:error-pathname #:load-system-definition-error #:error-component #:error-operation #:system-definition-error #:missing-component #:missing-component-of-version #:missing-dependency #:missing-dependency-of-version #:circular-dependency #:duplicate-names #:try-recompiling #:retry #:accept #:coerce-entry-to-directory #:remove-entry-from-registry #:*encoding-detection-hook* #:*encoding-external-format-hook* #:*default-encoding* #:*utf-8-external-format* #:clear-configuration #:*output-translations-parameter* #:initialize-output-translations #:disable-output-translations #:clear-output-translations #:ensure-output-translations #:apply-output-translations #:compile-file* #:compile-file-pathname* #:enable-asdf-binary-locations-compatibility #:*default-source-registries* #:*source-registry-parameter* #:initialize-source-registry #:compute-source-registry #:clear-source-registry #:ensure-source-registry #:process-source-registry #:system-registered-p #:registered-systems #:loaded-systems #:resolve-location #:asdf-message #:user-output-translations-pathname #:system-output-translations-pathname #:user-output-translations-directory-pathname #:system-output-translations-directory-pathname #:user-source-registry #:system-source-registry #:user-source-registry-directory #:system-source-registry-directory) :shadow :unintern (#:*asdf-revision* #:around #:asdf-method-combination #:split #:make-collector #:do-dep #:do-one-dep #:resolve-relative-location-component #:resolve-absolute-location-component #:output-files-for-system-and-operation) :redefined-functions (#:perform #:explain #:output-files #:operation-done-p #:perform-with-restarts #:component-relative-pathname #:system-source-file #:operate #:find-component #:find-system #:apply-output-translations #:translate-pathname* #:resolve-location #:system-relative-pathname #:inherit-source-registry #:process-source-registry #:process-source-registry-directive #:compile-file* #:source-file-type))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (asdf::*resolve-symlinks* si::*make-special boundp t)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (asdf::*compile-file-warnings-behaviour* si::*make-special boundp :warn)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (asdf::*compile-file-failure-behaviour* si::*make-special boundp :warn)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*verbose-out* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (asdf::+asdf-methods+ si::*make-special (asdf::perform-with-restarts asdf::perform asdf::explain asdf::output-files asdf::operation-done-p))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*load-system-operation* si::*make-special boundp asdf::load-op)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*compile-op-compile-file-function* si::*make-special boundp asdf::compile-file*)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function (t) t) asdf::format-arguments asdf::format-control asdf::error-name asdf::error-pathname asdf::error-condition asdf::duplicate-names-name asdf::error-component asdf::error-operation asdf::module-components asdf::module-components-by-name asdf::circular-dependency-components asdf::condition-arguments asdf::condition-form asdf::condition-format asdf::condition-location asdf::coerce-name) (ftype (function (&optional t) (values)) asdf::initialize-source-registry) (ftype (function (t t) t) (setf asdf::module-components-by-name))) mapc)) #1# 0) #Y(si::bytecodes nil nil (75 73 29) #A(t (0) ()) #1# 0) #Y(si::bytecodes nil nil (15 0 34 15 12 14 16 9 3 19 4 17 15 18 34 23 12 14 16 9 3 19 4 17 1 18 73 29) #4=#A(t (24) (asdf::defgeneric* #:g19809 #:g19808 #:g19810 si::dm-too-few-arguments asdf::name asdf::formals rest progn fmakunbound quote symbolp declaim notinline defgeneric #Y(asdf::defgeneric* nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 45 7 15 8 15 9 15 10 10 2 6 2 6 2 12 10 2 16 11 73 39 12 15 12 15 13 10 2 6 2 6 2 73 12 15 14 13 2 13 1 10 0 7 4 6 4 73 29) #4# #1# 0) t si::fset asdf::defun* #:g19812 #:g19811 #:g19813 defun #Y(asdf::defun* nil nil (24 45 19 24 45 20 26 10 1 5 45 21 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 45 7 15 8 15 9 15 10 10 2 6 2 6 2 12 10 2 16 11 73 39 12 15 12 15 13 10 2 6 2 6 2 73 12 15 22 13 2 13 1 10 0 7 4 6 4 73 29) #4# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 1 30 12 14 31 9 2 19 4 32 1 0 73 29) #5=#A(t (33) (asdf::while-collecting #:g19815 #:g19814 #:g19816 si::dm-too-few-arguments #:g19817 #:g19818 asdf::collectors asdf::body asdf::x symbol-name gensym #Y(nil nil nil (24 45 9 26 10 0 16 10 12 19 1 11 29) #5# #1# 0) mapcar constantly asdf::initial-values asdf::vars let list flet asdf::c asdf::v (asdf::x) push (values) #Y(nil nil nil (24 45 20 24 45 21 26 13 1 15 22 15 23 15 9 10 0 6 3 12 1 24 6 4 73 29) #5# #1# 0) values reverse #Y(nil nil nil (24 45 21 26 15 27 10 0 6 2 73 29) #5# #1# 0) append #Y(asdf::while-collecting nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 45 7 10 3 45 8 34 12 12 13 1 19 2 13 12 77 19 1 14 12 13 1 19 2 13 12 46 15 46 16 15 17 33 18 12 13 0 13 1 19 3 13 12 15 19 34 25 12 13 3 13 0 19 3 13 12 13 2 15 26 34 28 12 13 0 19 2 13 7 2 6 1 12 19 2 29 7 3 6 3 73 43 2 29) #5# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 14 13 9 4 19 4 14 1 0 73 29) #6=#A(t (15) (asdf::aif #:g19820 #:g19819 #:g19821 si::dm-too-few-arguments asdf::test asdf::then asdf::else si::dm-too-many-arguments let asdf::it if #Y(asdf::aif nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 39 13 10 2 4 12 10 2 5 51 2 22 38 2 75 45 7 10 3 39 6 13 5 19 1 8 15 9 15 10 10 2 6 2 6 1 12 15 11 15 10 13 1 10 0 6 4 6 3 73 29) #6# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #7=#A(t (13) (asdf::pathname-directory-pathname fmakunbound proclaim ((notinline asdf::pathname-directory-pathname)) mapc pathname :name :type :version :defaults make-pathname #Y(asdf::pathname-directory-pathname nil nil (24 45 5 26 10 0 73 39 17 14 6 77 14 7 77 14 8 77 14 9 13 0 19 8 10 29) #7# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #8=#A(t (15) (asdf::normalize-pathname-directory-component fmakunbound proclaim ((notinline asdf::normalize-pathname-directory-component)) mapc directory stringp :absolute consp (:absolute :relative) member "~@<Unrecognized pathname directory component ~S~@:>" error #Y(asdf::normalize-pathname-directory-component nil nil (24 45 5 26 10 0 16 6 39 12 14 7 10 0 6 2 10 0 73 38 35 10 0 76 40 16 10 0 16 8 39 10 10 0 4 12 15 9 19 2 10 39 6 10 0 73 38 8 15 11 13 0 19 2 12 29) #8# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 27 12 19 2 28 1 0 73 29) #9=#A(t (29) (asdf::merge-pathname-directory-components fmakunbound proclaim ((notinline asdf::merge-pathname-directory-components)) mapc asdf::specified asdf::defaults asdf::normalize-pathname-directory-component directory #:g19825 nil :absolute :relative asdf::reldir asdf::defdir :back eq append asdf::defabs reverse asdf::defrev 0 stringp #:g19826 #:g19827 (nil :absolute :relative) si::ecase-error #Y(asdf::merge-pathname-directory-components nil nil (24 45 5 24 45 6 26 13 1 19 1 7 45 8 10 0 4 45 9 10 0 42 10 6 10 2 73 38 182 42 11 6 10 3 73 38 174 42 12 164 13 2 19 1 7 12 10 1 5 12 46 13 46 14 10 0 76 39 6 10 3 73 38 136 14 15 10 1 4 17 16 76 39 10 13 0 13 1 19 2 17 38 117 58 60 114 10 1 4 45 18 10 2 5 16 19 45 20 57 21 61 2 2 73 14 15 10 5 4 17 16 39 19 14 11 10 2 17 16 39 4 10 1 76 40 6 10 1 4 16 22 76 39 4 35 0 1 10 5 45 23 10 0 4 10 0 5 51 0 10 0 51 6 43 1 10 1 45 24 10 0 4 10 0 5 51 0 10 0 51 2 43 1 35 0 0 13 2 10 1 16 19 12 13 5 19 2 17 3 73 36 3 62 73 43 1 43 1 63 43 2 38 8 13 0 15 25 19 2 26 43 1 43 1 29) #9# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #10=#A(t (11) (asdf::make-pathname-component-logical fmakunbound proclaim ((notinline asdf::make-pathname-component-logical)) mapc asdf::x #:g19829 (eql :unspecific) typep #Y(asdf::make-pathname-component-logical nil nil (24 45 5 26 10 0 45 6 13 0 15 7 19 2 8 39 5 75 73 38 4 10 1 73 43 1 29) #10# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 18 12 19 2 19 1 0 73 29) #11=#A(t (20) (asdf::make-pathname-logical fmakunbound proclaim ((notinline asdf::make-pathname-logical)) mapc pathname asdf::host :host :directory pathname-directory asdf::make-pathname-component-logical :name pathname-name :type pathname-type :version pathname-version make-pathname #Y(asdf::make-pathname-logical nil nil (24 45 5 24 45 6 26 14 7 13 0 14 8 13 1 19 1 9 12 19 1 10 12 14 11 13 1 19 1 12 12 19 1 10 12 14 13 13 1 19 1 14 12 19 1 10 12 14 15 10 1 16 16 12 19 1 10 12 19 10 17 29) #11# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 43 12 19 2 44 1 0 73 29) #12=#A(t (45) (asdf::merge-pathnames* fmakunbound proclaim ((notinline asdf::merge-pathnames*)) mapc asdf::specified *default-pathname-defaults* asdf::defaults pathname pathname-directory asdf::normalize-pathname-directory-component directory pathname-name asdf::name pathname-type type pathname-version asdf::version asdf::p logical-pathname typep asdf::make-pathname-component-logical identity #Y(asdf::unspecific-handler nil nil (24 45 18 26 13 0 15 19 19 2 20 39 6 33 21 73 38 4 33 22 73 29) #12# #1# 0) #:g19830 :absolute pathname-host pathname-device nil :relative asdf::merge-pathname-directory-components (:absolute :relative nil) si::ecase-error asdf::unspecific-handler asdf::device asdf::host :host :device :directory :name :type :version make-pathname #Y(asdf::merge-pathnames* nil nil (24 45 5 25 40 3 14 6 46 7 26 57 0 60 235 10 2 76 39 6 10 1 73 36 0 10 1 76 39 6 10 2 73 36 0 10 2 16 8 45 5 10 2 16 8 45 7 13 1 19 1 9 12 19 1 10 45 11 13 2 19 1 12 40 6 13 1 19 1 12 45 13 13 3 19 1 14 40 6 13 2 19 1 14 45 15 10 4 16 16 40 5 10 3 16 16 45 17 31 1 23 10 4 4 45 24 10 0 42 25 26 13 7 19 1 26 12 13 7 19 1 27 12 13 5 13 7 32 1 18 1 12 72 4 38 49 41 28 4 42 29 36 13 6 19 1 26 12 13 6 19 1 27 12 13 5 13 6 19 1 9 12 19 2 30 12 13 6 32 1 18 1 12 72 4 38 8 13 0 15 31 19 2 32 43 1 47 3 33 47 2 11 47 1 34 45 35 14 36 13 0 14 37 13 1 14 38 13 2 14 39 13 3 13 7 20 1 23 12 14 40 13 3 13 6 20 1 23 12 14 41 13 3 13 5 20 1 23 12 19 12 42 43 4 43 1 43 6 63 29) #12# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #13=#A(t (17) (asdf::pathname-parent-directory-pathname fmakunbound proclaim ((notinline asdf::pathname-parent-directory-pathname)) mapc pathname :name :type :version :directory (:relative :back) pathname-directory asdf::merge-pathname-directory-components :defaults make-pathname #Y(asdf::pathname-parent-directory-pathname nil nil (24 45 5 26 10 0 73 39 31 14 6 77 14 7 77 14 8 77 14 9 15 10 13 0 19 1 11 12 19 2 12 12 14 13 13 0 19 10 14 29) #13# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 33 12 14 34 9 2 19 4 35 1 0 73 29) #14=#A(t (36) (asdf::appendf #:g19831 si::env #:g19832 si::dm-too-few-arguments si::%reference asdf::args get-setf-expansion si::getter si::setter si::stores si::vals si::vars si::v gensym #Y(nil nil nil (24 45 13 26 19 0 14 12 10 0 6 2 73 29) #14# #1# 0) mapcar si::all-vars symbolp append car let* declare :read-only first subst si::let-list si::d listp the eq cadr nreverse #Y(asdf::appendf nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 13 1 13 3 19 2 7 47 4 8 47 3 9 47 2 10 47 1 11 45 12 34 15 12 10 5 7 1 12 19 2 16 45 17 10 5 16 18 39 51 15 19 13 5 33 20 12 13 0 19 2 16 7 3 12 10 3 4 12 15 21 13 0 15 22 14 23 33 24 12 13 0 19 2 16 7 2 6 2 12 10 4 6 4 12 19 3 25 38 151 13 1 13 2 77 46 26 46 13 46 27 38 29 10 0 5 12 10 1 5 12 10 0 4 12 10 1 4 6 2 12 10 2 3 12 53 2 53 1 53 0 10 0 76 39 -32 10 6 4 12 10 10 16 28 39 9 10 10 4 12 1 29 17 30 39 20 15 29 10 10 16 31 12 15 19 13 8 10 9 7 3 6 3 38 15 15 19 13 8 33 20 12 13 3 19 2 16 7 3 6 2 12 13 3 13 2 19 2 19 7 2 51 2 15 21 10 2 16 32 12 15 22 14 23 33 24 12 13 3 19 2 16 12 13 4 19 2 19 7 2 6 2 12 10 7 6 4 73 43 3 43 1 43 5 29) #14# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 34 12 14 35 9 2 19 4 36 1 0 73 29) #15=#A(t (37) (asdf::orf #:g19833 si::env #:g19834 si::dm-too-few-arguments si::%reference asdf::args get-setf-expansion si::getter si::setter si::stores si::vals si::vars si::v gensym #Y(nil nil nil (24 45 13 26 19 0 14 12 10 0 6 2 73 29) #15# #1# 0) mapcar si::all-vars symbolp or car let* declare :read-only first subst si::let-list si::d listp the eq cadr append nreverse #Y(asdf::orf nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 13 1 13 3 19 2 7 47 4 8 47 3 9 47 2 10 47 1 11 45 12 34 15 12 10 5 7 1 12 19 2 16 45 17 10 5 16 18 39 51 15 19 13 5 33 20 12 13 0 19 2 16 7 3 12 10 3 4 12 15 21 13 0 15 22 14 23 33 24 12 13 0 19 2 16 7 2 6 2 12 10 4 6 4 12 19 3 25 38 151 13 1 13 2 77 46 26 46 13 46 27 38 29 10 0 5 12 10 1 5 12 10 0 4 12 10 1 4 6 2 12 10 2 3 12 53 2 53 1 53 0 10 0 76 39 -32 10 6 4 12 10 10 16 28 39 9 10 10 4 12 1 29 17 30 39 20 15 29 10 10 16 31 12 15 19 13 8 10 9 7 3 6 3 38 15 15 19 13 8 33 20 12 13 3 19 2 16 7 3 6 2 12 13 3 13 2 19 2 32 7 2 51 2 15 21 10 2 16 33 12 15 22 14 23 33 24 12 13 3 19 2 16 12 13 4 19 2 32 7 2 6 2 12 10 7 6 4 73 43 3 43 1 43 5 29) #15# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #16=#A(t (12) (asdf::first-char fmakunbound proclaim ((notinline asdf::first-char)) mapc asdf::s stringp length plusp char #Y(asdf::first-char nil nil (24 45 5 26 10 0 16 6 73 39 16 10 0 16 7 16 8 73 39 7 13 0 8 0 17 9 29) #16# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #17=#A(t (13) (asdf::last-char fmakunbound proclaim ((notinline asdf::last-char)) mapc asdf::s stringp length plusp 1- char #Y(asdf::last-char nil nil (24 45 5 26 10 0 16 6 73 39 20 10 0 16 7 16 8 73 39 11 13 0 10 0 16 7 16 9 17 10 29) #17# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #18=#A(t (12) (asdf::asdf-message fmakunbound proclaim ((notinline asdf::asdf-message)) mapc asdf::format-string asdf::format-args format asdf::*verbose-out* apply #Y(asdf::asdf-message nil nil (24 45 5 27 45 6 15 7 14 8 13 1 13 0 19 4 9 29) #18# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 30 12 19 2 31 1 0 73 29) #19=#A(t (32) (asdf::split-string fmakunbound proclaim ((notinline asdf::split-string)) mapc string (nil :separator :max) max (#\  #\Tab) asdf::separator length asdf::end asdf::words list char find #Y(asdf::separatorp nil nil (24 45 14 26 13 0 13 5 19 2 15 29) #19# #1# 0) subseq #Y(asdf::done nil nil (26 77 13 6 9 0 13 2 19 3 17 12 10 0 3 73 37 29) #19# #1# 0) asdf::start 0 1- >= :end :from-end t position-if 1+ #:g19849 + #Y(asdf::split-string nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 3 15 8 46 9 75 59 60 126 77 9 0 10 3 16 10 12 46 11 46 12 46 13 30 2 16 18 75 45 19 57 20 61 2 2 90 10 9 39 11 13 5 10 9 16 21 12 19 2 22 39 7 32 2 18 0 38 17 32 3 12 13 10 14 23 13 6 14 24 14 25 19 6 26 51 1 10 1 76 39 5 32 2 18 0 13 10 10 1 16 27 12 13 6 19 3 17 12 10 4 3 51 4 8 1 45 28 13 6 13 0 19 2 29 51 6 43 1 10 1 51 6 35 0 0 62 73 43 1 43 2 43 3 63 29) #19# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #20=#A(t (21) (asdf::split-name-type fmakunbound proclaim ((notinline asdf::split-name-type)) mapc asdf::filename asdf::unspecific :max :separator "." asdf::split-string #:g19853 #:g19854 si::dm-too-few-arguments asdf::name type si::dm-too-many-arguments "" equal #Y(asdf::split-name-type nil nil (24 45 5 26 75 45 6 13 1 14 7 9 2 14 8 15 9 19 5 10 45 11 10 0 45 12 10 0 76 39 6 13 1 19 1 13 10 0 4 12 10 0 5 51 0 22 45 14 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 3 10 3 45 15 10 2 39 6 13 3 19 1 16 13 1 1 17 17 18 39 9 13 5 13 4 72 2 38 7 13 1 13 0 72 2 43 4 43 1 29) #20# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 42 12 19 2 43 1 0 73 29) #21=#A(t (44) (asdf::component-name-to-pathname-components fmakunbound proclaim ((notinline asdf::component-name-to-pathname-components)) mapc asdf::s (nil :force-relative :force-directory) asdf::force-directory asdf::force-relative #:g19859 string typep si::do-check-type #\: find "~@<A portable ASDF pathname designator cannot include a #: character: ~3i~_~S~@:>" error :separator "/" asdf::split-string asdf::components last asdf::last-comp "" equal asdf::first-char #\/ "~@<Absolute pathname designator not allowed: ~3i~_~S~@:>" :absolute :relative asdf::relative asdf::x ("" ".") :test member #Y(nil nil nil (24 45 31 26 13 0 15 32 14 33 33 24 12 19 4 34 29) #21# #1# 0) remove-if :back ".." substitute "" butlast #Y(asdf::component-name-to-pathname-components nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 10 2 45 9 13 0 15 10 19 2 11 76 39 13 13 0 15 10 77 15 5 19 4 12 51 3 43 1 15 13 13 2 19 2 14 39 8 15 15 13 2 19 2 16 13 2 14 17 15 18 19 3 19 45 20 13 0 19 1 21 4 45 22 10 1 4 12 1 23 17 24 39 41 13 4 19 1 25 12 1 26 17 24 39 22 10 2 39 8 15 27 13 4 19 2 16 14 28 10 1 5 12 72 2 38 6 14 29 77 72 2 38 7 14 29 13 1 72 2 47 1 20 45 30 34 35 12 13 1 19 2 36 51 1 14 37 15 38 13 1 14 33 33 24 12 19 5 39 51 1 13 2 1 40 17 24 39 10 13 0 13 1 77 72 3 38 26 10 5 39 10 13 0 13 1 77 72 3 38 13 13 0 13 1 19 1 41 12 13 2 72 3 43 2 43 2 29) #21# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 24 12 19 2 25 1 0 73 29) #22=#A(t (26) (asdf::remove-keys fmakunbound proclaim ((notinline asdf::remove-keys)) mapc asdf::key-names asdf::args asdf::val asdf::name #:g19868 #:loop-list-head19869 #:loop-list-tail19870 0 atom #23=#:loop-desetq-temp cddr symbol-name :key :test equal member #:g19871 #:g19872 rplacd #Y(asdf::remove-keys nil nil (24 45 5 24 45 6 26 58 60 127 13 1 77 77 46 7 46 8 46 9 75 6 1 45 10 10 0 45 11 57 12 61 2 2 89 10 3 16 13 39 4 35 0 1 10 3 45 14 10 0 4 51 5 10 0 5 51 0 10 0 4 51 6 43 1 10 3 16 15 51 3 10 4 16 16 12 13 8 14 17 33 16 12 14 18 15 19 19 6 20 76 39 28 10 1 45 21 13 5 10 6 6 2 45 22 13 1 10 0 17 23 10 0 43 1 43 1 5 51 1 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 29) #22# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 20 12 19 2 21 1 0 73 29) #24=#A(t (22) (asdf::remove-keyword fmakunbound proclaim ((notinline asdf::remove-keyword)) mapc asdf::key asdf::args asdf::v asdf::k #:g19878 #:loop-list-head19879 #:loop-list-tail19880 0 atom #23# cddr eq #:g19881 #:g19882 rplacd #Y(asdf::remove-keyword nil nil (24 45 5 24 45 6 26 58 60 114 13 1 77 77 46 7 46 8 46 9 75 6 1 45 10 10 0 45 11 57 12 61 2 2 76 10 3 16 13 39 4 35 0 1 10 3 45 14 10 0 4 51 5 10 0 5 51 0 10 0 4 51 6 43 1 10 3 16 15 51 3 13 4 10 8 17 16 76 39 28 10 1 45 17 13 5 10 6 6 2 45 18 13 1 10 0 17 19 10 0 43 1 43 1 5 51 1 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 29) #24# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #25=#A(t (9) (asdf::getenv fmakunbound proclaim ((notinline asdf::getenv)) mapc asdf::x ext::getenv #Y(asdf::getenv nil nil (24 45 5 26 10 0 16 6 29) #25# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 16 12 19 2 17 1 0 73 29) #26=#A(t (18) (asdf::directory-pathname-p fmakunbound proclaim ((notinline asdf::directory-pathname-p)) mapc pathname asdf::x (nil :unspecific "") :test equal member #Y(asdf::check-one nil nil (24 45 6 26 13 0 15 7 14 8 15 9 19 4 10 29) #26# #1# 0) wild-pathname-p pathname-name pathname-type t #Y(asdf::directory-pathname-p nil nil (24 45 5 26 10 0 73 39 52 10 0 16 5 45 5 30 1 11 13 1 19 1 12 76 73 39 30 13 1 19 1 13 12 32 0 18 1 73 39 17 13 1 19 1 14 12 32 0 18 1 73 39 4 11 15 73 43 1 43 1 29) #26# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 24 12 19 2 25 1 0 73 29) #27=#A(t (26) (asdf::ensure-directory-pathname fmakunbound proclaim ((notinline asdf::ensure-directory-pathname)) mapc asdf::pathspec stringp pathname pathnamep "~@<Invalid pathname designator ~S~@:>" error wild-pathname-p "~@<Can't reliably convert wild pathname ~3i~_~S~@:>" asdf::directory-pathname-p :directory pathname-directory :relative file-namestring append :name :type :version :defaults make-pathname #Y(asdf::ensure-directory-pathname nil nil (24 45 5 26 10 0 16 6 39 11 10 0 16 7 12 19 1 0 38 88 10 0 16 8 76 39 10 15 9 13 0 19 2 10 38 72 13 0 19 1 11 39 10 15 12 13 0 19 2 10 38 56 13 0 19 1 13 39 6 10 0 73 38 44 14 14 13 0 19 1 15 73 40 6 11 16 6 1 73 12 10 0 16 17 6 1 12 19 2 18 12 14 19 77 14 20 77 14 21 77 14 22 13 0 19 10 23 29) #27# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #28=#A(t (14) (asdf::absolute-pathname-p fmakunbound proclaim ((notinline asdf::absolute-pathname-p)) mapc asdf::pathspec (or pathname string) typep :absolute pathname pathname-directory eq #Y(asdf::absolute-pathname-p nil nil (24 45 5 26 13 0 15 6 19 2 7 73 39 14 14 8 10 0 16 9 12 19 1 10 4 17 11 29) #28# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 32 12 19 2 33 1 0 73 29) #29=#A(t (34) (asdf::coerce-pathname fmakunbound proclaim ((notinline asdf::coerce-pathname)) mapc asdf::name (nil :defaults :type) type asdf::defaults #:g19884 #30=(or null pathname) typep symbol string-downcase :type :defaults string :force-directory :directory eq :force-relative t asdf::component-name-to-pathname-components asdf::filename asdf::path asdf::relative asdf::split-name-type make-pathname :name apply (#30# symbol string) si::etypecase-error #Y(asdf::coerce-pathname nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 10 2 45 9 13 0 15 10 19 2 11 39 6 10 3 73 38 152 13 0 15 12 19 2 11 39 20 13 3 19 1 13 12 14 14 13 2 14 15 13 1 19 5 0 38 124 13 0 15 16 19 2 11 39 108 13 3 14 17 13 2 11 18 17 19 12 14 20 14 21 19 5 22 47 2 23 47 1 24 45 25 13 5 11 18 17 19 40 4 10 2 76 39 7 77 77 72 2 38 18 10 5 39 9 13 2 13 5 72 2 38 6 13 2 19 1 26 47 1 7 45 5 15 27 14 18 13 2 10 3 3 12 14 28 13 0 14 14 13 1 10 6 73 39 8 14 15 10 6 6 2 73 12 19 8 29 43 2 43 3 38 8 13 0 15 30 19 2 31 43 1 29) #29# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 14 12 19 2 15 1 0 73 29) #31=#A(t (16) (asdf::merge-component-name-type fmakunbound proclaim ((notinline asdf::merge-component-name-type)) mapc asdf::name (nil :defaults :type) type asdf::defaults "Please don't use ASDF::MERGE-COMPONENT-NAME-TYPE. Use ASDF:COERCE-PATHNAME." warn :type :defaults asdf::coerce-pathname #Y(asdf::merge-component-name-type nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 15 9 19 1 10 13 2 14 11 13 1 14 12 13 0 19 5 13 29) #31# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #32=#A(t (15) (asdf::subpathname fmakunbound proclaim ((notinline asdf::subpathname)) mapc pathname asdf::subpath (nil :type) type :type asdf::coerce-pathname asdf::pathname-directory-pathname asdf::merge-pathnames* #Y(asdf::subpathname nil nil (24 45 5 24 45 6 28 7 22 40 2 77 46 8 10 2 73 39 20 13 1 14 9 13 0 19 3 10 12 13 2 19 1 11 12 19 2 12 29) #32# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #33=#A(t (10) (asdf::subpathname* pathname asdf::subpath (nil :type) type asdf::ensure-directory-pathname :type asdf::subpathname #Y(asdf::subpathname* nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 10 2 73 39 16 13 2 19 1 5 12 13 1 14 6 13 0 19 4 7 29) #33# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 17 12 19 2 18 1 0 73 29) #34=#A(t (19) (asdf::length=n-p fmakunbound proclaim ((notinline asdf::length=n-p)) mapc asdf::x asdf::n #:g19887 (integer 0 *) typep si::do-check-type asdf::l asdf::i 0 zerop consp 1- #Y(asdf::length=n-p nil nil (24 45 5 24 45 6 26 10 0 45 7 13 0 15 8 19 2 9 76 39 13 13 0 15 8 77 15 6 19 4 10 51 1 43 1 58 60 64 75 45 11 10 2 45 12 57 13 61 2 6 44 10 5 51 2 10 1 16 14 39 9 10 2 76 73 36 3 38 12 10 2 16 15 76 39 5 75 73 36 3 10 2 5 51 2 10 1 16 16 51 1 35 0 0 62 73 43 1 43 1 63 29) #34# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 18 12 19 2 19 1 0 73 29) #35=#A(t (20) (asdf::string-suffix-p fmakunbound proclaim ((notinline asdf::string-suffix-p)) mapc asdf::s asdf::suffix #:g19893 string typep si::do-check-type #:g19895 length - asdf::start <= :start1 string-equal #Y(asdf::string-suffix-p nil nil (24 45 5 24 45 6 26 10 1 45 7 13 0 15 8 19 2 9 76 39 13 13 0 15 8 77 15 5 19 4 10 51 2 43 1 10 0 45 11 13 0 15 8 19 2 9 76 39 13 13 0 15 8 77 15 6 19 4 10 51 1 43 1 10 1 16 12 12 10 0 16 12 12 19 2 13 45 14 9 0 13 0 19 2 15 73 39 12 13 2 13 1 14 16 13 0 19 4 17 43 1 29) #35# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #36=#A(t (21) (asdf::read-file-forms fmakunbound proclaim ((notinline asdf::read-file-forms)) mapc asdf::file open asdf::in asdf::eof asdf::form #:loop-list-head19899 #:loop-list-tail19900 0 read eq rplacd close :abort t #Y(asdf::read-file-forms nil nil (24 45 5 26 13 0 19 1 6 45 7 64 88 58 60 73 75 6 1 45 8 75 45 9 75 6 1 45 10 10 0 45 11 57 12 61 2 2 35 13 6 77 13 4 19 3 13 51 3 13 3 10 4 17 14 39 4 35 0 1 13 1 10 3 6 1 51 1 17 15 35 0 0 10 2 5 73 36 5 62 73 43 2 43 1 43 1 63 69 10 0 39 6 13 0 19 1 16 70 65 10 0 39 10 13 0 14 17 14 18 19 3 16 66 43 1 29) #36# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #37=#A(t (15) (asdf::pathname-root fmakunbound proclaim ((notinline asdf::pathname-root)) mapc pathname :directory (:absolute) :name :type :version :defaults make-pathname #Y(asdf::pathname-root nil nil (24 45 5 26 14 6 15 7 14 8 77 14 9 77 14 10 77 14 11 13 0 19 10 12 29) #37# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 16 12 19 2 17 1 0 73 29) #38=#A(t (18) (asdf::probe-file* fmakunbound proclaim ((notinline asdf::probe-file*)) mapc asdf::p #:g19902 null typep string parse-namestring pathname wild-pathname-p probe-file (null string pathname) si::etypecase-error #Y(asdf::probe-file* nil nil (24 45 5 26 10 0 45 6 13 0 15 7 19 2 8 39 5 75 73 38 52 13 0 15 9 19 2 8 39 12 13 1 19 1 10 12 19 1 0 38 32 13 0 15 11 19 2 8 39 16 13 1 19 1 12 76 73 39 5 10 1 16 13 38 8 13 0 15 14 19 2 15 43 1 29) #38# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 50 12 19 2 51 1 0 73 29) #39=#A(t (52) (asdf::truenamize fmakunbound proclaim ((notinline asdf::truenamize)) mapc pathname *default-pathname-defaults* asdf::defaults (or null logical-pathname) typep asdf::merge-pathnames* asdf::p logical-pathname asdf::probe-file* asdf::found asdf::absolute-pathname-p #:g19909 #:g19910 0 error si::temp #Y(nil nil nil (24 45 20 26 10 0 51 2 35 1 0 29) #39# #1# 0) si::*handler-clusters* truename condition asdf::true-defaults merge-pathnames asdf::pathname-root asdf::sofar asdf::directories :host :device :directory :relative :name pathname-name :type pathname-type :version pathname-version make-pathname #Y(asdf::solution nil nil (24 45 29 26 14 30 77 14 31 77 14 32 14 33 10 0 7 2 12 14 34 13 2 19 1 35 12 14 36 13 2 19 1 37 12 14 38 10 2 16 39 12 19 12 40 12 13 1 19 2 10 29) #39# #1# 0) pathname-directory asdf::normalize-pathname-directory-component directory #:loop-list19913 asdf::component rest asdf::more atom #Y(asdf::truenamize nil nil (24 45 5 25 40 3 14 6 46 7 26 58 60 325 13 2 15 8 19 2 9 39 6 10 2 73 36 0 13 2 13 1 19 2 10 45 11 13 0 15 12 19 2 9 39 6 10 0 73 36 1 13 0 19 1 13 45 14 10 0 39 6 10 0 73 36 2 43 1 13 0 19 1 15 76 39 68 57 16 60 47 75 45 17 57 18 61 1 22 15 19 34 21 3 6 1 12 11 22 3 48 22 10 5 16 23 36 2 44 1 10 1 45 24 77 13 0 72 2 43 1 36 2 62 43 1 63 45 25 10 0 39 10 13 4 13 0 19 2 26 51 1 43 1 13 0 19 1 15 76 39 6 10 0 73 36 1 13 0 19 1 27 12 19 1 13 45 28 10 0 76 39 6 10 1 73 36 2 30 1 41 58 60 148 13 3 19 1 42 12 19 1 43 45 44 77 10 0 5 12 46 45 46 46 10 2 5 45 47 75 45 48 57 18 61 2 20 96 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 2 16 49 39 4 35 0 1 14 32 14 33 10 3 6 2 12 19 2 40 12 13 8 19 2 10 12 19 1 13 51 1 10 1 39 7 10 1 51 8 38 9 13 2 32 7 18 1 36 6 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 2 5 51 2 35 0 0 77 32 7 18 1 36 6 62 73 43 1 43 1 43 2 43 1 63 43 1 43 1 43 1 63 29) #39# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #40=#A(t (9) (asdf::resolve-symlinks fmakunbound proclaim ((notinline asdf::resolve-symlinks)) mapc asdf::path asdf::truenamize #Y(asdf::resolve-symlinks nil nil (24 45 5 26 13 0 19 1 6 29) #40# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #41=#A(t (10) (asdf::resolve-symlinks* fmakunbound proclaim ((notinline asdf::resolve-symlinks*)) mapc asdf::path asdf::*resolve-symlinks* asdf::resolve-symlinks #Y(asdf::resolve-symlinks* nil nil (24 45 5 26 11 6 39 13 10 0 73 39 6 13 0 19 1 7 38 4 10 0 73 29) #41# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 16 12 19 2 17 1 0 73 29) #42=#A(t (18) (asdf::ensure-pathname-absolute fmakunbound proclaim ((notinline asdf::ensure-pathname-absolute)) mapc asdf::path asdf::absolute-pathname-p stringp pathname pathnamep "not a valid pathname designator ~S" error asdf::resolve-symlinks asdf::resolved (asdf::absolute-pathname-p asdf::resolved) si::assert-failure #Y(asdf::ensure-pathname-absolute nil nil (24 45 5 26 13 0 19 1 6 39 6 10 0 73 38 60 10 0 16 7 39 11 10 0 16 8 12 19 1 0 38 44 10 0 16 9 76 39 10 15 10 13 0 19 2 11 38 28 13 0 19 1 12 45 13 38 6 15 14 19 1 15 13 0 19 1 6 76 40 -12 10 0 73 43 1 29) #42# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #43=#A(t (10) (asdf::default-directory fmakunbound proclaim ((notinline asdf::default-directory)) mapc *default-pathname-defaults* asdf::pathname-directory-pathname asdf::truenamize #Y(asdf::default-directory nil nil (26 14 5 19 1 6 12 19 1 7 29) #43# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #44=#A(t (12) (asdf::lispize-pathname fmakunbound proclaim ((notinline asdf::lispize-pathname)) mapc asdf::input-file :type "lisp" :defaults make-pathname #Y(asdf::lispize-pathname nil nil (24 45 5 26 14 6 15 7 14 8 13 0 19 4 9 29) #44# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 11 2 52 0 1 0 73 29) #A(t (3) (asdf::*wild* si::*make-special :wild)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 14 2 14 3 14 4 14 3 14 5 14 3 14 6 77 19 8 7 52 0 1 0 73 29) #A(t (8) (asdf::*wild-file* si::*make-special :name asdf::*wild* :type :version :directory make-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 14 2 14 3 11 4 6 2 12 14 5 77 14 6 77 14 7 77 19 8 8 52 0 1 0 73 29) #A(t (9) (asdf::*wild-directory* si::*make-special :directory :relative asdf::*wild* :name :type :version make-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 14 2 15 3 14 4 77 14 5 77 14 6 77 19 8 7 52 0 1 0 73 29) #A(t (8) (asdf::*wild-inferiors* si::*make-special :directory (:relative :wild-inferiors) :name :type :version make-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 14 2 14 3 19 2 4 52 0 1 0 73 29) #A(t (5) (asdf::*wild-path* si::*make-special asdf::*wild-file* asdf::*wild-inferiors* merge-pathnames)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #45=#A(t (10) (asdf::wilden fmakunbound proclaim ((notinline asdf::wilden)) mapc asdf::path asdf::*wild-path* asdf::merge-pathnames* #Y(asdf::wilden nil nil (24 45 5 26 14 6 13 0 19 2 7 29) #45# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 14 12 19 2 15 1 0 73 29) #46=#A(t (16) (asdf::directory-separator-for-host fmakunbound proclaim ((notinline asdf::directory-separator-for-host)) mapc *default-pathname-defaults* pathname :directory (:absolute "FOO") :defaults make-pathname asdf::foo namestring asdf::last-char #Y(asdf::directory-separator-for-host nil nil (25 40 3 14 5 46 6 26 14 7 15 8 14 9 13 0 19 4 10 45 11 10 0 16 12 12 19 1 13 43 1 29) #46# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 35 12 19 2 36 1 0 73 29) #47=#A(t (37) (asdf::directorize-pathname-host-device fmakunbound proclaim ((notinline asdf::directorize-pathname-host-device)) mapc pathname asdf::pathname-root asdf::root asdf::wilden asdf::wild-root asdf::merge-pathnames* asdf::absolute-pathname asdf::directory-separator-for-host asdf::separator namestring asdf::root-namestring #\/ asdf::x #\: eql #Y(nil nil nil (24 45 17 26 13 0 1 18 17 19 73 40 7 13 0 10 2 17 19 29) #47# #1# 0) substitute-if asdf::root-string :force-directory t asdf::component-name-to-pathname-components asdf::filename asdf::path asdf::relative :defaults :directory :absolute make-pathname asdf::new-base translate-pathname #Y(asdf::directorize-pathname-host-device nil nil (24 45 5 26 13 0 19 1 6 45 7 13 0 19 1 8 45 9 13 2 13 1 19 2 10 45 11 13 2 19 1 12 45 13 10 3 16 14 45 15 15 16 34 20 12 13 0 19 3 21 45 22 13 0 14 23 14 24 19 3 25 47 2 26 47 1 27 45 28 14 29 13 8 14 30 14 31 10 1 7 2 12 19 4 32 45 33 13 7 13 8 13 0 19 1 8 12 19 3 34 43 1 43 3 43 6 29) #47# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::find-system fmakunbound proclaim ((notinline asdf::find-system)) mapc :delete-methods t :lambda-list (asdf::system &optional asdf::error-p) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::perform-with-restarts fmakunbound proclaim ((notinline asdf::perform-with-restarts)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::perform fmakunbound proclaim ((notinline asdf::perform)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::operation-done-p fmakunbound proclaim ((notinline asdf::operation-done-p)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::mark-operation-done fmakunbound proclaim ((notinline asdf::mark-operation-done)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::explain fmakunbound proclaim ((notinline asdf::explain)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::output-files fmakunbound proclaim ((notinline asdf::output-files)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::input-files fmakunbound proclaim ((notinline asdf::input-files)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::component-operation-time fmakunbound proclaim ((notinline asdf::component-operation-time)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::operation-description fmakunbound proclaim ((notinline asdf::operation-description)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "returns a phrase that describes performing this operation
on this component, e.g. \"loading /a/b/c\".
You can put together sentences using this phrase." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::system-source-file fmakunbound proclaim ((notinline asdf::system-source-file)) mapc :delete-methods t :lambda-list (asdf::system) :documentation "Return the source file in which system is defined." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::component-system fmakunbound proclaim ((notinline asdf::component-system)) mapc :delete-methods t :lambda-list (asdf::component) :documentation "Find the top-level system containing COMPONENT" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::component-pathname fmakunbound proclaim ((notinline asdf::component-pathname)) mapc :delete-methods t :lambda-list (asdf::component) :documentation "Extracts the pathname applicable for a particular component." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::component-relative-pathname fmakunbound proclaim ((notinline asdf::component-relative-pathname)) mapc :delete-methods t :lambda-list (asdf::component) :documentation "Returns a pathname for the component argument intended to be
interpreted relative to the pathname of that component's parent.
Despite the function's name, the return value may be an absolute
pathname, because an absolute pathname may be interpreted relative to
another pathname in a degenerate way." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::component-property fmakunbound proclaim ((notinline asdf::component-property)) mapc :delete-methods t :lambda-list (asdf::component asdf::property) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 0 14 2 14 3 14 4 15 5 19 5 6 29) #A(t (7) ((setf asdf::component-property) fmakunbound :delete-methods t :lambda-list (asdf::new-value asdf::component asdf::property) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::component-external-format fmakunbound proclaim ((notinline asdf::component-external-format)) mapc :delete-methods t :lambda-list (asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::component-encoding fmakunbound proclaim ((notinline asdf::component-encoding)) mapc :delete-methods t :lambda-list (asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 0 14 2 14 3 14 4 15 5 19 5 6 29) #A(t (7) ((setf asdf::module-components-by-name) fmakunbound :delete-methods t :lambda-list (asdf::new-value asdf::module) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::version-satisfies fmakunbound proclaim ((notinline asdf::version-satisfies)) mapc :delete-methods t :lambda-list (asdf::component asdf::version) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::find-component fmakunbound proclaim ((notinline asdf::find-component)) mapc :delete-methods t :lambda-list (asdf::base asdf::path) :documentation "Finds the component with PATH starting from BASE module;
if BASE is nil, then the component is assumed to be a system." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::source-file-type fmakunbound proclaim ((notinline asdf::source-file-type)) mapc :delete-methods t :lambda-list (asdf::component asdf::system) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::operation-ancestor fmakunbound proclaim ((notinline asdf::operation-ancestor)) mapc :delete-methods t :lambda-list (asdf::operation) :documentation "Recursively chase the operation's parent pointer until we get to
the head of the tree" ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::component-visited-p fmakunbound proclaim ((notinline asdf::component-visited-p)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "Returns the value stored by a call to
VISIT-COMPONENT, if that has been called, otherwise NIL.
This value stored will be a cons cell, the first element
of which is a computed key, so not interesting.  The
CDR wil be the DATA value stored by VISIT-COMPONENT; recover
it as (cdr (component-visited-p op c)).
  In the current form of ASDF, the DATA value retrieved is
effectively a boolean, indicating whether some operations are
to be performed in order to do OPERATION X COMPONENT.  If the
data value is NIL, the combination had been explored, but no
operations needed to be performed." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::visit-component fmakunbound proclaim ((notinline asdf::visit-component)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component asdf::data) :documentation "Record DATA as being associated with OPERATION
and COMPONENT.  This is a side-effecting function:  the association
will be recorded on the ROOT OPERATION (OPERATION-ANCESTOR of the
OPERATION).
  No evidence that DATA is ever interesting, beyond just being
non-NIL.  Using the data field is probably very risky; if there is
already a record for OPERATION X COMPONENT, DATA will be quietly
discarded instead of recorded.
  Starting with 2.006, TRAVERSE will store an integer in data,
so that nodes can be sorted in decreasing order of traversal." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 0 14 2 14 3 14 4 15 5 19 5 6 29) #A(t (7) ((setf asdf::visiting-component) fmakunbound :delete-methods t :lambda-list (asdf::new-value asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::component-visiting-p fmakunbound proclaim ((notinline asdf::component-visiting-p)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::component-depends-on fmakunbound proclaim ((notinline asdf::component-depends-on)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "Returns a list of dependencies needed by the component to perform
    the operation.  A dependency has one of the following forms:

      (<operation> <component>*), where <operation> is a class
        designator and each <component> is a component
        designator, which means that the component depends on
        <operation> having been performed on each <component>; or

      (FEATURE <feature>), which means that the component depends
        on <feature>'s presence in *FEATURES*.

    Methods specialized on subclasses of existing component types
    should usually append the results of CALL-NEXT-METHOD to the
    list." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::component-self-dependencies fmakunbound proclaim ((notinline asdf::component-self-dependencies)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 15 9 15 10 19 7 11 29) #A(t (12) (asdf::traverse fmakunbound proclaim ((notinline asdf::traverse)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component) :documentation "Generate and return a plan for performing OPERATION on COMPONENT.

The plan returned is a list of dotted-pairs. Each pair is the CONS
of ASDF operation object and a COMPONENT object. The pairs will be
processed in order by OPERATE." ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (11 0 73 39 14 15 1 77 19 2 2 73 39 5 1 3 16 4 29) #A(t (5) (asdf::*upgraded-p* asdf::module find-class (defmethod update-instance-for-redefined-class :after ((asdf::m asdf::module) asdf::added asdf::deleted asdf::plist &key) (declare (ignorable asdf::deleted asdf::plist)) (when asdf::*asdf-verbose* (asdf::asdf-message (asdf::compatfmt "~&~@<; ~@;Updating ~A for ASDF ~A~@:>~%") asdf::m (asdf::asdf-version))) (when (member 'asdf::components-by-name asdf::added) (asdf::compute-module-components-by-name asdf::m)) (when (typep asdf::m 'asdf::system) (when (member 'asdf::source-file asdf::added) (asdf::%set-system-source-file (asdf::probe-asd (asdf::component-name asdf::m) (asdf::component-pathname asdf::m)) asdf::m) (when (equal (asdf::component-name asdf::m) "asdf") (setf (asdf::component-version asdf::m) asdf::*asdf-version*))))) eval)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::system-definition-error (error) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 10 12 1 11 7 3 12 15 12 1 13 6 3 12 77 19 4 14 1 0 73 29) #48=#A(t (15) (asdf::formatted-system-definition-error (asdf::system-definition-error) :initfunction asdf::c asdf::s format asdf::format-control asdf::format-arguments apply #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 13 1 19 1 6 12 13 1 19 1 7 12 19 4 8 29) #48# #1# 0) #Y(nil nil nil (26 34 9 73 29) #48# #1# 0) (:initform (lambda (asdf::c asdf::s) (apply 'format asdf::s (asdf::format-control asdf::c) (asdf::format-arguments asdf::c))) :name si::report-function) (:readers (asdf::format-control) :initargs (:format-control) :name asdf::format-control) (:readers (asdf::format-arguments) :initargs (:format-arguments) :name asdf::format-arguments) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 11 12 1 12 7 3 12 15 13 15 14 1 15 6 4 12 77 19 4 16 1 0 73 29) #49=#A(t (17) (asdf::load-system-definition-error (asdf::system-definition-error) :initfunction asdf::c asdf::s #50="~@<Error while trying to load definition for system ~A from pathname ~A: ~3i~_~A~@:>" asdf::error-name asdf::error-pathname asdf::error-condition format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 13 1 19 1 8 12 19 5 9 29) #49# #1# 0) #Y(nil nil nil (26 34 10 73 29) #49# #1# 0) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #50#) (asdf::error-name asdf::c) (asdf::error-pathname asdf::c) (asdf::error-condition asdf::c))) :name si::report-function) (:readers (asdf::error-name) :initargs (:name) :name asdf::name) (:readers (asdf::error-pathname) :initargs (:pathname) :name pathname) (:readers (asdf::error-condition) :initargs (:condition) :name condition) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 9 12 1 10 7 3 12 1 11 6 2 12 77 19 4 12 1 0 73 29) #51=#A(t (13) (asdf::circular-dependency (asdf::system-definition-error) :initfunction asdf::c asdf::s #52="~@<Circular dependency: ~3i~_~S~@:>" asdf::circular-dependency-components format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 19 3 7 29) #51# #1# 0) #Y(nil nil nil (26 34 8 73 29) #51# #1# 0) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #52#) (asdf::circular-dependency-components asdf::c))) :name si::report-function) (:readers (asdf::circular-dependency-components) :initargs (:components) :name asdf::components) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 9 12 1 10 7 3 12 1 11 6 2 12 77 19 4 12 1 0 73 29) #53=#A(t (13) (asdf::duplicate-names (asdf::system-definition-error) :initfunction asdf::c asdf::s #54="~@<Error while defining system: multiple components are given same name ~A~@:>" asdf::duplicate-names-name format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 19 3 7 29) #53# #1# 0) #Y(nil nil nil (26 34 8 73 29) #53# #1# 0) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #54#) (asdf::duplicate-names-name asdf::c))) :name si::report-function) (:readers (asdf::duplicate-names-name) :initargs (:name) :name asdf::name) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 1 0 73 29) #A(t (4) (asdf::missing-component (asdf::system-definition-error) ((:initargs (:requires) :readers (asdf::missing-requires) :initform "(unnamed)" :name asdf::requires) (:initargs (:parent) :readers (asdf::missing-parent) :initform nil :name asdf::parent)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 1 0 73 29) #A(t (4) (asdf::missing-component-of-version (asdf::missing-component) ((:initargs (:version) :readers (asdf::missing-version) :initform nil :name asdf::version)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 1 0 73 29) #A(t (4) (asdf::missing-dependency (asdf::missing-component) ((:readers (asdf::missing-required-by) :initargs (:required-by) :name asdf::required-by)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::missing-dependency-of-version (asdf::missing-dependency asdf::missing-component-of-version) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 11 12 1 12 7 3 12 15 13 1 14 6 3 12 77 19 4 15 1 0 73 29) #55=#A(t (16) (asdf::operation-error (error) :initfunction asdf::c asdf::s #56="~@<~A while invoking ~A on ~A~@:>" type-of asdf::error-operation asdf::error-component format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 10 1 16 6 12 13 1 19 1 7 12 13 1 19 1 8 12 19 5 9 29) #55# #1# 0) #Y(nil nil nil (26 34 10 73 29) #55# #1# 0) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #56#) (type-of asdf::c) (asdf::error-operation asdf::c) (asdf::error-component asdf::c))) :name si::report-function) (:initargs (:component) :readers (asdf::error-component) :name asdf::component) (:initargs (:operation) :readers (asdf::error-operation) :name asdf::operation) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::compile-error (asdf::operation-error) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::compile-failed (asdf::compile-error) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (asdf::compile-warned (asdf::compile-error) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 12 12 1 13 7 3 12 15 14 15 15 15 16 1 17 6 5 12 77 19 4 18 1 0 73 29) #57=#A(t (19) (asdf::invalid-configuration (condition) :initfunction asdf::c asdf::s #58="~@<~? (will be skipped)~@:>" asdf::condition-format asdf::condition-form asdf::condition-location asdf::condition-arguments format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 13 1 19 1 8 12 13 1 19 1 9 7 3 12 19 4 10 29) #57# #1# 0) #Y(nil nil nil (26 34 11 73 29) #57# #1# 0) (:initform (lambda (asdf::c asdf::s) (format asdf::s (asdf::compatfmt #58#) (asdf::condition-format asdf::c) (list* (asdf::condition-form asdf::c) (asdf::condition-location asdf::c) (asdf::condition-arguments asdf::c)))) :name si::report-function) (:initargs (:form) :readers (asdf::condition-form) :name asdf::form) (:initargs (:location) :readers (asdf::condition-location) :name asdf::location) (:initargs (:format) :readers (asdf::condition-format) :name format) (:initform nil :initargs (:arguments) :readers (asdf::condition-arguments) :name asdf::arguments) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 4 12 1 5 7 3 6 1 12 77 19 4 6 1 0 73 29) #59=#A(t (7) (asdf::invalid-source-registry (asdf::invalid-configuration warning) :initfunction #60="~@<Invalid source registry ~S~@[ in ~S~]~@{ ~@?~}~@:>" #Y(nil nil nil (26 1 3 73 29) #59# #1# 0) (:initform (asdf::compatfmt #60#) :name format) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 4 12 1 5 7 3 6 1 12 77 19 4 6 1 0 73 29) #61=#A(t (7) (asdf::invalid-output-translation (asdf::invalid-configuration warning) :initfunction #62="~@<Invalid asdf output-translation ~S~@[ in ~S~]~@{ ~@?~}~@:>" #Y(nil nil nil (26 1 3 73 29) #61# #1# 0) (:initform (asdf::compatfmt #62#) :name format) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 15 3 15 4 15 5 15 6 15 7 15 8 15 9 15 10 15 11 14 12 1 14 12 1 15 7 3 12 15 16 15 17 1 18 6 15 12 77 19 4 19 29) #63=#A(t (20) (asdf::component (:documentation ("Component name: designator for a string composed of portable pathname characters") :type string :initargs (:name) :writers ((setf asdf::component-name)) :readers (asdf::component-name) :name asdf::name) (:initargs (:version) :writers ((setf asdf::component-version)) :readers (asdf::component-version) :name asdf::version) (:initargs (:description) :writers ((setf asdf::component-description)) :readers (asdf::component-description) :name asdf::description) (:initargs (:long-description) :writers ((setf asdf::component-long-description)) :readers (asdf::component-long-description) :name asdf::long-description) (:initform nil :writers ((setf asdf::component-load-dependencies)) :readers (asdf::component-load-dependencies) :name asdf::load-dependencies) (:writers ((setf asdf::component-in-order-to)) :readers (asdf::component-in-order-to) :initargs (:in-order-to) :initform nil :name asdf::in-order-to) (:writers ((setf asdf::component-do-first)) :readers (asdf::component-do-first) :initargs (:do-first) :initform nil :name asdf::do-first) (:initform nil :writers ((setf asdf::component-inline-methods)) :readers (asdf::component-inline-methods) :name asdf::inline-methods) (:readers (asdf::component-parent) :initform nil :initargs (:parent) :name asdf::parent) (:initargs (:pathname) :name asdf::relative-pathname) (:name asdf::absolute-pathname) :initfunction make-hash-table #Y(nil nil nil (26 19 0 13 29) #63# #1# 0) (:writers ((setf asdf::component-operation-times)) :readers (asdf::component-operation-times) :initform (make-hash-table) :name asdf::operation-times) (:initargs (:around-compile) :name asdf::around-compile) (:initargs (:encoding) :initform nil :writers ((setf asdf::%component-encoding)) :readers (asdf::%component-encoding) :name asdf::%encoding) (:initform nil :initargs (:properties) :writers ((setf asdf::component-properties)) :readers (asdf::component-properties) :name asdf::properties) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 14 12 19 2 15 1 0 73 29) #64=#A(t (16) (asdf::component-find-path fmakunbound proclaim ((notinline asdf::component-find-path)) mapc asdf::component asdf::c #:loop-list-head19917 #:loop-list-tail19918 0 asdf::component-name rplacd asdf::component-parent reverse #Y(asdf::component-find-path nil nil (24 45 5 26 58 60 66 75 45 6 75 6 1 45 7 10 0 45 8 57 9 61 2 6 36 10 5 51 3 10 3 76 39 4 35 0 1 13 1 13 3 19 1 10 6 1 51 1 17 11 13 3 19 1 12 51 3 35 0 0 10 2 5 73 36 4 62 43 2 43 1 63 16 13 29) #64# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 9 19 6 12 29) #65=#A(t (13) (print-object (asdf::component t) (asdf::c stream) asdf::c stream "~{~S~^ ~}" asdf::component-find-path format #Y(si::.print-unreadable-object-body. nil nil (26 13 0 15 5 13 1 19 1 6 12 19 3 7 29) #65# #1# 0) t si::print-unreadable-object-function #Y(nil nil nil (24 45 3 24 45 4 26 30 1 8 13 2 13 1 14 9 77 32 0 12 19 5 10 43 1 29) #65# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #66=#A(t (12) (print-object (asdf::missing-dependency t) (asdf::c asdf::s) asdf::c asdf::s "~@<~A, required by ~A~@:>" call-next-method asdf::missing-required-by format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 77 19 2 6 12 13 1 19 1 7 12 19 4 8 29) #66# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #67=#A(t (13) (asdf::sysdef-error fmakunbound proclaim ((notinline asdf::sysdef-error)) mapc format asdf::arguments asdf::formatted-system-definition-error :format-control :format-arguments error #Y(asdf::sysdef-error nil nil (24 45 5 27 45 6 15 7 14 8 13 1 14 9 13 0 19 5 10 29) #67# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #68=#A(t (13) (print-object (asdf::missing-component t) (asdf::c asdf::s) asdf::c asdf::s "~@<Component ~S not found~@[ in ~A~]~@:>" asdf::missing-requires asdf::missing-parent asdf::coerce-name format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 73 39 10 13 1 19 1 7 12 19 1 8 12 19 4 9 29) #68# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #69=#A(t (14) (print-object (asdf::missing-component-of-version t) (asdf::c asdf::s) asdf::c asdf::s "~@<Component ~S does not match version ~A~@[ in ~A~]~@:>" asdf::missing-requires asdf::missing-version asdf::missing-parent asdf::coerce-name format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 13 1 19 1 7 12 13 1 19 1 8 73 39 10 13 1 19 1 8 12 19 1 9 12 19 5 10 29) #69# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #70=#A(t (9) (asdf::component-system (asdf::component) (asdf::component) asdf::component asdf::component-parent asdf::it #Y(nil nil nil (24 45 3 26 13 0 19 1 4 45 5 10 0 39 8 13 0 19 1 0 38 4 10 1 73 43 1 29) #70# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*default-component-class* si::*make-special boundp asdf::cl-source-file)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 26 12 19 2 27 1 0 73 29) #71=#A(t (28) (asdf::compute-module-components-by-name fmakunbound proclaim ((notinline asdf::compute-module-components-by-name)) mapc asdf::module :test equal make-hash-table asdf::hash #:g19928 #:g19929 (setf asdf::module-components-by-name) asdf::module-components #:loop-list19930 asdf::c asdf::name asdf::previous 0 asdf::component-name asdf::module-components-by-name gethash asdf::duplicate-names :name error si::hash-set #Y(asdf::compute-module-components-by-name nil nil (24 45 5 26 14 6 15 7 19 2 8 45 9 10 1 45 10 10 1 45 11 13 0 13 1 33 12 18 2 43 1 43 1 77 13 1 19 1 13 12 46 14 46 15 75 45 16 75 45 17 57 18 61 2 2 68 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 19 1 19 51 2 13 2 13 6 19 1 20 12 19 2 21 51 1 10 1 39 10 15 22 14 23 13 2 19 3 24 13 2 13 6 19 1 20 12 13 3 19 3 25 35 0 0 62 43 1 43 1 43 2 10 0 73 43 1 29) #71# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::module (asdf::component) ((:writers ((setf asdf::module-components)) :readers (asdf::module-components) :initargs (:components) :initform nil :name asdf::components) (:writers ((setf asdf::module-components-by-name)) :readers (asdf::module-components-by-name) :name asdf::components-by-name) (:writers ((setf asdf::module-if-component-dep-fails)) :readers (asdf::module-if-component-dep-fails) :initargs (:if-component-dep-fails) :initform :fail :name asdf::if-component-dep-fails) (:writers ((setf asdf::module-default-component-class)) :readers (asdf::module-default-component-class) :initargs (:default-component-class) :initform nil :name asdf::default-component-class)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #72=#A(t (11) (asdf::component-parent-pathname fmakunbound proclaim ((notinline asdf::component-parent-pathname)) mapc asdf::component asdf::component-parent asdf::parent asdf::component-pathname #Y(asdf::component-parent-pathname nil nil (24 45 5 26 13 0 19 1 6 45 7 10 0 73 39 6 13 0 19 1 8 43 1 29) #72# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 20 12 14 21 19 6 22 29) #73=#A(t (23) (asdf::component-pathname (asdf::component) (asdf::component) asdf::component asdf::absolute-pathname slot-boundp slot-value asdf::component-relative-pathname asdf::component-parent-pathname asdf::pathname-directory-pathname asdf::merge-pathnames* pathname asdf::absolute-pathname-p "~@<Invalid relative pathname ~S for component ~S~@:>" asdf::component-find-path error #:g19946 #:g19947 #:g19948 (setf slot-value) #Y(nil nil nil (24 45 3 26 13 0 15 4 19 2 5 39 10 13 0 15 4 19 2 6 38 79 13 0 19 1 7 12 13 0 19 1 8 12 19 1 9 12 19 2 10 45 11 10 0 76 40 6 13 0 19 1 12 76 39 14 15 13 13 0 13 1 19 1 14 12 19 3 15 10 1 45 16 1 4 45 17 10 2 45 18 13 0 13 2 13 1 33 19 18 3 43 1 43 2 10 0 73 43 1 29) #73# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #74=#A(t (13) (asdf::component-property (asdf::component t) (asdf::c asdf::property) asdf::c asdf::property asdf::properties slot-value :test equal assoc #Y(nil nil nil (24 45 3 24 45 4 26 13 0 13 1 15 5 19 2 6 12 14 7 33 8 12 19 4 9 5 73 29) #74# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 20 12 14 21 19 6 22 29) #75=#A(t (23) ((setf asdf::component-property) (t asdf::component t) (asdf::new-value asdf::c asdf::property) asdf::new-value asdf::c asdf::property asdf::properties slot-value :test equal assoc asdf::a #:g19964 #:g19965 rplacd #:g19966 #:g19967 acons #:g19968 (setf slot-value) #Y(nil nil nil (24 45 3 24 45 4 24 45 5 26 13 0 13 1 15 6 19 2 7 12 14 8 33 9 12 19 4 10 45 11 10 0 39 23 10 0 45 12 10 4 45 13 13 1 10 0 17 14 10 0 43 1 43 1 38 40 10 2 45 15 1 6 45 16 13 3 13 5 13 4 15 6 19 2 7 12 19 3 17 45 18 13 0 13 2 13 1 33 19 18 3 43 1 43 2 43 1 10 2 73 29) #75# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (asdf::*default-encoding* si::*make-special boundp :default)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 11 2 52 0 1 0 73 29) #A(t (3) (asdf::*utf-8-external-format* si::*make-special :utf-8)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #76=#A(t (9) (asdf::always-default-encoding fmakunbound proclaim ((notinline asdf::always-default-encoding)) mapc pathname asdf::*default-encoding* #Y(asdf::always-default-encoding nil nil (24 45 5 26 11 6 73 29) #76# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 33 3 52 0 1 0 73 29) #A(t (4) (asdf::*encoding-detection-hook* si::*make-special boundp asdf::always-default-encoding)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #77=#A(t (9) (asdf::detect-encoding fmakunbound proclaim ((notinline asdf::detect-encoding)) mapc pathname asdf::*encoding-detection-hook* #Y(asdf::detect-encoding nil nil (24 45 5 26 14 6 13 0 20 1 23 29) #77# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #78=#A(t (14) (asdf::component-encoding (asdf::component) (asdf::c) asdf::c asdf::x #:loop-it-19972 0 asdf::%component-encoding asdf::component-parent asdf::component-pathname asdf::detect-encoding #Y(nil nil nil (24 45 3 26 58 60 55 75 45 4 75 45 5 57 6 61 2 6 37 10 4 51 2 10 2 76 39 4 35 0 1 13 2 19 1 7 51 1 39 6 10 1 73 36 3 13 2 19 1 8 51 2 35 0 0 62 43 1 43 1 63 73 40 10 13 0 19 1 9 12 19 1 10 29) #78# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #79=#A(t (14) (asdf::default-encoding-external-format fmakunbound proclaim ((notinline asdf::default-encoding-external-format)) mapc asdf::encoding :default :utf-8 asdf::*utf-8-external-format* "Continue using :external-format :default" "~@<Your ASDF component is using encoding ~S but it isn't recognized. Your system should :defsystem-depends-on (:asdf-encodings).~:>" cerror #Y(asdf::default-encoding-external-format nil nil (24 45 5 26 10 0 42 6 6 11 6 73 38 21 42 7 6 11 8 73 38 13 15 9 15 10 13 0 19 3 11 11 6 73 29) #79# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 33 3 52 0 1 0 73 29) #A(t (4) (asdf::*encoding-external-format-hook* si::*make-special boundp asdf::default-encoding-external-format)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #80=#A(t (5) (asdf::encoding-external-format asdf::encoding asdf::*encoding-external-format-hook* #Y(asdf::encoding-external-format nil nil (24 45 1 26 14 2 13 0 20 1 23 29) #80# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #81=#A(t (9) (asdf::component-external-format (asdf::component) (asdf::c) asdf::c asdf::component-encoding asdf::encoding-external-format #Y(nil nil nil (24 45 3 26 13 0 19 1 4 12 19 1 5 29) #81# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 77 19 4 2 29) #A(t (3) (asdf::proto-system ((:name asdf::name)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::system (asdf::module asdf::proto-system) ((:initargs (:description) :writers ((setf asdf::system-description)) :readers (asdf::system-description) :name asdf::description) (:initargs (:long-description) :writers ((setf asdf::system-long-description)) :readers (asdf::system-long-description) :name asdf::long-description) (:initargs (:author) :writers ((setf asdf::system-author)) :readers (asdf::system-author) :name asdf::author) (:initargs (:maintainer) :writers ((setf asdf::system-maintainer)) :readers (asdf::system-maintainer) :name asdf::maintainer) (:initargs (:license :licence) :writers ((setf asdf::system-license) (setf asdf::system-licence)) :readers (asdf::system-license asdf::system-licence) :name asdf::licence) (:writers (asdf::%set-system-source-file) :initargs (:source-file) :name asdf::source-file) (:initargs (:defsystem-depends-on) :readers (asdf::system-defsystem-depends-on) :name asdf::defsystem-depends-on)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 8 19 6 11 29) #82=#A(t (12) (asdf::version-satisfies (asdf::component t) (asdf::c asdf::version) asdf::c asdf::version slot-boundp "Requested version ~S but component ~S has no version" warn t asdf::component-version #Y(nil nil nil (24 45 3 24 45 4 26 57 0 60 45 10 1 39 8 13 2 15 4 19 2 5 76 39 19 10 1 39 10 15 6 13 1 13 2 19 3 7 11 8 73 36 0 13 2 19 1 9 12 13 1 19 2 0 63 29) #82# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 6 12 19 2 7 1 0 73 29) #83=#A(t (8) (asdf::asdf-version fmakunbound proclaim ((notinline asdf::asdf-version)) mapc asdf::*asdf-version* #Y(asdf::asdf-version nil nil (26 11 5 73 29) #83# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 28 12 19 2 29 1 0 73 29) #84=#A(t (30) (asdf::parse-version fmakunbound proclaim ((notinline asdf::parse-version)) mapc string asdf::on-error stringp "~S: ~S is not a string" asdf::prev #:loop-across-list19978 #:loop-across-index-19977 #:loop-across-vector-19976 asdf::c 0 length >= aref 1+ digit-char-p #\. eql "~S: ~S doesn't follow asdf version numbering convention" parse-integer :separator "." asdf::split-string mapcar #Y(asdf::parse-version nil nil (24 45 5 25 40 2 77 46 6 26 10 1 16 7 40 19 10 0 39 12 13 0 15 8 15 0 13 1 20 3 23 40 2 75 73 39 161 58 60 119 75 45 9 77 13 3 9 0 9 0 46 10 46 11 46 12 46 13 57 14 61 2 11 77 10 2 16 15 51 4 75 51 5 13 3 13 4 19 2 16 39 4 35 0 1 13 2 13 3 19 2 17 51 1 10 3 16 18 51 3 13 1 19 1 19 40 20 13 1 1 20 17 21 39 12 10 5 39 8 13 5 1 20 17 21 76 76 39 5 75 73 36 6 10 1 51 5 35 0 0 10 1 73 39 6 13 1 19 1 19 36 6 62 43 4 43 1 63 40 19 10 0 39 12 13 0 15 22 15 0 13 1 20 3 23 40 2 75 73 39 17 33 23 12 13 1 14 24 15 25 19 3 26 12 19 2 27 29) #84# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 9 19 6 14 29) #85=#A(t (15) (asdf::version-satisfies (string t) (asdf::cver asdf::version) asdf::cver asdf::version warn asdf::parse-version asdf::y asdf::x t > = #Y(asdf::bigger nil nil (24 45 8 24 45 7 26 10 0 76 39 6 11 9 73 38 54 10 1 76 39 5 75 73 38 45 10 1 4 12 10 0 4 12 19 2 10 39 6 11 9 73 38 27 10 1 4 12 10 0 4 12 19 2 11 73 39 13 10 1 5 12 10 0 5 12 32 2 18 2 29) #85# #1# 0) #Y(nil nil nil (24 45 3 24 45 4 26 13 1 15 5 19 2 6 12 13 0 15 5 19 2 6 12 46 7 46 8 31 1 12 10 1 73 39 39 10 2 73 39 34 10 1 4 12 10 2 4 12 19 2 11 73 39 20 10 2 5 76 73 40 13 10 1 5 12 10 2 5 12 32 0 18 2 43 1 43 2 29) #85# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 8 76 52 0 1 2 16 1 1 3 52 2 1 4 16 5 15 6 15 7 19 2 8 15 4 1 19 12 19 2 20 1 21 16 5 15 6 15 22 19 2 8 15 21 1 32 12 19 2 20 1 33 16 5 15 6 15 34 19 2 8 15 33 1 46 12 19 2 20 1 47 16 5 15 6 15 48 19 2 8 15 47 1 72 12 19 2 20 1 47 73 29) #86=#A(t (73) (asdf::*link-initial-dword* si::*make-special asdf::*link-guid* #A(t (16) (1 20 2 0 0 0 0 0 192 0 0 0 0 0 0 70)) asdf::read-null-terminated-string fmakunbound proclaim ((notinline asdf::read-null-terminated-string)) mapc asdf::s make-string-output-stream asdf::out asdf::code 0 read-byte zerop code-char write-char get-output-stream-string #Y(asdf::read-null-terminated-string nil nil (24 45 9 26 19 0 10 45 11 75 45 12 57 13 61 2 2 30 13 3 19 1 14 51 1 10 1 16 15 39 4 35 0 1 10 1 16 16 12 13 2 19 2 17 35 0 0 62 43 1 10 0 16 18 43 1 29) #86# #1# 0) si::fset asdf::read-little-endian ((notinline asdf::read-little-endian)) asdf::bytes #:loop-limit19981 asdf::i #:loop-sum-19982 >= * ash + 1+ #Y(asdf::read-little-endian nil nil (24 45 9 25 40 3 9 4 46 23 26 58 60 75 9 0 13 1 46 24 46 25 8 0 45 26 57 13 61 2 2 45 13 2 13 3 19 2 27 39 4 35 0 1 13 1 13 6 19 1 14 12 9 8 13 2 19 2 28 17 29 12 19 2 30 51 1 10 2 16 31 51 2 35 0 0 10 1 73 36 4 62 73 43 1 43 2 63 29) #86# #1# 0) asdf::parse-file-location-info ((notinline asdf::parse-file-location-info)) file-position asdf::remaining-offset asdf::network-volume-offset asdf::local-offset asdf::local-volume-offset asdf::fli-flags asdf::end-of-header asdf::total-length asdf::start logbitp asdf::strcat #Y(asdf::parse-file-location-info nil nil (24 45 9 26 13 0 19 1 35 12 13 0 19 1 21 12 13 0 19 1 21 12 13 0 19 1 21 12 13 0 19 1 21 12 13 0 19 1 21 12 13 0 19 1 21 12 13 0 19 1 21 12 46 36 46 37 46 38 46 39 46 40 46 41 46 42 46 43 10 3 16 15 76 73 39 75 9 0 10 3 17 44 39 16 13 8 13 0 13 5 19 2 30 12 19 2 35 38 24 9 1 10 3 17 44 39 16 13 8 13 0 13 6 9 20 19 3 30 12 19 2 35 13 8 19 1 4 12 13 8 13 0 13 7 19 2 30 12 19 2 35 13 8 19 1 4 12 19 2 45 43 8 29) #86# #1# 0) asdf::parse-windows-shortcut ((notinline asdf::parse-windows-shortcut)) pathname :element-type (unsigned-byte 8) open #:g19986 #:g19987 end-of-file si::temp #Y(nil nil nil (24 45 56 26 35 1 0 29) #86# #1# 0) si::*handler-clusters* = length make-array asdf::header read-sequence equalp asdf::flags asdf::buffer string map close :abort t #Y(asdf::parse-windows-shortcut nil nil (24 45 49 26 13 0 14 50 15 51 19 3 52 45 9 64 239 57 53 60 223 75 45 54 57 13 61 1 206 15 55 34 57 3 6 1 12 11 58 3 48 58 13 3 19 1 21 12 14 0 19 2 59 39 26 11 2 16 60 12 19 1 61 45 62 13 0 13 4 19 2 63 13 0 11 2 17 64 43 1 73 39 148 13 3 19 1 21 45 65 13 4 9 76 19 2 35 9 0 10 0 17 44 39 29 13 4 9 2 19 2 21 45 60 13 5 13 0 13 5 19 1 35 12 19 2 30 12 19 2 35 43 1 9 1 10 0 17 44 39 8 13 4 19 1 33 38 81 9 2 10 0 17 44 39 29 13 4 9 2 19 2 21 45 60 13 5 13 0 13 5 19 1 35 12 19 2 30 12 19 2 35 43 1 9 3 10 0 17 44 73 39 36 13 4 9 2 19 2 21 45 60 13 0 19 1 61 45 66 13 0 13 6 19 2 63 15 67 33 16 12 13 0 19 3 68 43 2 43 1 36 2 44 1 75 73 36 2 62 73 43 1 63 69 10 0 39 6 13 0 19 1 69 70 65 10 0 39 10 13 0 14 70 14 71 19 3 69 66 43 1 29) #86# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #87=#A(t (10) (asdf::make-defined-systems-table fmakunbound proclaim ((notinline asdf::make-defined-systems-table)) mapc :test equal make-hash-table #Y(asdf::make-defined-systems-table nil nil (26 14 5 15 6 19 2 7 29) #87# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 6 19 0 3 52 0 1 0 73 29) #A(t (4) (asdf::*defined-systems* si::*make-special boundp asdf::make-defined-systems-table)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 16 12 19 2 17 1 0 73 29) #88=#A(t (18) (asdf::coerce-name fmakunbound proclaim ((notinline asdf::coerce-name)) mapc asdf::name #:g19990 asdf::component typep asdf::component-name symbol symbol-name string-downcase string "~@<Invalid component designator: ~3i~_~A~@:>" asdf::sysdef-error #Y(asdf::coerce-name nil nil (24 45 5 26 10 0 45 6 13 0 15 7 19 2 8 39 8 13 1 19 1 9 38 41 13 0 15 10 19 2 8 39 11 10 1 16 11 12 19 1 12 38 22 13 0 15 13 19 2 8 39 6 10 1 73 38 8 15 14 13 1 19 2 15 43 1 29) #88# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #89=#A(t (11) (asdf::system-registered-p fmakunbound proclaim ((notinline asdf::system-registered-p)) mapc asdf::name asdf::coerce-name asdf::*defined-systems* gethash #Y(asdf::system-registered-p nil nil (24 45 5 26 13 0 19 1 6 12 14 7 19 2 8 29) #89# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 22 12 19 2 23 1 0 73 29) #90=#A(t (24) (asdf::registered-systems fmakunbound proclaim ((notinline asdf::registered-systems)) mapc asdf::*defined-systems* #:g20006 #:loop-hashtab-20004 asdf::system #:loop-hash-val-temp-20011 #:loop-it-20007 si::hash-table-iterator #:loop-hashtab-next-20005 #:loop-list-head20012 #:loop-list-tail20013 0 #:loop-hash-val-temp-20008 #:loop-hash-key-temp-20009 #:loop-hash-predicate-var-20010 #23# asdf::coerce-name rplacd #Y(asdf::registered-systems nil nil (26 58 60 124 77 77 77 14 5 77 46 6 46 7 46 8 46 9 46 10 10 3 16 11 45 12 75 6 1 45 13 10 0 45 14 57 15 61 2 2 72 13 3 20 0 23 47 2 16 47 1 17 45 18 10 0 39 9 10 2 51 8 10 1 51 11 10 0 51 7 43 3 76 39 4 35 0 1 10 5 45 19 10 0 4 10 0 5 51 0 10 0 51 7 43 1 13 1 13 6 19 1 20 6 1 51 1 17 21 35 0 0 10 2 5 73 36 9 62 73 43 2 43 1 43 5 63 29) #90# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 20 12 19 2 21 1 0 73 29) #91=#A(t (22) (asdf::register-system fmakunbound proclaim ((notinline asdf::register-system)) mapc asdf::system #:g20024 typep si::do-check-type asdf::component-name asdf::name #:g20026 string "~&~@<; ~@;Registering ~3i~_~A~@:>~%" asdf::asdf-message asdf::*defined-systems* gethash eq get-universal-time si::hash-set #Y(asdf::register-system nil nil (24 45 5 26 10 0 45 6 13 0 15 5 19 2 7 76 39 13 13 0 15 5 77 15 5 19 4 8 51 1 43 1 13 0 19 1 9 45 10 10 0 45 11 13 0 15 12 19 2 7 76 39 13 13 0 15 12 77 15 10 19 4 8 51 1 43 1 15 13 13 1 19 2 14 13 1 13 0 14 15 19 2 16 5 17 17 76 73 39 16 13 0 14 15 19 0 18 12 10 1 3 12 19 3 19 43 1 29) #91# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #92=#A(t (11) (asdf::clear-system fmakunbound proclaim ((notinline asdf::clear-system)) mapc asdf::name asdf::coerce-name asdf::*defined-systems* remhash #Y(asdf::clear-system nil nil (24 45 5 26 13 0 19 1 6 12 11 7 17 8 29) #92# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #93=#A(t (21) (asdf::map-systems fmakunbound proclaim ((notinline asdf::map-systems)) mapc asdf::fn asdf::*defined-systems* #:g20047 #:loop-hashtab-20045 asdf::system #:loop-hash-val-temp-20052 #:loop-it-20048 si::hash-table-iterator #:loop-hashtab-next-20046 0 #:loop-hash-val-temp-20049 #:loop-hash-key-temp-20050 #:loop-hash-predicate-var-20051 #23# #Y(asdf::map-systems nil nil (24 45 5 26 77 77 77 14 6 77 46 7 46 8 46 9 46 10 46 11 10 3 16 12 45 13 57 14 61 2 2 66 13 1 20 0 23 47 2 15 47 1 16 45 17 10 0 39 9 10 2 51 6 10 1 51 9 10 0 51 5 43 3 76 39 4 35 0 1 10 3 45 18 10 0 4 10 0 5 51 0 10 0 51 5 43 1 13 7 13 4 20 1 23 35 0 0 62 73 43 1 43 5 29) #93# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*system-definition-search-functions* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 19 2 2 12 1 5 12 15 6 19 2 7 12 19 2 8 52 1 73 29) #94=#A(t (9) (asdf::contrib-sysdef-search asdf::*system-definition-search-functions* remove asdf::x member #Y(nil nil nil (24 45 3 26 13 0 14 1 19 2 4 29) #94# #1# 0) (asdf::sysdef-central-registry-search asdf::sysdef-source-registry-search asdf::sysdef-find-asdf) remove-if append)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #95=#A(t (15) (asdf::search-for-system-definition fmakunbound proclaim ((notinline asdf::search-for-system-definition)) mapc asdf::system asdf::coerce-name asdf::name asdf::x #Y(nil nil nil (24 45 8 26 13 0 13 1 20 1 23 29) #95# #1# 0) asdf::find-system-if-being-defined asdf::*system-definition-search-functions* some #Y(asdf::search-for-system-definition nil nil (24 45 5 26 13 0 19 1 6 45 7 34 9 12 43 1 15 10 11 11 3 12 19 2 12 29) #95# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*central-registry* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 25 12 19 2 26 1 0 73 29) #96=#A(t (27) (asdf::featurep fmakunbound proclaim ((notinline asdf::featurep)) mapc asdf::x *features* asdf::features atom member t :not eq (null (cddr asdf::x)) si::assert-failure cddr cadr :or #Y(nil nil nil (24 45 5 26 13 0 13 1 19 2 0 29) #96# #1# 0) some :and #Y(nil nil nil (24 45 5 26 13 0 13 1 19 2 0 29) #96# #1# 0) every "Malformed feature specification ~S" error #Y(asdf::featurep nil nil (24 45 5 25 40 3 14 6 46 7 26 10 1 16 8 39 16 13 1 13 0 19 2 9 73 39 4 11 10 73 38 88 14 11 10 1 4 17 12 39 30 38 6 15 13 19 1 14 10 1 16 15 76 76 40 -12 10 1 16 16 12 13 0 19 2 0 76 73 38 50 14 17 10 1 4 17 12 39 13 34 18 12 10 1 5 12 19 2 19 38 29 14 20 10 1 4 17 12 39 13 34 21 12 10 1 5 12 19 2 22 38 8 15 23 13 1 19 2 24 29) #96# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #97=#A(t (9) (asdf::os-unix-p fmakunbound proclaim ((notinline asdf::os-unix-p)) mapc (:or :unix :cygwin :darwin) asdf::featurep #Y(asdf::os-unix-p nil nil (26 15 5 19 1 6 29) #97# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #98=#A(t (10) (asdf::os-windows-p fmakunbound proclaim ((notinline asdf::os-windows-p)) mapc asdf::os-unix-p (:or :win32 :windows :mswindows :mingw32) asdf::featurep #Y(asdf::os-windows-p nil nil (26 19 0 5 76 73 39 6 15 6 19 1 7 29) #98# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 28 12 19 2 29 1 0 73 29) #99=#A(t (30) (asdf::probe-asd fmakunbound proclaim ((notinline asdf::probe-asd)) mapc asdf::name asdf::defaults asdf::directory-pathname-p ".asd" asdf::strcat asdf::subpathname asdf::probe-file* asdf::file asdf::os-windows-p :defaults :version :newest :case :local :name ".asd" :type "lnk" make-pathname asdf::shortcut asdf::parse-windows-shortcut asdf::target pathname #Y(asdf::probe-asd nil nil (24 45 5 24 45 6 26 58 60 107 13 1 19 1 7 73 39 98 13 1 13 2 15 8 19 2 9 12 19 2 10 12 19 1 11 45 12 10 0 39 6 10 0 73 36 1 43 1 19 0 13 73 39 62 14 14 13 1 14 15 14 16 14 17 14 18 14 19 13 2 15 20 19 2 9 12 14 21 15 22 19 10 23 45 24 13 0 19 1 11 73 39 21 13 0 19 1 25 45 26 10 0 73 39 7 10 0 16 27 36 2 43 1 43 1 63 29) #99# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 55 12 19 2 56 1 0 73 29) #100=#A(t (57) (asdf::sysdef-central-registry-search fmakunbound proclaim ((notinline asdf::sysdef-central-registry-search)) mapc asdf::system asdf::coerce-name asdf::to-replace asdf::to-remove asdf::name asdf::*central-registry* si::%dolist-var asdf::dir eval asdf::defaults asdf::directory-pathname-p asdf::probe-asd asdf::file #:g20093 #:g20094 0 :name asdf::remove-entry-from-registry :function si::temp #Y(nil nil nil (27 45 24 10 0 51 2 35 1 0 29) #100# #1# 0) :report-function stream "Remove entry from *central-registry* and continue" write-string #Y(nil nil nil (24 45 27 26 15 28 13 0 19 2 29 29) #100# #1# 0) si::make-restart asdf::coerce-entry-to-directory #Y(nil nil nil (27 45 24 10 0 51 2 35 1 1 29) #100# #1# 0) asdf::s "~@<Coerce entry to ~a, replace ~a and continue.~@:>" asdf::ensure-directory-pathname format #Y(nil nil nil (24 45 34 26 13 0 15 35 13 4 19 1 36 12 13 5 19 4 37 29) #100# #1# 0) si::*restart-clusters* *print-circle* "~@<While searching for system ~S: ~3i~_~S evaluated to ~S which is not a directory.~@:>" asdf::message error #Y(nil nil nil (26 13 4 10 8 3 51 8 73 29) #100# #1# 0) apply #Y(nil nil nil (26 13 4 13 3 19 1 36 3 12 10 9 3 51 9 73 29) #100# #1# 0) remove asdf::pair asdf::current asdf::new position subseq 1+ append #Y(asdf::sysdef-central-registry-search nil nil (24 45 5 26 13 0 19 1 6 12 77 77 46 7 46 8 46 9 64 184 58 60 180 11 10 45 11 75 45 12 38 162 10 1 4 51 0 10 0 16 13 45 14 10 0 39 140 13 0 19 1 15 39 23 13 4 13 0 19 2 16 45 17 10 0 39 6 10 0 73 36 4 43 1 38 111 57 18 60 107 75 45 19 57 20 61 2 75 84 14 21 15 22 14 23 34 25 12 14 26 34 30 12 19 6 31 12 14 21 15 32 14 23 34 33 12 14 26 34 38 12 19 6 31 6 2 12 11 39 3 48 39 75 48 40 77 15 41 13 10 13 4 13 3 19 5 37 45 42 13 0 19 1 43 43 1 44 1 36 2 44 1 34 44 12 13 1 19 2 45 36 2 34 46 12 13 1 19 2 45 36 2 62 43 1 63 43 1 10 1 5 51 1 10 1 40 -164 75 73 43 2 63 65 10 1 45 11 75 45 12 38 20 10 1 4 51 0 13 0 14 10 19 2 47 52 10 10 1 5 51 1 10 1 40 -22 43 2 10 2 45 11 75 45 48 38 63 10 1 4 51 0 10 0 4 45 49 10 1 5 45 50 13 1 14 10 19 2 51 45 51 14 10 9 0 13 0 19 3 52 12 10 1 6 1 12 14 10 10 0 16 53 12 19 2 52 12 19 3 54 52 10 43 3 10 1 5 51 1 10 1 40 -65 43 2 66 43 3 29) #100# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 23 12 19 2 24 1 0 73 29) #101=#A(t (25) (asdf::make-temporary-package fmakunbound proclaim ((notinline asdf::make-temporary-package)) mapc asdf::counter #:g20113 #:g20114 0 error si::temp #Y(nil nil nil (24 45 10 26 10 0 51 2 35 1 0 29) #101# #1# 0) si::*handler-clusters* "~A~D" :asdf format :use (:cl :asdf) make-package condition #Y(asdf::try nil nil (24 45 5 26 57 6 60 62 75 45 7 57 8 61 1 36 15 9 34 11 3 6 1 12 11 12 3 48 12 77 15 13 14 14 13 3 19 4 15 12 14 16 15 17 19 3 18 36 2 44 1 10 1 45 19 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #101# #1# 0) package + #Y(asdf::make-temporary-package nil nil (26 30 1 20 8 0 45 5 13 0 32 1 18 1 45 21 38 18 13 1 9 1 19 2 22 51 1 13 1 32 2 18 1 51 0 10 0 39 -20 10 0 73 43 2 43 1 29) #101# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #102=#A(t (21) (asdf::safe-file-write-date fmakunbound proclaim ((notinline asdf::safe-file-write-date)) mapc pathname asdf::probe-file* #:g20119 #:g20120 0 error si::temp #Y(nil nil nil (24 45 11 26 10 0 51 2 35 1 0 29) #102# #1# 0) si::*handler-clusters* file-write-date condition asdf::*asdf-verbose* "~@<Missing FILE-WRITE-DATE for ~S, treating it as zero.~@:>" warn #Y(asdf::safe-file-write-date nil nil (24 45 5 26 10 0 39 58 13 0 19 1 6 39 51 57 7 60 47 75 45 8 57 9 61 1 22 15 10 34 12 3 6 1 12 11 13 3 48 13 10 3 16 14 36 2 44 1 10 1 45 15 77 13 0 72 2 43 1 36 2 62 43 1 63 73 40 19 10 0 39 3 11 16 39 8 15 17 13 0 19 2 18 8 0 73 29) #102# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 4 19 6 9 29) #103=#A(t (10) (asdf::find-system (null) (asdf::name &optional (asdf::error-p t)) asdf::name t asdf::error-p "~@<NIL is not a valid system name~@:>" asdf::sysdef-error #Y(nil nil nil (24 45 3 25 40 3 14 4 46 5 26 10 0 73 39 6 15 6 19 1 7 29) #103# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 4 19 6 8 29) #104=#A(t (9) (asdf::find-system (t) (asdf::name &optional (asdf::error-p t)) asdf::name t asdf::error-p asdf::coerce-name #Y(nil nil nil (24 45 3 25 40 3 14 4 46 5 26 13 1 19 1 6 12 13 0 19 2 0 29) #104# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*systems-being-defined* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*systems-being-operated* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #105=#A(t (11) (asdf::find-system-if-being-defined fmakunbound proclaim ((notinline asdf::find-system-if-being-defined)) mapc asdf::name asdf::*systems-being-defined* asdf::coerce-name gethash #Y(asdf::find-system-if-being-defined nil nil (24 45 5 26 11 6 73 39 12 13 0 19 1 7 12 14 6 19 2 8 29) #105# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #106=#A(t (12) (asdf::call-with-system-definitions fmakunbound proclaim ((notinline asdf::call-with-system-definitions)) mapc asdf::thunk asdf::*systems-being-defined* :test equal make-hash-table #Y(asdf::call-with-system-definitions nil nil (24 45 5 26 11 6 39 8 13 0 20 0 23 38 17 14 7 15 8 19 2 9 48 6 13 0 20 0 23 44 1 29) #106# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 12 12 14 13 9 2 19 4 14 1 0 73 29) #107=#A(t (15) (asdf::with-system-definitions #:g20123 #:g20122 #:g20124 si::dm-too-few-arguments #:g20125 #:g20126 asdf::body si::dm-too-many-arguments asdf::call-with-system-definitions function lambda #Y(asdf::with-system-definitions nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 2 45 7 10 1 39 6 13 5 19 1 8 15 9 15 10 15 11 77 10 0 7 3 6 2 6 2 73 29) #107# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 31 12 19 2 32 1 0 73 29) #108=#A(t (33) (asdf::load-sysdef fmakunbound proclaim ((notinline asdf::load-sysdef)) mapc asdf::name pathname asdf::make-temporary-package package error condition asdf::load-system-definition-error :name :pathname :condition #Y(nil nil nil (24 45 10 26 15 11 14 12 13 3 14 13 13 2 14 14 13 0 19 7 9 29) #108# #1# 0) si::*handler-clusters* translate-logical-pathname asdf::pathname-directory-pathname asdf::detect-encoding asdf::encoding-external-format asdf::external-format *default-pathname-defaults* *package* "~&~@<; ~@;Loading system definition from ~A into ~A~@:>~%" asdf::asdf-message :external-format load delete-package #Y(nil nil nil (26 19 0 7 45 8 64 67 15 9 34 15 3 6 1 12 11 16 3 48 16 13 0 13 1 19 1 17 12 19 1 18 12 13 1 19 1 19 12 19 1 20 12 46 21 49 22 49 23 15 24 13 2 13 1 19 3 25 13 2 14 26 13 0 19 3 27 43 1 44 2 44 1 65 10 0 16 28 66 43 1 29) #108# #1# 0) asdf::call-with-system-definitions #Y(asdf::load-sysdef nil nil (24 45 5 24 45 6 26 34 29 12 19 1 30 29) #108# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 29 12 19 2 30 1 0 73 29) #109=#A(t (31) (asdf::locate-system fmakunbound proclaim ((notinline asdf::locate-system)) mapc asdf::name asdf::coerce-name asdf::system-registered-p asdf::in-memory asdf::previous asdf::system typep asdf::previous-time asdf::search-for-system-definition asdf::found asdf::found-system (or pathname string) pathname asdf::system-source-file t asdf::foundp #:g20132 (or null pathname asdf::system) si::do-check-type asdf::resolve-symlinks* asdf::absolute-pathname-p asdf::ensure-pathname-absolute asdf::%set-system-source-file equal #Y(asdf::locate-system nil nil (24 45 5 26 13 0 19 1 6 45 5 13 0 19 1 7 45 8 10 0 5 45 9 13 0 15 10 19 2 11 39 3 10 0 45 9 10 2 4 45 12 13 4 19 1 13 45 14 13 0 15 10 19 2 11 39 3 10 0 45 15 13 1 15 16 19 2 11 39 5 10 1 16 17 40 21 10 0 39 6 13 0 19 1 18 40 10 10 3 39 6 13 3 19 1 18 45 17 10 1 40 7 10 0 40 3 10 4 39 3 11 19 45 20 10 3 45 21 13 0 15 22 19 2 11 76 39 13 13 0 15 22 77 15 14 19 4 23 51 4 43 1 10 0 73 39 77 13 1 19 1 24 51 1 10 1 39 7 13 1 19 1 25 76 39 19 13 1 19 1 26 51 1 10 2 39 8 13 1 13 2 19 2 27 10 5 39 12 13 5 19 1 18 12 10 1 17 28 76 39 11 13 1 13 5 19 2 27 75 51 4 13 0 13 2 13 1 13 5 13 4 72 5 43 9 29) #109# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 45 12 14 4 19 6 46 29) #110=#A(t (47) (asdf::find-system (string) (asdf::name &optional (asdf::error-p t)) asdf::name t asdf::error-p 0 #:g20159 #:g20160 :name asdf::reinitialize-source-registry-and-retry :function si::temp #Y(nil nil nil (27 45 12 10 0 51 2 35 1 0 29) #110# #1# 0) :report-function asdf::s "~@<Retry finding system ~A after reinitializing the source-registry.~@:>" format #Y(nil nil nil (24 45 15 26 13 0 15 16 13 7 19 3 17 29) #110# #1# 0) si::make-restart si::*restart-clusters* asdf::locate-system asdf::previous-time asdf::previous pathname asdf::found-system asdf::foundp asdf::register-system asdf::safe-file-write-date get-universal-time < asdf::load-sysdef asdf::system-registered-p asdf::in-memory #:g20163 #:g20164 rplaca asdf::missing-component :requires error asdf::initialize-source-registry #Y(nil nil nil (26 19 0 40 29) #110# #1# 0) apply #Y(nil nil nil (26 58 60 197 57 6 61 1 1 57 7 60 182 75 45 8 57 6 61 1 160 14 9 15 10 14 11 34 13 12 14 14 34 18 12 19 6 19 6 1 12 11 20 3 48 20 13 6 19 1 21 47 4 22 47 3 23 47 2 24 47 1 25 45 26 10 1 39 4 10 3 76 39 6 13 1 19 1 27 10 2 39 21 10 4 76 40 16 13 4 13 2 19 1 28 12 19 0 29 12 19 3 30 39 8 13 11 13 2 19 2 31 13 11 19 1 32 45 33 10 0 39 34 10 3 39 24 10 0 45 34 13 4 19 1 28 45 35 13 1 10 0 17 36 10 0 43 1 43 1 10 0 5 73 38 15 10 11 73 39 10 15 37 14 38 13 12 19 3 39 36 10 43 1 43 5 36 2 44 1 34 41 12 13 1 19 2 42 36 2 62 43 1 63 35 0 0 62 73 63 29) #110# #1# 0) asdf::call-with-system-definitions #Y(nil nil nil (24 45 3 25 40 3 14 4 46 5 26 34 43 12 19 1 44 29) #110# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 20 12 19 2 21 1 0 73 29) #111=#A(t (22) (asdf::find-system-fallback fmakunbound proclaim ((notinline asdf::find-system-fallback)) mapc asdf::requested asdf::fallback asdf::keys (t :source-file) asdf::source-file asdf::coerce-name equal asdf::*defined-systems* gethash asdf::registered make-instance asdf::system :name :source-file apply #Y(asdf::find-system-fallback nil nil (24 45 5 24 45 6 27 45 7 28 8 22 40 2 77 46 9 13 2 19 1 10 51 2 13 3 19 1 10 51 3 13 3 10 2 17 11 73 39 35 13 2 14 12 19 2 13 5 45 14 10 0 73 40 18 15 15 15 16 14 17 13 3 14 18 13 1 13 2 19 7 19 43 1 29) #111# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #112=#A(t (12) (asdf::sysdef-find-asdf fmakunbound proclaim ((notinline asdf::sysdef-find-asdf)) mapc asdf::name "asdf" :version asdf::*asdf-version* asdf::find-system-fallback #Y(asdf::sysdef-find-asdf nil nil (24 45 5 26 13 0 15 6 14 7 14 8 19 4 9 29) #112# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #113=#A(t (10) (asdf::find-component (string t) (asdf::base asdf::path) asdf::base asdf::path asdf::find-system asdf::s #Y(nil nil nil (24 45 3 24 45 4 26 13 1 77 19 2 5 45 6 10 0 73 39 8 13 0 13 1 19 2 0 43 1 29) #113# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #114=#A(t (9) (asdf::find-component (symbol t) (asdf::base asdf::path) asdf::base asdf::path asdf::coerce-name #Y(nil nil nil (24 45 3 24 45 4 26 10 1 39 14 13 1 19 1 5 12 13 0 19 2 0 38 15 10 0 39 9 13 0 77 19 2 0 38 3 75 73 29) #114# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #115=#A(t (8) (asdf::find-component (cons t) (asdf::base asdf::path) asdf::base asdf::path #Y(nil nil nil (24 45 3 24 45 4 26 10 1 4 12 10 1 5 12 10 0 3 12 19 2 0 29) #115# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #116=#A(t (13) (asdf::find-component (asdf::module string) (asdf::module asdf::name) asdf::module asdf::name asdf::components-by-name slot-boundp asdf::compute-module-components-by-name asdf::module-components-by-name gethash #Y(nil nil nil (24 45 3 24 45 4 26 13 1 15 5 19 2 6 76 39 6 13 1 19 1 7 13 0 13 1 19 1 8 12 19 2 9 12 72 1 29) #116# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #117=#A(t (9) (asdf::find-component (asdf::component symbol) (asdf::component asdf::name) asdf::component asdf::name asdf::coerce-name #Y(nil nil nil (24 45 3 24 45 4 26 10 0 39 14 13 1 13 0 19 1 5 12 19 2 0 38 4 10 1 73 29) #117# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #118=#A(t (8) (asdf::find-component (asdf::module cons) (asdf::module asdf::name) asdf::module asdf::name #Y(nil nil nil (24 45 3 24 45 4 26 13 1 10 0 4 12 19 2 0 12 10 0 5 12 19 2 0 29) #118# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::source-file (asdf::component) ((:initform nil :initargs (:type) :writers ((setf asdf::source-file-explicit-type)) :readers (asdf::source-file-explicit-type) :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::cl-source-file (asdf::source-file) ((:initform "lisp" :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::cl-source-file.cl (asdf::cl-source-file) ((:initform "cl" :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::cl-source-file.lsp (asdf::cl-source-file) ((:initform "lsp" :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::c-source-file (asdf::source-file) ((:initform "c" :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::java-source-file (asdf::source-file) ((:initform "java" :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::static-file (asdf::source-file) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::doc-file (asdf::static-file) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::html-file (asdf::doc-file) ((:initform "html" :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #119=#A(t (9) (asdf::source-file-type (asdf::module asdf::module) (asdf::component asdf::s) asdf::component asdf::s :directory #Y(nil nil nil (24 45 3 24 45 4 26 11 5 73 29) #119# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #120=#A(t (9) (asdf::source-file-type (asdf::source-file asdf::module) (asdf::component asdf::s) asdf::component asdf::s asdf::source-file-explicit-type #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 29) #120# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #121=#A(t (16) (asdf::component-relative-pathname (asdf::component) (asdf::component) asdf::component asdf::relative-pathname slot-value asdf::component-name :type asdf::component-system asdf::source-file-type :defaults asdf::component-parent-pathname asdf::coerce-pathname #Y(nil nil nil (24 45 3 26 13 0 15 4 19 2 5 73 40 6 13 0 19 1 6 12 14 7 13 0 13 0 19 1 8 12 19 2 9 12 14 10 13 0 19 1 11 12 19 5 12 29) #121# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 15 3 14 4 1 8 12 1 9 7 3 12 14 4 1 10 12 1 11 7 3 12 1 12 6 6 12 77 19 4 13 29) #122=#A(t (14) (asdf::operation (:writers ((setf asdf::operation-forced)) :readers (asdf::operation-forced) :initargs (:force) :initform nil :name asdf::forced) (:writers ((setf asdf::operation-forced-not)) :readers (asdf::operation-forced-not) :initargs (:force-not) :initform nil :name asdf::forced-not) (:writers ((setf asdf::operation-original-initargs)) :readers (asdf::operation-original-initargs) :initargs (:original-initargs) :initform nil :name asdf::original-initargs) :initfunction :test equal make-hash-table #Y(nil nil nil (26 14 5 15 6 19 2 7 29) #122# #1# 0) (:writers ((setf asdf::operation-visited-nodes)) :readers (asdf::operation-visited-nodes) :initform (make-hash-table :test 'equal) :name asdf::visited-nodes) #Y(nil nil nil (26 14 5 15 6 19 2 7 29) #122# #1# 0) (:writers ((setf asdf::operation-visiting-nodes)) :readers (asdf::operation-visiting-nodes) :initform (make-hash-table :test 'equal) :name asdf::visiting-nodes) (:writers ((setf asdf::operation-parent)) :readers (asdf::operation-parent) :initargs (:parent) :initform nil :name asdf::parent) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 18 12 14 16 19 6 19 29) #123=#A(t (20) (print-object (asdf::operation t) (asdf::o stream) asdf::o stream #:g20190 #:g20191 0 error si::temp #Y(nil nil nil (24 45 9 26 10 0 51 2 35 1 0 29) #123# #1# 0) si::*handler-clusters* asdf::operation-original-initargs prin1 condition #Y(si::.print-unreadable-object-body. nil nil (26 57 5 60 55 75 45 6 57 7 61 1 29 15 8 34 10 3 6 1 12 11 11 3 48 11 13 4 19 1 12 12 13 3 19 2 13 36 2 44 1 10 1 45 14 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #123# #1# 0) t si::print-unreadable-object-function #Y(nil nil nil (24 45 3 24 45 4 26 30 1 15 13 2 13 1 14 16 14 16 32 0 12 19 5 17 43 1 29) #123# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 23 12 14 24 19 6 25 29) #124=#A(t (26) (shared-initialize (:after) (asdf::operation t) (asdf::operation asdf::slot-names &key asdf::force asdf::force-not &allow-other-keys) asdf::operation asdf::slot-names (t :force-not :force) asdf::force asdf::force-not asdf::forced slot-value consp #:g20223 #:g20224 asdf::coerce-name mapcar #:g20225 (setf slot-value) asdf::forced-not #:g20226 #:g20227 #:g20228 (setf slot-value) #Y(nil nil nil (24 45 4 24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 13 3 15 9 19 2 10 16 11 39 39 10 3 45 12 1 9 45 13 33 14 12 13 5 15 9 19 2 10 12 19 2 15 45 16 13 0 13 2 13 1 33 17 18 3 43 1 43 2 13 3 15 18 19 2 10 16 11 39 39 10 3 45 19 1 18 45 20 33 14 12 13 5 15 18 19 2 10 12 19 2 15 45 21 13 0 13 2 13 1 33 22 18 3 43 1 43 2 0 29) #124# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #125=#A(t (11) (asdf::node-for fmakunbound proclaim ((notinline asdf::node-for)) mapc asdf::o asdf::c class-of class-name #Y(asdf::node-for nil nil (24 45 5 24 45 6 26 10 1 16 7 12 19 1 8 12 10 0 3 73 29) #125# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #126=#A(t (9) (asdf::operation-ancestor (asdf::operation) (asdf::operation) asdf::operation asdf::operation-parent asdf::it #Y(nil nil nil (24 45 3 26 13 0 19 1 4 45 5 10 0 39 8 13 0 19 1 0 38 4 10 1 73 43 1 29) #126# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 28 12 19 2 29 1 0 73 29) #127=#A(t (30) (asdf::make-sub-operation fmakunbound proclaim ((notinline asdf::make-sub-operation)) mapc asdf::c asdf::o asdf::dep-c asdf::dep-o asdf::operation-original-initargs copy-list asdf::args :force getf asdf::force-p asdf::component-parent eql t #:g20234 #:g20235 si::put-f #:g20233 make-instance :parent :original-initargs apply type-of subtypep #Y(asdf::make-sub-operation nil nil (24 45 5 24 45 6 24 45 7 24 45 8 26 13 2 19 1 9 16 10 45 11 13 0 14 12 19 2 13 45 14 13 5 19 1 15 76 39 16 13 3 19 1 15 76 39 8 13 5 10 3 17 16 76 39 58 13 0 11 17 17 16 39 31 11 12 45 18 75 45 19 13 3 13 0 13 1 19 3 20 45 21 10 0 51 4 10 1 43 1 43 1 43 1 15 22 13 2 14 23 13 4 14 24 13 1 13 1 19 7 25 38 35 10 4 16 26 12 13 2 19 2 27 39 6 10 4 73 38 18 15 22 13 2 14 23 13 4 14 24 13 1 13 1 19 7 25 43 2 29) #127# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 10 19 6 13 29) #128=#A(t (14) (asdf::visit-component (asdf::operation asdf::component t) (asdf::o asdf::c asdf::data) asdf::o asdf::c asdf::data asdf::component-visited-p asdf::node-for asdf::operation-ancestor asdf::operation-visited-nodes t si::hash-set #Y(nil nil nil (24 45 3 24 45 4 24 45 5 26 13 2 13 1 19 2 6 76 73 39 28 13 2 13 1 19 2 7 12 13 2 19 1 8 12 19 1 9 12 14 10 10 0 3 12 19 3 11 29) #128# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #129=#A(t (12) (asdf::component-visited-p (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::node-for asdf::operation-ancestor asdf::operation-visited-nodes gethash #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 12 13 1 19 1 6 12 19 1 7 12 19 2 8 29) #129# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #130=#A(t (9) ((setf asdf::visiting-component) (t t t) (asdf::new-value asdf::operation asdf::component) asdf::new-value asdf::operation asdf::component #Y(nil nil nil (24 45 3 24 45 4 24 45 5 26 10 2 73 29) #130# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 11 19 6 15 29) #131=#A(t (16) ((setf asdf::visiting-component) (t asdf::operation asdf::component) (asdf::new-value asdf::o asdf::c) asdf::new-value asdf::o asdf::c asdf::node-for asdf::operation-ancestor asdf::a asdf::node asdf::operation-visiting-nodes t si::hash-set remhash #Y(nil nil nil (24 45 3 24 45 4 24 45 5 26 13 1 13 0 19 2 6 12 13 1 19 1 7 12 46 8 46 9 10 4 39 16 13 0 13 1 19 1 10 12 14 11 19 3 12 38 10 13 0 13 1 19 1 10 17 13 10 4 73 43 2 29) #131# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #132=#A(t (13) (asdf::component-visiting-p (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::node-for asdf::node asdf::operation-ancestor asdf::operation-visiting-nodes gethash #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 45 6 13 0 13 2 19 1 7 12 19 1 8 12 19 2 9 43 1 29) #132# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #133=#A(t (9) (asdf::component-depends-on (symbol asdf::component) (asdf::op-spec asdf::c) asdf::op-spec asdf::c make-instance #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 12 13 0 19 2 0 29) #133# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #134=#A(t (11) (asdf::component-depends-on (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c type-of asdf::component-in-order-to assoc #Y(nil nil nil (24 45 3 24 45 4 26 10 1 16 5 12 13 0 19 1 6 12 19 2 7 5 73 29) #134# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #135=#A(t (16) (asdf::component-self-dependencies (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::x asdf::component-name :test string= member #Y(nil nil nil (24 45 5 26 13 1 19 1 6 12 10 0 5 12 14 7 33 8 12 19 4 9 29) #135# #1# 0) asdf::component-depends-on remove-if-not #Y(nil nil nil (24 45 3 24 45 4 26 34 10 12 13 1 13 0 19 2 11 12 19 2 12 29) #135# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 22 12 14 23 19 6 24 29) #136=#A(t (25) (asdf::input-files (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c asdf::component-parent asdf::component-self-dependencies asdf::self-deps asdf::parent asdf::dep #:g20267 #:g20268 si::dm-too-few-arguments asdf::op asdf::name si::dm-too-many-arguments make-instance asdf::find-component asdf::output-files #Y(nil nil nil (24 45 9 26 10 0 45 10 10 0 45 11 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 13 10 1 76 39 6 13 2 19 1 12 10 1 4 12 10 1 5 51 1 22 45 14 10 2 39 6 13 3 19 1 15 13 1 19 1 16 12 13 5 13 0 19 2 17 12 19 2 18 43 4 29) #136# #1# 0) mapcan asdf::component-pathname #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 13 1 13 0 19 2 6 12 46 7 46 8 10 1 39 11 34 19 12 13 1 19 2 20 38 9 13 2 19 1 21 6 1 73 43 2 29) #136# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #137=#A(t (8) (asdf::input-files (asdf::operation asdf::module) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #137# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #138=#A(t (11) (asdf::component-operation-time (t t) (asdf::o asdf::c) asdf::o asdf::c type-of asdf::component-operation-times gethash #Y(nil nil nil (24 45 3 24 45 4 26 10 1 16 5 12 13 0 19 1 6 12 19 2 7 29) #138# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 22 12 14 18 19 6 23 29) #139=#A(t (24) (asdf::operation-done-p (asdf::operation asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::output-files asdf::input-files asdf::component-operation-time asdf::op-time asdf::in-files asdf::out-files min asdf::safe-file-write-date mapcar reduce #Y(asdf::earliest-out nil nil (26 33 11 12 33 12 12 13 0 19 2 13 12 19 2 14 29) #139# #1# 0) max #Y(asdf::latest-in nil nil (26 33 16 12 33 12 12 13 1 19 2 13 12 19 2 14 29) #139# #1# 0) t >= asdf::probe-file* every #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 12 13 1 13 0 19 2 6 12 13 1 13 0 19 2 7 12 46 8 46 9 46 10 30 2 15 17 10 3 76 39 4 10 2 76 39 6 11 18 73 38 67 10 2 76 39 18 10 4 73 39 11 13 4 32 0 18 0 12 19 2 19 38 45 10 3 76 39 5 75 73 38 36 33 20 12 13 3 19 2 21 73 39 25 33 20 12 13 2 19 2 21 73 39 14 32 1 18 0 12 32 0 18 0 12 19 2 19 43 2 43 3 29) #139# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*forcing* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::do-traverse fmakunbound proclaim ((notinline asdf::do-traverse)) mapc :delete-methods t :lambda-list (asdf::operation asdf::component asdf::collect) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 43 12 19 2 44 1 0 73 29) #140=#A(t (45) (asdf::resolve-dependency-name fmakunbound proclaim ((notinline asdf::resolve-dependency-name)) mapc asdf::component asdf::name asdf::version 0 #:g20275 #:g20276 :name asdf::retry :function si::temp #Y(nil nil nil (27 45 14 10 0 51 2 35 1 0 29) #140# #1# 0) :report-function asdf::s "~@<Retry loading ~3i~_~A.~@:>" format #Y(nil nil nil (24 45 17 26 13 0 15 18 13 7 19 3 19 29) #140# #1# 0) :test-function asdf::c asdf::missing-dependency typep asdf::missing-required-by eq asdf::missing-requires equal #Y(nil nil nil (24 45 22 26 10 0 76 73 40 34 13 0 15 23 19 2 24 73 39 24 13 0 19 1 25 12 10 8 17 26 73 39 11 13 0 19 1 27 12 10 7 17 28 29) #140# #1# 0) si::make-restart si::*restart-clusters* asdf::component-parent asdf::find-component asdf::comp :required-by :requires error asdf::version-satisfies asdf::missing-dependency-of-version :version #Y(nil nil nil (26 75 73 29) #140# #1# 0) apply #Y(asdf::resolve-dependency-name nil nil (24 45 5 24 45 6 25 40 2 77 46 7 26 58 60 141 57 8 61 1 1 57 9 60 126 75 45 10 57 8 61 1 104 14 11 15 12 14 13 34 15 12 14 16 34 20 12 14 21 34 29 12 19 8 30 6 1 12 11 31 3 48 31 13 7 19 1 32 12 13 6 19 2 33 45 34 10 0 76 39 14 15 23 14 35 13 8 14 36 13 7 19 5 37 10 6 39 28 13 0 13 6 19 2 38 76 39 18 15 39 14 35 13 8 14 40 13 6 14 36 13 7 19 7 37 10 0 73 43 1 36 4 36 2 44 1 34 41 12 13 1 19 2 42 36 2 62 43 1 63 35 0 0 62 73 63 29) #140# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 23 12 19 2 24 1 0 73 29) #141=#A(t (25) (asdf::resolve-dependency-spec fmakunbound proclaim ((notinline asdf::resolve-dependency-spec)) mapc asdf::component asdf::dep-spec atom asdf::resolve-dependency-name :version eq second third :feature "Continue nonetheless." "Congratulations, you're the first ever user of FEATURE dependencies! Please contact the asdf-devel mailing-list." cerror *features* :test string-equal find "~@<Bad dependency ~s.  Dependencies must be (:version <name> <version>), (:feature <feature> <name>), or <name>.~@:>" error #Y(asdf::resolve-dependency-spec nil nil (24 45 5 24 45 6 26 10 0 16 7 39 10 13 1 13 0 19 2 8 38 79 14 9 10 0 4 17 10 39 18 13 1 10 0 16 11 12 10 0 16 12 12 19 3 8 38 53 14 13 10 0 4 17 10 39 37 15 14 15 15 19 2 16 10 0 16 11 12 14 17 14 18 15 19 19 4 20 73 39 11 13 1 10 0 16 12 12 19 2 8 38 8 15 21 13 0 19 2 22 29) #141# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #142=#A(t (14) (asdf::do-one-dep fmakunbound proclaim ((notinline asdf::do-one-dep)) mapc asdf::op asdf::c asdf::collect asdf::dep-op asdf::dep-c asdf::make-sub-operation asdf::do-traverse #Y(asdf::do-one-dep nil nil (24 45 5 24 45 6 24 45 7 24 45 8 24 45 9 26 13 3 13 4 13 0 13 1 19 4 10 12 13 0 13 2 19 3 11 29) #142# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 25 12 19 2 26 1 0 73 29) #143=#A(t (27) (asdf::do-dep fmakunbound proclaim ((notinline asdf::do-dep)) mapc asdf::op asdf::c asdf::collect asdf::dep-op-spec asdf::dep-c-specs asdf::feature eq *features* member asdf::missing-dependency :required-by :requires :feature error asdf::flag si::%dolist-var asdf::d asdf::resolve-dependency-spec asdf::do-one-dep t #Y(asdf::do-dep nil nil (24 45 5 24 45 6 24 45 7 24 45 8 24 45 9 26 13 1 1 10 17 11 39 37 10 0 4 12 14 12 19 2 13 39 5 75 73 38 20 15 14 14 15 13 3 14 16 14 17 10 0 4 6 2 12 19 5 18 38 59 75 45 19 10 1 45 20 75 45 21 38 36 10 1 4 51 0 13 7 13 6 13 5 13 4 13 6 13 0 19 2 22 12 19 5 23 39 5 11 24 51 2 10 1 5 51 1 10 1 40 -38 43 2 10 0 73 43 1 29) #143# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 1 0 73 29) #A(t (3) (asdf::*visit-count* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #144=#A(t (9) (asdf::do-collect fmakunbound proclaim ((notinline asdf::do-collect)) mapc asdf::collect asdf::x #Y(asdf::do-collect nil nil (24 45 5 24 45 6 26 13 1 13 0 20 1 23 29) #144# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 85 12 14 23 19 6 86 29) #145=#A(t (87) (asdf::do-traverse (asdf::operation asdf::component t) (asdf::operation asdf::c asdf::collect) asdf::operation asdf::c asdf::collect asdf::*forcing* asdf::flag asdf::x #:g20314 #Y(asdf::update-flag nil nil (24 45 8 26 10 0 45 9 10 4 40 3 10 0 51 4 73 43 1 29) #145# #1# 0) asdf::op asdf::comp asdf::do-dep #Y(asdf::dep nil nil (24 45 11 24 45 12 26 13 8 13 7 13 6 13 1 13 0 19 5 13 12 32 3 18 1 29) #145# #1# 0) asdf::component-visited-p asdf::it asdf::component-visiting-p asdf::circular-dependency :components error #:g20315 #:g20316 t #:g20317 (setf asdf::visiting-component) asdf::system typep asdf::operation-ancestor asdf::ancestor asdf::f consp asdf::component-name :test equal member #Y(asdf::match? nil nil (24 45 30 26 10 0 73 39 25 10 0 16 31 76 73 40 17 13 8 19 1 32 12 13 0 14 33 33 34 12 19 4 35 29) #145# #1# 0) asdf::operation-forced asdf::operation-forced-not asdf::component-depends-on #:loop-list20319 asdf::deps asdf::required-op 0 #23# asdf::module asdf::at-least-one #:internal-collect20320 #Y(asdf::internal-collect nil nil (24 45 8 26 13 0 10 1 3 51 1 0 29) #145# #1# 0) asdf::module-components si::%dolist-var asdf::kid #:error-return #Y(nil nil nil (24 45 4 26 11 23 51 6 73 29) #145# #1# 0) #:normal-return #:g20329 #:g20330 asdf::missing-dependency si::temp #Y(nil nil nil (24 45 58 26 10 0 51 2 35 1 0 29) #145# #1# 0) si::*handler-clusters* condition asdf::module-if-component-dep-fails :fail eq :try-next reverse asdf::module-ops asdf::operation-done-p class-of class-name asdf::component-do-first assoc asdf::do-first #:loop-list20333 vector asdf::do-collect #:g20334 #:g20335 #:g20336 (setf asdf::visiting-component) #:g20338 asdf::*visit-count* + asdf::visit-component #Y(nil nil nil (24 45 3 24 45 4 24 45 5 26 57 0 60 641 14 6 77 46 7 49 6 31 2 10 14 13 6 13 5 19 2 15 45 16 10 0 39 16 10 0 5 12 32 2 18 1 10 3 73 36 4 38 1 43 1 13 6 13 5 19 2 17 39 13 15 18 14 19 10 5 6 1 12 19 3 20 10 6 45 21 10 6 45 22 11 23 45 24 13 0 13 2 13 1 33 25 18 3 43 1 43 2 64 486 58 60 482 13 6 15 26 19 2 27 39 49 13 7 19 1 28 45 29 30 1 36 13 1 19 1 37 12 32 0 18 1 39 7 11 23 52 6 38 17 13 1 19 1 38 12 32 0 18 1 39 5 75 73 36 2 43 1 43 1 75 48 6 77 77 13 7 13 6 19 2 39 12 46 40 46 41 46 42 57 43 61 2 2 46 10 3 2 39 4 35 0 1 10 3 4 45 44 10 0 4 51 2 10 0 5 51 0 10 0 51 3 43 1 10 3 5 51 3 13 1 13 2 32 5 18 2 35 0 0 62 43 3 44 1 13 6 15 45 19 2 27 39 199 77 11 6 73 40 15 10 3 73 39 10 13 6 15 26 19 2 27 76 73 12 77 46 20 49 6 46 46 75 45 47 30 1 48 13 10 19 1 49 45 50 75 45 51 38 110 10 1 4 51 0 57 52 60 96 34 53 12 57 54 60 85 57 55 60 78 75 45 56 57 43 61 1 35 15 57 34 59 3 6 1 12 11 60 3 48 60 13 18 13 5 32 7 12 19 3 0 12 32 13 18 1 36 3 36 2 44 1 10 1 45 61 13 18 19 1 62 12 11 63 17 64 39 6 13 0 19 1 20 10 0 51 11 73 43 1 36 2 62 73 43 1 63 36 1 63 69 21 23 63 10 1 5 51 1 10 1 40 -112 43 2 13 10 19 1 62 12 11 65 17 64 39 4 10 2 76 39 6 13 3 19 1 20 10 1 16 66 12 72 1 43 1 43 1 43 2 44 1 45 67 11 6 73 40 10 13 8 13 7 19 2 68 76 73 12 32 3 18 1 10 4 39 115 10 8 16 69 12 19 1 70 12 13 7 19 1 71 12 19 2 72 5 45 73 77 77 13 0 46 74 46 41 46 42 57 43 61 2 2 51 10 3 2 39 4 35 0 1 10 3 4 45 44 10 0 4 51 2 10 0 5 51 0 10 0 51 3 43 1 10 3 5 51 3 13 13 13 12 13 11 13 1 13 2 19 5 13 35 0 0 62 43 3 43 1 13 6 13 0 19 1 75 12 19 2 76 13 6 13 8 10 7 3 12 19 2 76 43 1 63 65 10 6 45 77 10 6 45 78 75 45 79 13 0 13 2 13 1 33 80 18 3 43 1 43 2 66 43 2 13 4 13 3 10 0 73 39 17 8 1 45 81 14 82 13 0 19 2 83 52 82 73 43 1 12 19 3 84 10 0 73 43 1 44 1 63 29) #145# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 16 12 19 2 17 1 0 73 29) #146=#A(t (18) (asdf::flatten-tree fmakunbound proclaim ((notinline asdf::flatten-tree)) mapc asdf::l #:c20342 asdf::x #Y(asdf::c nil nil (24 45 7 26 13 0 10 1 3 51 1 0 29) #146# #1# 0) (simple-vector 1) typep svref #Y(asdf::r nil nil (24 45 7 26 13 0 15 9 19 2 10 39 14 13 0 8 0 17 11 12 32 1 18 1 38 7 13 0 32 3 18 1 29) #146# #1# 0) map #Y(asdf::r* nil nil (24 45 5 26 77 32 2 12 13 0 19 3 13 29) #146# #1# 0) reverse #Y(asdf::flatten-tree nil nil (24 45 5 26 75 45 6 30 1 8 31 2 12 14 13 4 32 0 18 1 43 2 10 1 16 15 12 72 1 43 1 43 1 29) #146# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #147=#A(t (15) (asdf::traverse (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #:collect20354 asdf::x #Y(asdf::collect nil nil (24 45 6 26 13 0 10 1 3 51 1 0 29) #147# #1# 0) asdf::*visit-count* asdf::do-traverse reverse asdf::flatten-tree #Y(nil nil nil (24 45 3 24 45 4 26 75 45 5 30 1 7 8 0 48 8 13 3 13 2 32 0 12 19 3 9 44 1 10 1 16 10 12 43 1 43 1 19 1 11 29) #147# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #148=#A(t (11) (asdf::perform (asdf::operation asdf::source-file) (asdf::operation asdf::c) asdf::operation asdf::c "~@<Required method PERFORM not implemented for operation ~A, component ~A~@:>" class-of asdf::sysdef-error #Y(nil nil nil (24 45 3 24 45 4 26 15 5 10 1 16 6 12 10 0 16 6 12 19 3 7 29) #148# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #149=#A(t (8) (asdf::perform (asdf::operation asdf::module) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #149# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 15 19 6 16 29) #150=#A(t (17) (asdf::mark-operation-done (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c type-of asdf::component-operation-times max get-universal-time asdf::safe-file-write-date asdf::input-files mapcar reduce si::hash-set #Y(nil nil nil (24 45 3 24 45 4 26 10 1 16 5 12 13 0 19 1 6 12 33 7 12 19 0 8 12 33 9 12 13 1 13 0 19 2 10 12 19 2 11 3 12 19 2 12 12 19 3 13 29) #150# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #151=#A(t (9) (asdf::perform-with-restarts (t t) (asdf::operation asdf::component) asdf::operation asdf::component asdf::perform #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 29) #151# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 31 12 14 32 19 6 33 29) #152=#A(t (34) (asdf::perform-with-restarts (:around) (t t) (asdf::operation asdf::component) asdf::operation asdf::component 0 #:g20388 #:g20389 :name asdf::retry :function si::temp #Y(nil nil nil (27 45 12 10 0 51 2 35 1 0 29) #152# #1# 0) :report-function asdf::s "~@<Retry ~A.~@:>" asdf::operation-description format #Y(nil nil nil (24 45 15 26 13 0 15 16 13 7 13 6 19 2 17 12 19 3 18 29) #152# #1# 0) si::make-restart asdf::accept #Y(nil nil nil (27 45 12 10 0 51 2 35 1 1 29) #152# #1# 0) "~@<Continue, treating ~A as having been successful.~@:>" #Y(nil nil nil (24 45 15 26 13 0 15 23 13 7 13 6 19 2 17 12 19 3 18 29) #152# #1# 0) si::*restart-clusters* call-next-method #Y(nil nil nil (26 75 73 29) #152# #1# 0) apply asdf::mark-operation-done #Y(nil nil nil (26 13 6 13 5 19 2 29 75 73 36 4 29) #152# #1# 0) #Y(nil nil nil (24 45 4 24 45 5 26 58 60 101 57 6 61 1 1 57 7 60 86 75 45 8 57 6 61 2 54 63 14 9 15 10 14 11 34 13 12 14 14 34 19 12 19 6 20 12 14 9 15 21 14 11 34 22 12 14 14 34 24 12 19 6 20 6 2 12 11 25 3 48 25 19 0 26 36 4 36 2 44 1 34 27 12 13 1 19 2 28 36 2 34 30 12 13 1 19 2 28 36 2 62 43 1 63 35 0 0 62 73 63 29) #152# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #153=#A(t (11) (asdf::explain (asdf::operation asdf::component) (asdf::operation asdf::component) asdf::operation asdf::component "~&~@<; ~@;~A~:>~%" asdf::operation-description asdf::asdf-message #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 1 13 0 19 2 6 12 19 2 7 29) #153# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #154=#A(t (11) (asdf::operation-description (t t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<~A on ~A~@:>" class-of format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 10 1 16 6 12 13 0 19 4 7 29) #154# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 14 3 1 5 12 1 6 7 3 12 14 3 1 8 12 1 9 7 3 12 1 10 6 4 12 77 19 4 11 29) #155=#A(t (12) (asdf::compile-op (asdf::operation) (:initform nil :writers ((setf asdf::compile-op-proclamations)) :readers (asdf::compile-op-proclamations) :initargs (:proclamations) :name asdf::proclamations) :initfunction asdf::*compile-file-warnings-behaviour* #Y(nil nil nil (26 11 4 73 29) #155# #1# 0) (:initform asdf::*compile-file-warnings-behaviour* :writers ((setf asdf::operation-on-warnings)) :readers (asdf::operation-on-warnings) :initargs (:on-warnings) :name asdf::on-warnings) asdf::*compile-file-failure-behaviour* #Y(nil nil nil (26 11 7 73 29) #155# #1# 0) (:initform asdf::*compile-file-failure-behaviour* :writers ((setf asdf::operation-on-failure)) :readers (asdf::operation-on-failure) :initargs (:on-failure) :name asdf::on-failure) (:initform nil :writers ((setf asdf::compile-op-flags)) :readers (asdf::compile-op-flags) :initargs (:flags) :name asdf::flags) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #156=#A(t (14) (asdf::output-file fmakunbound proclaim ((notinline asdf::output-file)) mapc asdf::operation asdf::component asdf::output-files asdf::files (asdf::length=n-p asdf::files 1) si::assert-failure asdf::length=n-p #Y(asdf::output-file nil nil (24 45 5 24 45 6 26 13 1 13 0 19 2 7 45 8 38 6 15 9 19 1 10 13 0 9 1 19 2 11 76 40 -14 10 0 4 73 43 1 29) #156# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #157=#A(t (12) (asdf::ensure-all-directories-exist fmakunbound proclaim ((notinline asdf::ensure-all-directories-exist)) mapc asdf::pathnames si::%dolist-var pathname translate-logical-pathname ensure-directories-exist #Y(asdf::ensure-all-directories-exist nil nil (24 45 5 26 10 0 45 6 75 45 7 38 20 10 1 4 51 0 13 0 19 1 8 12 19 1 9 10 1 5 51 1 10 1 40 -22 75 73 43 2 29) #157# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 8 12 14 9 19 6 10 29) #158=#A(t (11) (asdf::perform (:before) (asdf::compile-op asdf::source-file) (asdf::operation asdf::c) asdf::operation asdf::c asdf::output-files asdf::ensure-all-directories-exist #Y(nil nil nil (24 45 4 24 45 5 26 13 1 13 0 19 2 6 12 19 1 7 29) #158# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 7 12 14 8 19 6 9 29) #159=#A(t (10) (asdf::perform (:after) (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c asdf::mark-operation-done #Y(nil nil nil (24 45 4 24 45 5 26 13 1 13 0 19 2 6 29) #159# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::around-compile-hook fmakunbound proclaim ((notinline asdf::around-compile-hook)) mapc :delete-methods t :lambda-list (asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::call-with-around-compile-hook fmakunbound proclaim ((notinline asdf::call-with-around-compile-hook)) mapc :delete-methods t :lambda-list (asdf::component asdf::thunk) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #160=#A(t (11) (asdf::around-compile-hook (asdf::component) (asdf::c) asdf::c asdf::around-compile slot-boundp slot-value asdf::component-parent #Y(nil nil nil (24 45 3 26 13 0 15 4 19 2 5 39 10 13 0 15 4 19 2 6 38 18 13 0 19 1 7 73 39 10 13 0 19 1 7 12 19 1 0 29) #160# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #161=#A(t (21) (asdf::ensure-function asdf::fun (nil :package) :asdf package #:g20394 #162=(or symbol function) typep cons function eval string si::+io-syntax-progv-list+ #:%progv-list find-package *package* read-from-string (#162# cons string) si::etypecase-error #Y(asdf::ensure-function nil nil (24 45 1 28 2 22 40 3 14 3 46 4 10 1 45 5 13 0 15 6 19 2 7 39 6 10 2 73 38 72 13 0 15 8 19 2 7 39 11 15 9 10 2 6 2 16 10 38 53 13 0 15 11 19 2 7 39 37 15 9 11 12 45 13 10 0 4 12 10 0 5 67 10 2 16 14 48 15 13 3 19 1 16 44 1 68 43 1 6 2 16 10 38 8 13 0 15 17 19 2 18 43 1 29) #161# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #163=#A(t (7) (asdf::call-around-hook asdf::hook function asdf::ensure-function funcall #Y(asdf::call-around-hook nil nil (24 45 1 24 45 2 26 13 1 19 1 3 73 40 4 1 4 73 12 13 0 20 1 23 29) #163# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #164=#A(t (10) (asdf::call-with-around-compile-hook (asdf::component t) (asdf::c function) asdf::c function asdf::around-compile-hook asdf::call-around-hook #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 12 13 0 19 2 6 29) #164# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 38 12 14 39 19 6 40 29) #165=#A(t (41) (asdf::perform (asdf::compile-op asdf::cl-source-file) (asdf::operation asdf::c) asdf::operation asdf::c asdf::component-pathname asdf::output-files asdf::operation-on-warnings asdf::operation-on-failure asdf::*compile-file-failure-behaviour* asdf::*compile-file-warnings-behaviour* asdf::output-file asdf::source-file asdf::flags asdf::*compile-op-compile-file-function* :output-file :external-format asdf::component-external-format asdf::compile-op-flags append apply #Y(nil nil nil (27 45 13 14 14 13 1 14 15 13 2 14 16 13 3 19 1 17 12 13 0 13 4 19 1 18 12 19 2 19 12 19 7 20 29) #165# #1# 0) asdf::call-with-around-compile-hook asdf::failure-p asdf::warnings-p asdf::output asdf::compile-error :component :operation error :warn "~@<COMPILE-FILE failed while performing ~A on ~A.~@:>" warn :error asdf::compile-failed :ignore "~@<COMPILE-FILE warned while performing ~A on ~A.~@:>" asdf::compile-warned #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 13 1 13 0 19 2 6 4 12 13 1 19 1 7 12 13 1 19 1 8 12 49 9 49 10 46 11 46 12 13 2 34 21 12 19 2 22 47 2 23 47 1 24 45 25 10 0 76 39 14 15 26 14 27 13 5 14 28 13 6 19 5 29 10 2 39 41 13 6 19 1 8 42 30 12 15 31 13 6 13 5 19 3 32 38 22 42 33 16 15 34 14 27 13 5 14 28 13 6 19 5 29 38 4 42 35 1 10 1 73 39 47 13 6 19 1 7 42 30 12 15 36 13 6 13 5 19 3 32 38 28 42 33 16 15 37 14 27 13 5 14 28 13 6 19 5 29 38 10 42 35 5 75 73 38 3 75 73 43 3 43 2 44 2 29) #165# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 15 19 6 16 29) #166=#A(t (17) (asdf::output-files (asdf::compile-op asdf::cl-source-file) (asdf::operation asdf::c) asdf::operation asdf::c asdf::component-pathname asdf::lispize-pathname asdf::p :type :fasl compile-file-pathname asdf::f asdf::use-ecl-byte-compiler-p :object #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 19 1 6 45 7 13 0 14 8 14 9 19 3 10 45 11 19 0 12 39 8 10 0 6 1 73 38 16 13 1 14 8 14 13 19 3 10 12 10 0 6 2 73 43 2 29) #166# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #167=#A(t (8) (asdf::perform (asdf::compile-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #167# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #168=#A(t (8) (asdf::output-files (asdf::compile-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #168# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #169=#A(t (8) (asdf::input-files (asdf::compile-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #169# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #170=#A(t (10) (asdf::operation-description (asdf::compile-op t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<compiling ~3i~_~A~@:>" format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #170# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #171=#A(t (10) (asdf::operation-description (asdf::compile-op asdf::module) (asdf::operation asdf::component) asdf::operation asdf::component "~@<compiled ~3i~_~A~@:>" format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #171# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::basic-load-op (asdf::operation) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::load-op (asdf::basic-load-op) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 27 12 14 28 19 6 29 29) #172=#A(t (30) (asdf::perform-with-restarts (asdf::load-op asdf::cl-source-file) (asdf::o asdf::c) asdf::o asdf::c 0 #:g20411 #:g20412 :name asdf::try-recompiling :function si::temp #Y(nil nil nil (27 45 11 10 0 51 2 35 1 0 29) #172# #1# 0) :report-function asdf::s "Recompile ~a and try loading it again" asdf::component-name format #Y(nil nil nil (24 45 14 26 13 0 15 15 13 6 19 1 16 12 19 3 17 29) #172# #1# 0) si::make-restart si::*restart-clusters* call-next-method asdf::compile-op asdf::make-sub-operation asdf::perform #Y(nil nil nil (26 13 5 13 6 13 5 15 22 19 4 23 12 13 5 19 2 24 29) #172# #1# 0) apply #Y(nil nil nil (24 45 3 24 45 4 26 58 60 72 57 5 61 1 1 57 6 60 57 75 45 7 57 5 61 1 35 14 8 15 9 14 10 34 12 12 14 13 34 18 12 19 6 19 6 1 12 11 20 3 48 20 19 0 21 36 4 36 2 44 1 34 25 12 13 1 19 2 26 36 2 62 43 1 63 35 0 0 62 73 63 29) #172# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 19 12 14 20 19 6 21 29) #173=#A(t (22) (asdf::perform (asdf::load-op asdf::cl-source-file) (asdf::o asdf::c) asdf::o asdf::c load asdf::input-files #:loop-list20424 asdf::i #:loop-list-head20425 #:loop-list-tail20426 0 pathname-type "fas" string= asdf::lispize-pathname compile-file-pathname rplacd map #Y(nil nil nil (24 45 3 24 45 4 26 77 33 5 12 58 60 94 77 13 2 13 1 19 2 6 12 46 7 46 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 53 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 19 1 12 12 15 13 19 2 14 76 39 18 13 1 13 3 19 1 15 12 19 1 16 6 1 51 1 17 17 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 19 3 18 29) #173# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #174=#A(t (8) (asdf::perform (asdf::load-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #174# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 5 19 6 7 29) #175=#A(t (8) (asdf::operation-done-p (asdf::load-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c t #Y(nil nil nil (24 45 3 24 45 4 26 11 5 73 29) #175# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #176=#A(t (8) (asdf::output-files (asdf::operation asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #176# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 8 12 14 9 19 6 10 29) #177=#A(t (11) (asdf::component-depends-on (asdf::load-op asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c asdf::compile-op asdf::component-name call-next-method #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 19 1 6 6 2 12 19 0 7 3 73 29) #177# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #178=#A(t (10) (asdf::operation-description (asdf::load-op t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<loading ~3i~_~A~@:>" format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #178# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #179=#A(t (10) (asdf::operation-description (asdf::load-op asdf::cl-source-file) (asdf::operation asdf::component) asdf::operation asdf::component "~@<loading FASL for ~3i~_~A~@:>" format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #179# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #180=#A(t (10) (asdf::operation-description (asdf::load-op asdf::module) (asdf::operation asdf::component) asdf::operation asdf::component "~@<loaded ~3i~_~A~@:>" format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #180# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::load-source-op (asdf::basic-load-op) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 18 12 14 19 19 6 20 29) #181=#A(t (21) (asdf::perform (asdf::load-source-op asdf::cl-source-file) (asdf::o asdf::c) asdf::o asdf::c asdf::component-pathname asdf::source #:g20436 asdf::last-loaded-as-source #:g20437 :external-format asdf::component-external-format load #Y(nil nil nil (26 13 2 14 10 13 3 19 1 11 12 19 3 12 29) #181# #1# 0) asdf::call-with-around-compile-hook get-universal-time #:g20438 (setf asdf::component-property) #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 45 6 10 1 45 7 1 8 45 9 13 3 34 13 12 19 2 14 39 4 19 0 15 45 16 13 0 13 2 13 1 33 17 18 3 43 1 43 2 43 1 29) #181# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #182=#A(t (8) (asdf::perform (asdf::load-source-op asdf::static-file) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #182# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #183=#A(t (8) (asdf::output-files (asdf::load-source-op asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #183# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #184=#A(t (20) (asdf::component-depends-on (asdf::load-source-op asdf::component) (asdf::o asdf::c) asdf::o asdf::c asdf::load-op asdf::what-would-load-op-do #:loop-list20448 asdf::co asdf::op #:loop-list-head20449 #:loop-list-tail20450 0 #23# eq asdf::load-source-op rplacd #Y(nil nil nil (24 45 3 24 45 4 26 58 60 108 15 5 13 1 19 2 0 45 6 77 77 13 0 46 7 46 8 46 9 75 6 1 45 10 10 0 45 11 57 12 61 2 2 59 10 5 2 39 4 35 0 1 10 5 4 45 13 10 0 4 51 4 10 0 5 51 0 10 0 51 5 43 1 10 5 5 51 5 13 3 1 5 17 14 39 14 13 1 15 15 10 4 3 6 1 51 1 17 16 35 0 0 10 2 5 73 36 7 62 73 43 2 43 3 43 1 63 29) #184# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #185=#A(t (13) (asdf::operation-done-p (asdf::load-source-op asdf::source-file) (asdf::o asdf::c) asdf::o asdf::c asdf::last-loaded-as-source asdf::component-property asdf::component-pathname asdf::safe-file-write-date <= #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 19 2 6 73 39 22 13 0 19 1 7 12 19 1 8 12 13 0 15 5 19 2 6 12 19 2 9 29) #185# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #186=#A(t (10) (asdf::operation-description (asdf::load-source-op t) (asdf::operation asdf::component) asdf::operation asdf::component "~@<Loading source of ~3i~_~A~@:>" format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #186# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #187=#A(t (10) (asdf::operation-description (asdf::load-source-op asdf::module) (asdf::operation asdf::component) asdf::operation asdf::component "~@<Loaded source of ~3i~_~A~@:>" format #Y(nil nil nil (24 45 3 24 45 4 26 77 15 5 13 0 19 3 6 29) #187# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::test-op (asdf::operation) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #188=#A(t (8) (asdf::perform (asdf::test-op asdf::component) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #188# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 14 7 15 8 19 8 9 29) #189=#A(t (10) (asdf::operation-done-p (asdf::test-op asdf::system) (asdf::operation asdf::c) asdf::operation asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #189# #1# 0) t :documentation "Testing a system is _never_ done." clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 9 12 14 10 19 6 11 29) #190=#A(t (12) (asdf::component-depends-on (:around) (asdf::test-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::load-op asdf::component-name call-next-method #Y(nil nil nil (24 45 4 24 45 5 26 15 6 13 0 19 1 7 6 2 12 19 0 8 3 73 29) #190# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::operate fmakunbound proclaim ((notinline asdf::operate)) mapc :delete-methods t :lambda-list (asdf::operation-class asdf::system &key &allow-other-keys) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::perform-plan fmakunbound proclaim ((notinline asdf::perform-plan)) mapc :delete-methods t :lambda-list (asdf::plan &key) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::plan-operates-on-p fmakunbound proclaim ((notinline asdf::plan-operates-on-p)) mapc :delete-methods t :lambda-list (asdf::plan asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 41 12 19 2 42 1 0 73 29) #191=#A(t (43) (asdf::cleanup-upgraded-asdf fmakunbound proclaim ((notinline asdf::cleanup-upgraded-asdf)) mapc asdf::old-version asdf::asdf-version asdf::new-version equal asdf::version-satisfies "~&~@<; ~@;Upgraded ASDF from version ~A to version ~A~@:>~%" asdf::asdf-message "~&~@<; ~@;Downgraded ASDF from version ~A to version ~A~@:>~%" warn "~&~@<; ~@;Changed ASDF from version ~A to incompatible version ~A~@:>~%" asdf::find-system :asdf asdf::find-symbol* asdf::asdf asdf::make-defined-systems-table asdf::*defined-systems* asdf::register-system asdf::*systems-being-defined* #:g20467 #:loop-hashtab-20465 asdf::name #:loop-it-20468 si::hash-table-iterator #:loop-hashtab-next-20466 #:loop-list-head20472 #:loop-list-tail20473 0 #:loop-hash-val-temp-20469 #:loop-hash-key-temp-20470 #:loop-hash-predicate-var-20471 rplacd asdf::l clrhash si::%dolist-var asdf::s t #Y(asdf::cleanup-upgraded-asdf nil nil (24 45 5 26 19 0 6 45 7 13 1 10 0 17 8 76 73 39 224 13 0 13 1 19 2 9 39 12 15 10 13 1 13 0 19 3 11 38 30 13 1 13 0 19 2 9 39 12 15 12 13 1 13 0 19 3 13 38 10 15 14 13 1 13 0 19 3 11 15 15 14 16 19 2 17 12 14 16 20 1 23 45 18 19 0 19 52 20 13 0 19 1 21 11 22 39 141 58 60 99 77 77 14 22 77 46 23 46 24 46 25 46 26 10 2 16 27 45 28 75 6 1 45 29 10 0 45 30 57 31 61 2 2 51 13 3 20 0 23 47 2 32 47 1 33 45 34 10 0 39 9 10 2 51 10 10 1 51 8 10 0 51 7 43 3 76 39 4 35 0 1 13 1 10 5 6 1 51 1 17 35 35 0 0 10 2 5 73 36 8 62 43 2 43 1 43 4 63 45 36 11 22 16 37 10 0 45 38 75 45 39 38 17 10 1 4 51 0 13 0 77 19 2 15 10 1 5 51 1 10 1 40 -19 43 2 43 1 11 40 73 43 1 43 1 29) #191# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #192=#A(t (17) (asdf::upgrade-asdf fmakunbound proclaim ((notinline asdf::upgrade-asdf)) mapc asdf::asdf-version asdf::version (or style-warning warning) muffle-warning si::*handler-clusters* asdf::load-op :asdf :verbose asdf::operate asdf::cleanup-upgraded-asdf #Y(asdf::upgrade-asdf nil nil (26 19 0 5 45 6 15 7 33 8 3 6 1 12 11 9 3 48 9 15 10 14 11 14 12 77 19 4 13 44 1 13 0 19 1 14 43 1 29) #192# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #193=#A(t (15) (asdf::plan-operates-on-p (list list) (asdf::plan asdf::component-path) asdf::plan asdf::component-path cdr mapcar :test equal :key asdf::component-find-path find #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 2 6 12 14 7 15 8 14 9 15 10 19 6 11 29) #193# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #194=#A(t (16) (asdf::perform-plan (list) (asdf::steps &key) asdf::steps (t) *package* *readtable* #:loop-list20480 asdf::component asdf::op 0 #23# asdf::perform-with-restarts #Y(nil nil nil (24 45 3 28 4 14 5 14 6 49 6 49 5 77 77 13 0 46 7 46 8 46 9 57 10 61 2 2 45 10 3 2 39 4 35 0 1 10 3 4 45 11 10 0 4 51 2 10 0 5 51 0 10 0 51 3 43 1 10 3 5 51 3 13 1 13 2 19 2 12 35 0 0 62 73 43 3 44 2 29) #194# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 52 12 14 53 19 6 54 29) #195=#A(t (55) (asdf::operate (t t) (asdf::operation-class asdf::system &rest asdf::args &key asdf::force asdf::force-not asdf::verbose asdf::version &allow-other-keys) asdf::operation-class asdf::system asdf::args (t :version :verbose :force-not :force) asdf::force asdf::force-not asdf::verbose asdf::version asdf::*asdf-verbose* *standard-output* make-broadcast-stream asdf::*verbose-out* make-instance :original-initargs apply asdf::op #:g20487 typep #196=(or string symbol) asdf::find-system (asdf::system #196#) si::etypecase-error asdf::*systems-being-operated* asdf::systems-being-operated :test equal make-hash-table #:g20488 si::do-check-type asdf::coerce-name si::hash-set "asdf" gethash asdf::upgrade-asdf :asdf asdf::find-symbol* #Y(asdf::upgrade nil nil (26 15 34 14 25 19 2 35 76 73 39 23 19 0 36 15 0 14 37 19 2 38 12 13 10 13 1 13 8 19 4 17 36 3 29) #195# #1# 0) asdf::version-satisfies asdf::missing-component-of-version :requires :version error asdf::traverse asdf::plan ("asdf") asdf::plan-operates-on-p asdf::perform-plan #Y(nil nil nil (26 10 2 48 11 10 2 39 5 11 12 38 4 19 0 13 48 14 15 15 13 7 14 16 13 5 13 5 19 5 17 45 18 10 7 45 19 13 0 15 4 19 2 20 39 5 10 8 38 24 13 0 15 21 19 2 20 39 8 13 8 19 1 22 38 8 13 0 15 23 19 2 24 43 1 45 4 11 25 45 26 10 0 40 8 14 27 15 28 19 2 29 48 25 10 1 45 30 13 0 15 4 19 2 20 76 39 13 13 0 15 4 77 15 4 19 4 31 51 2 43 1 13 1 19 1 32 12 14 25 13 1 19 3 33 30 1 39 10 1 39 5 32 0 18 0 13 2 13 5 19 2 40 76 39 14 15 41 14 42 13 2 14 43 13 5 19 5 44 13 3 13 2 19 2 45 45 46 13 0 15 47 19 2 48 39 5 32 1 18 0 13 0 19 1 49 13 4 13 0 72 2 43 1 43 1 43 3 44 3 29) #195# #1# 0) asdf::call-with-system-definitions #Y(nil nil nil (24 45 3 24 45 4 27 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 22 40 2 77 46 9 22 40 2 77 46 10 57 0 60 8 34 50 12 19 1 51 63 29) #195# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #197=#A(t (17) (asdf::oos fmakunbound proclaim ((notinline asdf::oos)) mapc asdf::operation-class asdf::system asdf::args (t :version :verbose :force-not :force) asdf::force asdf::force-not asdf::verbose asdf::version asdf::operate apply #Y(asdf::oos nil nil (24 45 5 24 45 6 27 45 7 28 8 22 40 2 77 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 15 13 13 6 13 5 13 4 19 4 14 29) #197# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 45 1 1 2 45 3 1 4 45 5 77 15 6 13 2 19 3 7 45 8 13 0 13 2 13 1 33 9 18 3 43 1 43 2 1 10 45 11 1 4 45 12 10 2 45 13 13 0 13 2 13 1 33 14 18 3 43 1 43 2 43 1 29) #A(t (15) ("Operate does three things:

1. It creates an instance of OPERATION-CLASS using any keyword parameters
as initargs.
2. It finds the  asdf-system specified by SYSTEM (possibly loading
it from disk).
3. It then calls TRAVERSE with the operation and system as arguments

The traverse operation is wrapped in WITH-COMPILATION-UNIT and error
handling code. If a VERSION argument is supplied, then operate also
ensures that the system found satisfies it using the VERSION-SATISFIES
method.

Note that dependencies may cause the operation to invoke other
operations on the system or its components: the new operations will be
created with the same initargs as the original one.
" asdf::operate-docstring asdf::oos #:g20493 function #:g20494 "Short for _operate on system_ and an alias for the OPERATE function.~%~%~a" format #:g20495 (setf documentation) asdf::operate #:g20496 #:g20497 #:g20498 (setf documentation))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #198=#A(t (17) (asdf::load-system fmakunbound proclaim ((notinline asdf::load-system)) mapc asdf::system asdf::keys (t :version :verbose :force) asdf::force asdf::verbose asdf::version asdf::operate asdf::*load-system-operation* apply t #Y(asdf::load-system nil nil (24 45 5 27 45 6 28 7 22 40 2 77 46 8 22 40 2 77 46 9 22 40 2 77 46 10 15 11 14 12 13 4 13 3 19 4 13 11 14 73 29) #198# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #199=#A(t (10) (asdf::load-systems fmakunbound proclaim ((notinline asdf::load-systems)) mapc asdf::systems asdf::load-system map #Y(asdf::load-systems nil nil (27 45 5 77 15 6 13 0 19 3 7 29) #199# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #200=#A(t (9) (asdf::component-loaded-p asdf::c asdf::load-op asdf::find-component asdf::component-operation-times gethash t #Y(asdf::component-loaded-p nil nil (24 45 1 26 15 2 13 0 77 19 2 3 12 19 1 4 12 19 2 5 73 39 4 11 6 73 29) #200# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #201=#A(t (6) (asdf::loaded-systems asdf::component-loaded-p asdf::registered-systems remove-if-not #Y(asdf::loaded-systems nil nil (26 15 1 19 0 2 12 19 2 3 29) #201# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #202=#A(t (10) (asdf::require-system asdf::s asdf::keys (t) asdf::load-system :force-not asdf::loaded-systems apply #Y(asdf::require-system nil nil (24 45 1 27 45 2 28 3 15 4 13 1 14 5 19 0 6 12 13 0 19 5 7 29) #202# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #203=#A(t (17) (asdf::compile-system fmakunbound proclaim ((notinline asdf::compile-system)) mapc asdf::system asdf::args (t :version :verbose :force) asdf::force asdf::verbose asdf::version asdf::operate asdf::compile-op apply t #Y(asdf::compile-system nil nil (24 45 5 27 45 6 28 7 22 40 2 77 46 8 22 40 2 77 46 9 22 40 2 77 46 10 15 11 15 12 13 4 13 3 19 4 13 11 14 73 29) #203# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #204=#A(t (17) (asdf::test-system fmakunbound proclaim ((notinline asdf::test-system)) mapc asdf::system asdf::args (t :version :verbose :force) asdf::force asdf::verbose asdf::version asdf::operate asdf::test-op apply t #Y(asdf::test-system nil nil (24 45 5 27 45 6 28 7 22 40 2 77 46 8 22 40 2 77 46 9 22 40 2 77 46 10 15 11 15 12 13 4 13 3 19 4 13 11 14 73 29) #204# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #205=#A(t (10) (asdf::load-pathname fmakunbound proclaim ((notinline asdf::load-pathname)) mapc *load-pathname* *compile-file-pathname* asdf::resolve-symlinks* #Y(asdf::load-pathname nil nil (26 11 5 73 40 4 11 6 73 12 19 1 7 29) #205# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 14 12 19 2 15 1 0 73 29) #206=#A(t (16) (asdf::determine-system-pathname fmakunbound proclaim ((notinline asdf::determine-system-pathname)) mapc pathname asdf::load-pathname asdf::file-pathname asdf::pathname-directory-pathname asdf::directory-pathname :type :directory asdf::subpathname asdf::default-directory #Y(asdf::determine-system-pathname nil nil (24 45 5 26 19 0 6 45 7 10 0 39 6 13 0 19 1 8 45 9 10 2 39 12 13 0 13 2 14 10 14 11 19 4 12 73 40 9 10 0 73 40 4 19 0 13 43 2 29) #206# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 16 12 19 2 17 1 0 73 29) #207=#A(t (18) (asdf::find-class* fmakunbound proclaim ((notinline asdf::find-class*)) mapc asdf::x t asdf::errorp asdf::environment #:g20500 #208=(or standard-class built-in-class) typep symbol find-class (#208# symbol) si::etypecase-error #Y(asdf::find-class* nil nil (24 45 5 25 40 3 14 6 46 7 25 40 2 77 46 8 26 10 2 45 9 13 0 15 10 19 2 11 39 6 10 3 73 38 28 13 0 15 12 19 2 11 39 12 13 3 13 2 13 1 19 3 13 38 8 13 0 15 14 19 2 15 43 1 29) #207# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 27 12 19 2 28 1 0 73 29) #209=#A(t (29) (asdf::class-for-type fmakunbound proclaim ((notinline asdf::class-for-type)) mapc asdf::parent type *package* asdf::find-symbol* :asdf #:loop-list20503 symbol class 0 find-class asdf::component subtypep :file eq asdf::module #:loop-it-20504 asdf::module-default-component-class asdf::component-parent asdf::*default-component-class* asdf::find-class* "don't recognize component type ~A" asdf::sysdef-error #Y(asdf::class-for-type nil nil (24 45 5 24 45 6 26 58 60 96 77 13 1 13 1 14 7 19 2 8 12 13 1 14 9 19 2 8 6 3 12 46 10 46 11 75 45 12 57 13 61 2 2 56 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 39 7 13 2 77 19 2 14 51 1 10 1 39 12 13 1 15 15 19 1 14 12 19 2 16 39 6 10 1 73 36 4 35 0 0 62 43 1 43 2 63 73 40 87 13 0 11 17 17 18 39 69 58 60 55 75 45 19 75 45 20 57 13 61 2 6 37 10 5 51 2 10 2 76 39 4 35 0 1 13 2 19 1 21 51 1 39 6 10 1 73 36 3 13 2 19 1 22 51 2 35 0 0 62 43 1 43 1 63 73 40 4 11 23 73 12 77 19 2 24 73 40 8 15 25 13 0 19 2 26 29) #209# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 21 12 19 2 22 1 0 73 29) #210=#A(t (23) (asdf::maybe-add-tree fmakunbound proclaim ((notinline asdf::maybe-add-tree)) mapc asdf::tree asdf::op1 asdf::op2 asdf::c assoc asdf::first-op-tree asdf::it :test equal find #:g20509 #:g20510 rplacd #:g20511 acons #:g20512 #Y(asdf::maybe-add-tree nil nil (24 45 5 24 45 6 24 45 7 24 45 8 26 13 2 13 3 19 2 9 45 10 10 0 39 99 13 2 10 0 5 12 19 2 9 45 11 10 0 39 45 13 2 10 0 5 12 14 12 33 13 12 19 4 14 39 3 38 25 10 0 45 15 13 3 10 1 5 3 45 16 13 1 10 0 17 17 10 0 43 1 43 1 38 33 10 1 45 18 13 4 10 3 6 1 12 10 2 5 12 19 3 19 45 20 13 1 10 0 17 17 10 0 43 1 43 1 43 1 10 4 73 38 17 13 3 13 2 10 1 6 2 6 1 12 13 4 19 3 19 43 1 29) #210# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #211=#A(t (15) (asdf::union-of-dependencies fmakunbound proclaim ((notinline asdf::union-of-dependencies)) mapc asdf::deps asdf::new-tree si::%dolist-var asdf::dep asdf::op-tree asdf::op asdf::c asdf::maybe-add-tree #Y(asdf::union-of-dependencies nil nil (27 45 5 75 45 6 10 1 45 7 75 45 8 38 105 10 1 4 51 0 10 0 45 7 75 45 9 38 80 10 1 4 51 0 10 0 5 45 7 75 45 10 38 54 10 1 4 51 0 10 0 5 45 7 75 45 11 38 28 10 1 4 51 0 13 8 10 4 4 12 10 2 4 12 13 0 19 4 12 51 8 10 1 5 51 1 10 1 40 -30 43 2 10 1 5 51 1 10 1 40 -56 43 2 10 1 5 51 1 10 1 40 -82 43 2 10 1 5 51 1 10 1 40 -107 43 2 10 0 73 43 1 29) #211# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*serial-depends-on* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #212=#A(t (14) (asdf::sysdef-error-component fmakunbound proclaim ((notinline asdf::sysdef-error-component)) mapc asdf::msg type asdf::name asdf::value "~&~@<The value specified for ~(~A~) ~A is ~S~@:>" asdf::strcat asdf::sysdef-error #Y(asdf::sysdef-error-component nil nil (24 45 5 24 45 6 24 45 7 24 45 8 26 13 3 15 9 19 2 10 12 13 2 13 1 13 0 19 4 11 29) #212# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 17 12 19 2 18 1 0 73 29) #213=#A(t (19) (asdf::check-component-input fmakunbound proclaim ((notinline asdf::check-component-input)) mapc type asdf::name asdf::weakly-depends-on asdf::depends-on asdf::components asdf::in-order-to listp ":depends-on must be a list." asdf::sysdef-error-component ":weakly-depends-on must be a list." ":components must be NIL or a list of components." ":in-order-to must be NIL or a list of components." #Y(asdf::check-component-input nil nil (24 45 5 24 45 6 24 45 7 24 45 8 24 45 9 24 45 10 26 10 2 16 11 76 39 12 15 12 13 5 13 4 13 2 19 4 13 10 3 16 11 76 39 12 15 14 13 5 13 4 13 3 19 4 13 10 1 16 11 76 39 12 15 15 13 5 13 4 13 1 19 4 13 10 0 16 11 39 6 10 0 4 16 11 76 73 39 12 15 16 13 5 13 4 13 0 19 4 13 29) #213# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 18 12 19 2 19 1 0 73 29) #214=#A(t (20) (asdf::%remove-component-inline-methods fmakunbound proclaim ((notinline asdf::%remove-component-inline-methods)) mapc asdf::component asdf::+asdf-methods+ si::%dolist-var asdf::name asdf::m symbol-function remove-method #Y(nil nil nil (24 45 9 26 10 1 16 10 12 13 0 19 2 11 29) #214# #1# 0) asdf::component-inline-methods map #:g20547 #:g20548 (setf asdf::component-inline-methods) #Y(asdf::%remove-component-inline-methods nil nil (24 45 5 26 11 6 45 7 75 45 8 38 24 10 1 4 51 0 77 34 12 12 13 2 19 1 13 12 19 3 14 10 1 5 51 1 10 1 40 -26 43 2 10 0 45 15 75 45 16 13 0 13 1 33 17 18 2 43 1 43 1 29) #214# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 41 12 19 2 42 1 0 73 29) #215=#A(t (43) (asdf::%define-component-inline-methods fmakunbound proclaim ((notinline asdf::%define-component-inline-methods)) mapc asdf::ret rest asdf::+asdf-methods+ si::%dolist-var asdf::name symbol-name :keyword intern keyword asdf::data asdf::key asdf::value 0 second eq #:g20598 #:g20599 si::dm-too-few-arguments asdf::op asdf::qual #:g20600 #:g20601 asdf::o asdf::c asdf::body si::dm-too-many-arguments defmethod eql eval #:g20604 #:g20602 asdf::component-inline-methods adjoin #:g20603 (setf asdf::component-inline-methods) cddr #Y(asdf::%define-component-inline-methods nil nil (24 45 5 24 45 6 26 11 7 45 8 75 45 9 38 285 10 1 4 51 0 10 0 16 10 12 14 11 19 2 12 45 13 75 45 14 75 45 15 75 45 16 57 17 61 2 6 239 10 7 51 3 10 3 4 51 2 10 3 16 18 51 1 10 3 76 39 4 35 0 1 13 2 10 4 17 19 39 199 10 1 45 20 10 0 45 21 10 0 76 39 6 13 1 19 1 22 10 0 4 12 10 0 5 51 0 22 45 23 10 1 76 39 6 13 2 19 1 22 10 1 4 12 10 1 5 51 1 22 45 24 10 2 76 39 6 13 3 19 1 22 10 2 4 12 10 2 5 51 2 22 45 25 10 0 45 26 10 0 76 39 6 13 5 19 1 22 10 0 4 12 10 0 5 51 0 22 45 27 10 1 76 39 6 13 6 19 1 22 10 1 4 12 10 1 5 51 1 22 45 28 10 6 45 29 10 3 39 6 13 8 19 1 30 15 31 13 14 13 5 13 2 10 6 6 2 12 13 1 15 32 10 17 6 2 6 2 6 2 12 10 0 7 5 16 33 45 34 10 18 45 35 13 1 13 0 19 1 36 12 19 2 37 45 38 13 0 13 1 33 39 18 2 43 3 43 9 10 3 16 40 51 3 35 0 0 62 43 1 43 1 43 1 43 1 10 1 5 51 1 10 1 40 -287 75 73 43 2 29) #215# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #216=#A(t (11) (asdf::%refresh-component-inline-methods fmakunbound proclaim ((notinline asdf::%refresh-component-inline-methods)) mapc asdf::component rest asdf::%remove-component-inline-methods asdf::%define-component-inline-methods #Y(asdf::%refresh-component-inline-methods nil nil (24 45 5 24 45 6 26 13 1 19 1 7 13 1 13 0 19 2 8 29) #216# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 110 12 19 2 111 1 0 73 29) #217=#A(t (112) (asdf::parse-component-form fmakunbound proclaim ((notinline asdf::parse-component-form)) mapc asdf::parent asdf::options #:g20635 #:g20636 si::dm-too-few-arguments type asdf::name rest :components si::search-keyword #:g20637 si::missing-keyword eq asdf::components :pathname #:g20638 pathname :perform #:g20639 asdf::perform :explain #:g20640 asdf::explain :output-files #:g20641 asdf::output-files :operation-done-p #:g20642 asdf::operation-done-p :weakly-depends-on #:g20643 asdf::weakly-depends-on :depends-on #:g20644 asdf::depends-on :serial #:g20645 asdf::serial :in-order-to #:g20646 asdf::in-order-to :do-first #:g20647 asdf::do-first :version #:g20648 asdf::version asdf::versionp (:version :do-first :in-order-to :serial :depends-on :weakly-depends-on :operation-done-p :output-files :explain :perform :pathname :components) t si::check-keyword asdf::check-component-input asdf::find-component asdf::class-for-type typep asdf::duplicate-names :name error asdf::parse-version "~@<Invalid version ~S for component ~S~@[ of ~S~]~@:>" warn asdf::coerce-name :parent (asdf::components pathname asdf::perform asdf::explain asdf::output-files asdf::operation-done-p asdf::weakly-depends-on asdf::depends-on asdf::serial asdf::in-order-to) asdf::remove-keys asdf::args asdf::ret asdf::x asdf::find-system #Y(nil nil nil (24 45 72 26 13 0 77 19 2 73 29) #217# #1# 0) complement remove-if #:g20650 append asdf::*serial-depends-on* reinitialize-instance apply make-instance asdf::component-pathname asdf::module #:g20653 #:loop-list20655 asdf::c-form asdf::c #:loop-list-head20656 #:loop-list-tail20657 0 asdf::component-name rplacd #:g20654 (setf asdf::module-components) asdf::compute-module-components-by-name #:g20659 #:g20660 (setf asdf::component-load-dependencies) #:g20661 asdf::compile-op asdf::load-op asdf::union-of-dependencies #:g20662 (setf asdf::component-in-order-to) #:g20663 #:g20664 (setf asdf::component-do-first) asdf::%refresh-component-inline-methods #Y(asdf::parse-component-form nil nil (24 45 5 24 45 6 26 10 0 45 7 10 0 45 8 10 0 76 39 6 13 1 19 1 9 10 0 4 12 10 0 5 51 0 22 45 10 10 1 76 39 6 13 2 19 1 9 10 1 4 12 10 1 5 51 1 22 45 11 10 2 45 12 13 3 15 13 19 2 14 45 15 13 0 1 16 17 17 39 4 75 38 3 10 0 45 18 13 5 15 19 19 2 14 45 20 13 0 1 16 17 17 39 4 75 38 3 10 0 45 21 13 7 15 22 19 2 14 45 23 13 0 1 16 17 17 39 4 75 38 3 10 0 45 24 13 9 15 25 19 2 14 45 26 13 0 1 16 17 17 39 4 75 38 3 10 0 45 27 13 11 15 28 19 2 14 45 29 13 0 1 16 17 17 39 4 75 38 3 10 0 45 30 13 13 15 31 19 2 14 45 32 13 0 1 16 17 17 39 4 75 38 3 10 0 45 33 13 15 15 34 19 2 14 45 35 13 0 1 16 17 17 39 4 75 38 3 10 0 45 36 13 17 15 37 19 2 14 45 38 13 0 1 16 17 17 39 4 75 38 3 10 0 45 39 13 19 15 40 19 2 14 45 41 13 0 1 16 17 17 39 4 75 38 3 10 0 45 42 13 21 15 43 19 2 14 45 44 13 0 1 16 17 17 39 4 75 38 3 10 0 45 45 13 23 15 46 19 2 14 45 47 13 0 1 16 17 17 39 4 75 38 3 10 0 45 48 13 25 15 49 19 2 14 45 50 13 0 1 16 17 17 39 4 75 38 3 10 0 45 51 13 1 1 16 17 17 76 45 52 13 28 15 53 14 54 19 3 55 13 27 13 26 13 11 13 9 13 23 13 5 19 6 56 10 31 39 30 13 31 13 26 19 2 57 39 21 13 31 13 26 19 2 57 12 13 31 13 27 19 2 58 12 19 2 59 76 39 10 15 60 14 61 13 26 19 3 62 10 0 39 21 13 1 77 19 2 63 76 39 12 15 64 13 1 13 26 13 31 19 4 65 14 61 13 26 19 1 66 12 14 19 13 21 14 67 13 31 15 68 13 25 19 2 69 7 7 45 70 13 32 13 27 19 2 57 45 71 10 13 39 26 34 74 12 19 1 75 12 13 13 19 2 76 45 77 13 12 13 0 19 2 78 51 12 43 1 11 79 39 8 14 79 10 11 3 51 11 10 0 39 12 15 80 13 0 13 1 19 3 81 38 18 15 82 13 33 13 29 19 2 58 12 13 1 19 3 81 51 0 13 0 19 1 83 13 0 15 84 19 2 59 39 131 75 48 79 10 0 45 85 58 60 100 77 13 27 46 86 46 87 75 45 88 75 45 11 75 6 1 45 89 10 0 45 90 57 91 61 2 2 56 10 6 2 39 4 35 0 1 10 6 4 51 5 10 6 5 51 6 13 9 13 5 19 2 0 51 4 13 4 19 1 92 51 3 13 1 10 4 6 1 51 1 17 93 10 18 39 5 10 3 52 79 35 0 0 10 2 5 73 36 7 62 43 2 43 1 43 1 43 2 63 45 94 13 0 13 1 33 95 18 2 43 1 43 1 44 1 13 0 19 1 96 10 0 45 97 10 12 45 98 13 0 13 1 33 99 18 2 43 1 43 1 10 0 45 100 13 8 15 101 15 101 10 12 7 2 6 2 12 15 102 15 102 10 12 7 2 6 2 6 2 12 19 2 103 45 104 13 0 13 1 33 105 18 2 43 1 43 1 10 0 45 106 13 6 15 101 15 102 10 12 7 2 6 2 6 1 12 19 2 103 45 107 13 0 13 1 33 108 18 2 43 1 43 1 13 0 13 27 19 2 109 10 0 73 43 2 43 30 29) #217# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #218=#A(t (14) (asdf::reset-system fmakunbound proclaim ((notinline asdf::reset-system)) mapc asdf::system asdf::keys (t) asdf::proto-system change-class reinitialize-instance apply #Y(asdf::reset-system nil nil (24 45 5 27 45 6 28 7 13 1 15 8 19 2 9 12 15 5 19 2 9 15 10 13 1 13 0 19 3 11 29) #218# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 41 12 19 2 42 1 0 73 29) #219=#A(t (43) (asdf::do-defsystem fmakunbound proclaim ((notinline asdf::do-defsystem)) mapc asdf::name asdf::options (t :defsystem-depends-on :class :pathname) pathname asdf::system class asdf::defsystem-depends-on asdf::coerce-name asdf::system-registered-p asdf::registered get-universal-time rplaca :name make-instance asdf::register-system asdf::registered! :source-file asdf::load-pathname asdf::reset-system (:class) asdf::remove-keys asdf::component-options asdf::*systems-being-defined* si::hash-set asdf::load-systems apply asdf::class-for-type type-of eq change-class :module :pathname asdf::determine-system-pathname asdf::parse-component-form #Y(nil nil nil (26 13 4 19 1 12 45 5 13 0 19 1 13 45 14 10 0 39 10 13 0 19 0 15 17 16 38 14 15 9 14 17 13 1 19 3 18 12 19 1 19 45 20 10 0 5 12 14 17 13 2 14 21 19 0 22 12 19 5 23 45 9 15 24 13 7 19 2 25 45 26 13 4 14 27 13 1 19 3 28 15 29 13 5 19 2 30 77 13 6 19 2 31 45 10 10 2 16 32 12 10 0 17 33 76 39 8 13 2 13 0 19 2 34 43 1 77 14 35 13 4 14 36 13 7 19 1 37 12 10 0 7 5 12 19 2 38 43 5 29) #219# #1# 0) asdf::call-with-system-definitions #Y(asdf::do-defsystem nil nil (24 45 5 27 45 6 28 7 22 40 2 77 46 8 22 40 3 15 9 46 10 22 40 2 77 46 11 34 39 12 19 1 40 29) #219# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 14 11 9 2 19 4 12 1 0 73 29) #220=#A(t (13) (asdf::defsystem #:g20672 #:g20671 #:g20673 si::dm-too-few-arguments asdf::name asdf::options apply 'asdf::do-defsystem quote #Y(asdf::defsystem nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 15 7 15 8 15 9 10 1 6 2 12 15 9 10 0 6 2 6 4 73 29) #220# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #221=#A(t (15) (asdf::run-shell-command fmakunbound proclaim ((notinline asdf::run-shell-command)) mapc asdf::control-string asdf::args format apply asdf::command "; $ ~A~%" asdf::asdf-message ext::system #Y(asdf::run-shell-command nil nil (24 45 5 27 45 6 15 7 77 13 1 13 0 19 4 8 45 9 15 10 13 0 19 2 11 13 0 19 1 12 43 1 29) #221# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #222=#A(t (9) (asdf::system-definition-pathname fmakunbound proclaim ((notinline asdf::system-definition-pathname)) mapc asdf::x asdf::system-source-file #Y(asdf::system-definition-pathname nil nil (24 45 5 26 13 0 19 1 6 29) #222# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #223=#A(t (14) (asdf::system-source-file (asdf::system) (asdf::system) asdf::system asdf::source-file slot-boundp asdf::component-name asdf::component-pathname asdf::probe-asd asdf::%set-system-source-file slot-value #Y(nil nil nil (24 45 3 26 13 0 15 4 19 2 5 76 39 22 13 0 19 1 6 12 13 0 19 1 7 12 19 2 8 12 13 0 19 2 9 13 0 15 4 19 2 10 29) #223# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #224=#A(t (8) (asdf::system-source-file (string) (asdf::system-name) asdf::system-name asdf::find-system #Y(nil nil nil (24 45 3 26 13 0 19 1 4 12 19 1 0 29) #224# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #225=#A(t (8) (asdf::system-source-file (symbol) (asdf::system-name) asdf::system-name asdf::find-system #Y(nil nil nil (24 45 3 26 13 0 19 1 4 12 19 1 0 29) #225# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #226=#A(t (10) (asdf::system-source-directory fmakunbound proclaim ((notinline asdf::system-source-directory)) mapc asdf::system-designator asdf::system-source-file asdf::pathname-directory-pathname #Y(asdf::system-source-directory nil nil (24 45 5 26 13 0 19 1 6 12 19 1 7 29) #226# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #227=#A(t (12) (asdf::relativize-directory fmakunbound proclaim ((notinline asdf::relativize-directory)) mapc directory stringp :relative :absolute eq #Y(asdf::relativize-directory nil nil (24 45 5 26 10 0 16 6 39 10 14 7 10 0 6 2 73 38 23 10 0 4 12 11 8 17 9 39 10 14 7 10 0 5 3 73 38 4 10 0 73 29) #227# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #228=#A(t (15) (asdf::relativize-pathname-directory fmakunbound proclaim ((notinline asdf::relativize-pathname-directory)) mapc asdf::pathspec pathname asdf::p :directory pathname-directory asdf::relativize-directory :defaults make-pathname #Y(asdf::relativize-pathname-directory nil nil (24 45 5 26 10 0 16 6 45 7 14 8 13 0 19 1 9 12 19 1 10 12 14 11 13 0 19 4 12 43 1 29) #228# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #229=#A(t (14) (asdf::system-relative-pathname fmakunbound proclaim ((notinline asdf::system-relative-pathname)) mapc asdf::system asdf::name (nil :type) type asdf::system-source-directory :type asdf::subpathname #Y(asdf::system-relative-pathname nil nil (24 45 5 24 45 6 28 7 22 40 2 77 46 8 13 2 19 1 9 12 13 1 14 10 13 0 19 4 11 29) #229# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #230=#A(t (15) (asdf::first-feature fmakunbound proclaim ((notinline asdf::first-feature)) mapc asdf::features si::%dolist-var asdf::x consp :or asdf::feature asdf::val asdf::featurep #Y(asdf::first-feature nil nil (24 45 5 26 58 60 75 10 1 45 6 75 45 7 38 57 10 1 4 51 0 10 0 16 8 39 16 10 0 4 12 14 9 10 0 5 3 12 72 2 38 7 13 0 13 0 72 2 47 1 10 45 11 13 1 19 1 12 39 6 10 0 73 36 4 43 2 10 1 5 51 1 10 1 40 -59 75 73 43 2 63 29) #230# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #231=#A(t (5) (asdf::implementation-type (:abcl (:acl :allegro) (:ccl :clozure) :clisp (:corman :cormanlisp) :cmu :ecl :gcl (:lw :lispworks) :mcl :mkcl :sbcl :scl :symbolics :xcl) asdf::first-feature #Y(asdf::implementation-type nil nil (26 15 1 19 1 2 29) #231# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #232=#A(t (5) (asdf::operating-system (:cygwin (:win :windows :mswindows :win32 :mingw32) (:linux :linux :linux-target) (:macosx :macosx :darwin :darwin-target :apple) (:solaris :solaris :sunos) (:bsd :bsd :freebsd :netbsd :openbsd) :unix :genera) asdf::first-feature #Y(asdf::operating-system nil nil (26 15 1 19 1 2 29) #232# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #233=#A(t (5) (asdf::architecture ((:x64 :amd64 :x86-64 :x86_64 :x8664-target (:and :word-size=64 :pc386)) (:x86 :x86 :i386 :i486 :i586 :i686 :pentium3 :pentium4 :pc386 :iapx386 :x8632-target) (:ppc64 :ppc64 :ppc64-target) (:ppc32 :ppc32 :ppc32-target :ppc :powerpc) :hppa64 :hppa :sparc64 (:sparc32 :sparc32 :sparc) :mipsel :mipseb :mips :alpha (:arm :arm :arm-target) :imach (:java :java :java-1.4 :java-1.5 :java-1.6 :java-1.7)) asdf::first-feature #Y(asdf::architecture nil nil (26 15 1 19 1 2 29) #233# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #234=#A(t (12) (asdf::lisp-version-string lisp-implementation-version asdf::s "~A~@[-~A~]" ext::lisp-implementation-vcs-id asdf::vcs-id length min subseq format #Y(asdf::lisp-version-string nil nil (26 19 0 1 45 2 77 15 3 13 0 19 0 4 45 5 13 0 9 0 10 0 16 6 12 9 8 19 2 7 12 19 3 8 12 43 1 19 4 9 12 10 0 6 2 4 73 43 1 29) #234# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 21 12 19 2 22 1 0 73 29) #235=#A(t (23) (asdf::implementation-identifier fmakunbound proclaim ((notinline asdf::implementation-identifier)) mapc #\_ asdf::x " /:;&^\\|?<>(){}[]$#`'\"" find #Y(nil nil nil (24 45 6 26 13 0 15 7 19 2 8 29) #235# #1# 0) "~(~a~@{~@[-~a~]~}~)" asdf::implementation-type lisp-implementation-type asdf::lisp-version-string lisp-implementation-version asdf::operating-system software-type asdf::architecture machine-type format substitute-if #Y(asdf::implementation-identifier nil nil (26 15 5 34 9 12 77 15 10 19 0 11 73 40 4 19 0 12 12 19 0 13 73 40 4 19 0 14 12 19 0 15 73 40 4 19 0 16 12 19 0 17 73 40 4 19 0 18 12 19 6 19 12 19 3 20 29) #235# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 6 12 19 2 7 1 0 73 29) #236=#A(t (8) (asdf::hostname fmakunbound proclaim ((notinline asdf::hostname)) mapc machine-instance #Y(asdf::hostname nil nil (26 19 0 5 29) #236# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #237=#A(t (6) (asdf::inter-directory-separator asdf::os-unix-p #\: #\; #Y(asdf::inter-directory-separator nil nil (26 19 0 1 39 6 1 2 73 38 4 1 3 73 29) #237# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #238=#A(t (10) (asdf::user-homedir fmakunbound proclaim ((notinline asdf::user-homedir)) mapc user-homedir-pathname asdf::pathname-directory-pathname asdf::truenamize #Y(asdf::user-homedir nil nil (26 19 0 5 12 19 1 6 12 19 1 7 29) #238# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #239=#A(t (21) (asdf::ensure-pathname* fmakunbound proclaim ((notinline asdf::ensure-pathname*)) mapc asdf::x asdf::want-absolute asdf::want-directory asdf::fmt asdf::args length plusp asdf::ensure-directory-pathname pathname asdf::p asdf::absolute-pathname-p "ignore relative pathname" "Invalid relative pathname ~A~@[ ~?~]" cerror #Y(asdf::ensure-pathname* nil nil (24 45 5 24 45 6 24 45 7 24 45 8 27 45 9 57 0 60 62 10 5 16 10 16 11 73 39 52 10 3 39 8 13 5 19 1 12 38 5 10 5 16 13 45 14 10 5 39 26 13 0 19 1 15 76 39 18 15 16 15 17 13 6 13 3 13 2 19 5 18 75 73 36 1 10 0 73 43 1 63 29) #239# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 22 12 19 2 23 1 0 73 29) #240=#A(t (24) (asdf::split-pathnames* fmakunbound proclaim ((notinline asdf::split-pathnames*)) mapc asdf::x asdf::want-absolute asdf::want-directory asdf::fmt asdf::args :separator asdf::inter-directory-separator string asdf::split-string #:loop-list20677 asdf::dir #:loop-list-head20678 #:loop-list-tail20679 0 asdf::ensure-pathname* apply rplacd #Y(asdf::split-pathnames* nil nil (24 45 5 24 45 6 24 45 7 24 45 8 27 45 9 58 60 92 77 13 5 14 10 19 0 11 16 12 12 19 3 13 12 46 14 46 15 75 6 1 45 16 10 0 45 17 57 18 61 2 2 45 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 15 19 13 3 13 9 13 8 13 7 13 6 19 6 20 6 1 51 1 17 21 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 29) #240# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #241=#A(t (15) (asdf::getenv-pathname fmakunbound proclaim ((notinline asdf::getenv-pathname)) mapc asdf::x (nil :want-directory :want-absolute) asdf::want-absolute asdf::want-directory asdf::getenv asdf::s "from (getenv ~S)" asdf::ensure-pathname* #Y(asdf::getenv-pathname nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 13 2 19 1 9 45 10 13 0 13 2 13 1 15 11 13 3 19 5 12 29) #241# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #242=#A(t (17) (asdf::getenv-pathnames fmakunbound proclaim ((notinline asdf::getenv-pathnames)) mapc asdf::x (nil :want-directory :want-absolute) asdf::want-absolute asdf::want-directory asdf::getenv asdf::s length plusp "from (getenv ~S) = ~S" asdf::split-pathnames* #Y(asdf::getenv-pathnames nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 13 2 19 1 9 45 10 10 0 16 11 16 12 73 39 16 13 0 13 2 13 1 15 13 13 3 13 0 19 6 14 29) #242# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #243=#A(t (12) (asdf::getenv-absolute-directory fmakunbound proclaim ((notinline asdf::getenv-absolute-directory)) mapc asdf::x :want-absolute t :want-directory asdf::getenv-pathname #Y(asdf::getenv-absolute-directory nil nil (24 45 5 26 13 0 14 6 14 7 14 8 14 7 19 5 9 29) #243# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #244=#A(t (12) (asdf::getenv-absolute-directories fmakunbound proclaim ((notinline asdf::getenv-absolute-directories)) mapc asdf::x :want-absolute t :want-directory asdf::getenv-pathnames #Y(asdf::getenv-absolute-directories nil nil (24 45 5 26 13 0 14 6 14 7 14 8 14 7 19 5 9 29) #244# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #245=#A(t (21) (asdf::get-folder-path fmakunbound proclaim ((notinline asdf::get-folder-path)) mapc asdf::folder #:g20681 :local-appdata "LOCALAPPDATA" asdf::getenv-absolute-directory :appdata "APPDATA" :common-appdata "ALLUSERSAPPDATA" "ALLUSERSPROFILE" "Application Data/" asdf::subpathname* (:local-appdata :appdata :common-appdata) si::ecase-error #Y(asdf::get-folder-path nil nil (24 45 5 26 10 0 45 6 10 0 42 7 8 15 8 19 1 9 38 42 42 10 8 15 11 19 1 9 38 32 42 12 22 15 13 19 1 9 73 40 12 15 14 19 1 9 12 15 15 19 2 16 38 8 13 0 15 17 19 2 18 43 1 29) #245# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 37 12 19 2 38 1 0 73 29) #246=#A(t (39) (asdf::user-configuration-directories fmakunbound proclaim ((notinline asdf::user-configuration-directories)) mapc asdf::os-unix-p "XDG_CONFIG_HOME" asdf::getenv-absolute-directory "common-lisp/" asdf::subpathname* "XDG_CONFIG_DIRS" asdf::getenv-absolute-directories #:loop-list20685 asdf::dir #:loop-list-head20686 #:loop-list-tail20687 0 "common-lisp/" rplacd asdf::os-windows-p :local-appdata asdf::get-folder-path "common-lisp/config/" :appdata "common-lisp/config/" asdf::user-homedir ".config/common-lisp/" asdf::subpathname append asdf::dirs asdf::absolute-pathname-p remove-if-not :from-end t :test equal remove-duplicates #Y(asdf::user-configuration-directories nil nil (26 19 0 5 73 39 92 15 6 19 1 7 12 15 8 19 2 9 12 58 60 75 77 15 10 19 1 11 12 46 12 46 13 75 6 1 45 14 10 0 45 15 57 16 61 2 2 37 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 13 3 15 17 19 2 9 6 1 51 1 17 18 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 3 73 12 19 0 19 73 39 27 14 20 19 1 21 12 15 22 19 2 9 12 14 23 19 1 21 12 15 24 19 2 9 6 2 73 12 19 0 25 12 15 26 19 2 27 6 1 12 19 3 28 45 29 33 30 12 13 0 19 2 31 12 14 32 14 33 14 34 15 35 19 5 36 43 1 29) #246# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 13 12 19 2 14 1 0 73 29) #247=#A(t (15) (asdf::system-configuration-directories fmakunbound proclaim ((notinline asdf::system-configuration-directories)) mapc asdf::os-unix-p (#P"/etc/common-lisp/") asdf::os-windows-p :common-appdata asdf::get-folder-path "common-lisp/config/" asdf::subpathname* asdf::it #Y(asdf::system-configuration-directories nil nil (26 19 0 5 39 6 1 6 73 38 35 19 0 7 73 39 29 14 8 19 1 9 12 15 10 19 2 11 45 12 10 0 39 8 10 0 6 1 73 38 3 75 73 43 1 29) #247# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 26 12 19 2 27 1 0 73 29) #248=#A(t (28) (asdf::in-first-directory fmakunbound proclaim ((notinline asdf::in-first-directory)) mapc asdf::dirs asdf::x (nil :direction) :input asdf::direction #:g20693 nil :probe asdf::probe-file* :output :io identity (:probe :input nil :io :output) si::ecase-error asdf::fun #:loop-list20691 asdf::dir #:loop-it-20692 0 asdf::ensure-directory-pathname asdf::merge-pathnames* #Y(asdf::in-first-directory nil nil (24 45 5 24 45 6 28 7 22 40 3 14 8 46 9 58 60 117 10 1 45 10 10 0 41 11 7 41 8 4 42 12 5 1 13 38 18 41 14 4 42 15 5 1 16 38 8 13 0 15 17 19 2 18 43 1 45 19 77 13 4 46 20 46 21 75 45 22 57 23 61 2 2 52 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 39 18 13 4 13 7 13 2 19 1 24 12 19 2 25 12 20 1 23 51 1 39 6 10 1 73 36 5 35 0 0 62 73 43 1 43 2 43 1 63 29) #248# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #249=#A(t (14) (asdf::in-user-configuration-directory fmakunbound proclaim ((notinline asdf::in-user-configuration-directory)) mapc asdf::x (nil :direction) :input asdf::direction asdf::user-configuration-directories :direction asdf::in-first-directory #Y(asdf::in-user-configuration-directory nil nil (24 45 5 28 6 22 40 3 14 7 46 8 19 0 9 12 13 1 14 10 13 0 19 4 11 29) #249# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #250=#A(t (14) (asdf::in-system-configuration-directory fmakunbound proclaim ((notinline asdf::in-system-configuration-directory)) mapc asdf::x (nil :direction) :input asdf::direction asdf::system-configuration-directories :direction asdf::in-first-directory #Y(asdf::in-system-configuration-directory nil nil (24 45 5 28 6 22 40 3 14 7 46 8 19 0 9 12 13 1 14 10 13 0 19 4 11 29) #250# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #251=#A(t (12) (asdf::configuration-inheritance-directive-p fmakunbound proclaim ((notinline asdf::configuration-inheritance-directive-p)) mapc asdf::x (:inherit-configuration :ignore-inherited-configuration) asdf::kw member asdf::length=n-p #Y(asdf::configuration-inheritance-directive-p nil nil (24 45 5 26 1 6 45 7 13 1 13 0 19 2 8 73 40 20 13 1 9 1 19 2 9 73 39 10 10 1 4 12 13 0 19 2 8 43 1 29) #251# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #252=#A(t (21) (asdf::report-invalid-form fmakunbound proclaim ((notinline asdf::report-invalid-form)) mapc asdf::reporter asdf::args #:g20695 null typep error asdf::invalid-configuration apply function #253=(or symbol string) cons append (null function #253# cons) si::etypecase-error #Y(asdf::report-invalid-form nil nil (24 45 5 27 45 6 10 1 45 7 13 0 15 8 19 2 9 39 12 15 10 15 11 13 1 19 3 12 38 70 13 0 15 13 19 2 9 39 10 13 2 13 1 19 2 12 38 52 13 0 15 14 19 2 9 39 12 15 10 13 2 13 1 19 3 12 38 32 13 0 15 15 19 2 9 39 16 15 12 13 2 13 1 19 2 16 12 19 2 12 38 8 13 0 15 17 19 2 18 43 1 29) #252# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*ignored-configuration-form* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 34 12 19 2 35 1 0 73 29) #254=#A(t (36) (asdf::validate-configuration-form fmakunbound proclaim ((notinline asdf::validate-configuration-form)) mapc asdf::form asdf::tag asdf::directive-validator (nil :invalid-form-reporter :location) asdf::location asdf::invalid-form-reporter consp eq t asdf::*ignored-configuration-form* :form :location asdf::report-invalid-form asdf::inherit asdf::ignore-invalid-p asdf::x #:loop-list20697 asdf::directive 0 asdf::configuration-inheritance-directive-p #:g20699 + :ignore-invalid-entries = :arguments "~@<One and only one of ~S or ~S is required.~@:>" :inherit-configuration :ignore-inherited-configuration nreverse #Y(asdf::validate-configuration-form nil nil (24 45 5 24 45 6 24 45 7 28 8 22 40 2 77 46 9 22 40 2 77 46 10 57 0 60 224 10 5 16 11 39 9 10 5 4 12 10 4 17 12 76 39 22 11 13 52 14 13 1 14 15 13 5 14 16 13 2 19 5 17 75 73 36 0 58 60 182 8 0 45 18 75 45 19 10 7 6 1 45 20 77 10 9 5 12 46 21 46 22 57 23 61 2 2 111 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 19 1 24 39 20 8 1 45 25 13 6 13 0 19 2 26 51 6 43 1 11 13 38 55 13 1 11 27 17 12 39 9 11 13 51 4 11 13 38 39 13 10 13 1 20 1 23 39 5 11 13 38 26 10 4 39 4 75 38 19 11 13 52 14 13 8 14 15 13 1 14 16 13 9 19 5 17 75 39 8 13 1 10 3 3 51 3 35 0 0 13 5 9 1 19 2 28 76 39 17 13 8 14 29 15 30 14 31 11 32 6 3 12 19 3 17 10 3 16 33 36 6 62 73 43 2 43 1 43 1 43 1 63 63 29) #254# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #255=#A(t (17) (asdf::validate-configuration-file fmakunbound proclaim ((notinline asdf::validate-configuration-file)) mapc asdf::file asdf::validator (nil :description) asdf::description asdf::read-file-forms asdf::forms asdf::length=n-p "~@<One and only one form allowed for ~A. Got: ~3i~_~S~@:>~%" error :location #Y(asdf::validate-configuration-file nil nil (24 45 5 24 45 6 28 7 22 40 2 77 46 8 13 2 19 1 9 45 10 13 0 9 1 19 2 11 76 39 10 15 12 13 1 13 0 19 3 13 13 2 10 0 4 12 14 14 13 3 20 3 23 43 1 29) #255# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #256=#A(t (12) (asdf::hidden-file-p fmakunbound proclaim ((notinline asdf::hidden-file-p)) mapc pathname pathname-name asdf::first-char #\. equal #Y(asdf::hidden-file-p nil nil (24 45 5 26 13 0 19 1 6 12 19 1 7 12 1 8 17 9 29) #256# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #257=#A(t (13) (asdf::directory* fmakunbound proclaim ((notinline asdf::directory*)) mapc asdf::pathname-spec asdf::keys (t) directory append apply #Y(asdf::directory* nil nil (24 45 5 27 45 6 28 7 15 8 13 1 13 0 77 19 2 9 12 19 3 10 29) #257# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 56 12 19 2 57 1 0 73 29) #258=#A(t (58) (asdf::validate-configuration-directory fmakunbound proclaim ((notinline asdf::validate-configuration-directory)) mapc directory asdf::tag asdf::validator (nil :invalid-form-reporter) asdf::invalid-form-reporter #:g20716 #:g20717 0 error si::temp #Y(nil nil nil (24 45 14 26 10 0 51 2 35 1 0 29) #258# #1# 0) si::*handler-clusters* asdf::hidden-file-p :name :wild :type "conf" :defaults make-pathname asdf::directory* remove-if condition string< :key namestring sort asdf::files #:loop-list20719 asdf::file #:loop-list-head20720 #:loop-list-tail20721 #:g20722 asdf::ignore-invalid-p asdf::read-file-forms #:loop-list20724 asdf::form #:loop-list-head20725 #:loop-list-tail20726 :ignore-invalid-entries eq t rplacd asdf::*ignored-configuration-form* :form :location asdf::report-invalid-form copy-list #:g20723 last (:inherit-configuration) append #Y(asdf::validate-configuration-directory nil nil (24 45 5 24 45 6 24 45 7 28 8 22 40 2 77 46 9 57 10 60 69 75 45 11 57 12 61 1 43 15 13 34 15 3 6 1 12 11 16 3 48 16 15 17 14 18 14 19 14 20 15 21 14 22 13 6 19 6 23 12 19 1 24 12 19 2 25 36 2 44 1 10 1 45 26 77 13 0 72 2 43 1 36 2 62 73 43 1 63 12 33 27 12 14 28 33 29 12 19 4 30 45 31 13 3 58 60 213 77 13 1 46 32 46 33 75 6 1 45 34 10 0 45 35 57 12 61 2 2 178 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 1 45 36 58 60 123 75 45 37 77 13 6 19 1 38 12 46 39 46 40 75 6 1 45 41 10 0 45 42 57 12 61 2 2 80 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 11 43 17 44 39 7 11 45 51 5 38 45 13 16 13 3 20 1 23 39 13 13 1 10 3 6 1 51 1 17 46 38 24 10 5 39 7 11 45 52 47 38 14 13 15 14 48 13 3 14 49 13 11 19 5 50 35 0 0 10 2 5 73 36 6 62 43 2 43 2 43 1 63 16 51 45 52 13 1 10 0 17 46 10 0 43 1 43 1 39 10 10 1 5 12 19 1 53 51 1 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 15 54 19 2 55 7 2 73 43 1 29) #258# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*output-translations* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 57 30 1 5 15 6 19 1 7 12 15 8 14 9 32 0 18 3 40 34 19 0 10 39 25 14 11 19 1 12 73 40 6 14 13 19 1 12 12 15 14 15 15 14 9 32 0 18 4 40 3 1 16 43 1 52 0 1 0 73 29) #259=#A(t (17) (asdf::*user-cache* si::*make-special boundp asdf::x asdf::sub #Y(asdf::try nil nil (24 45 3 27 45 4 10 1 73 39 8 13 1 10 0 7 2 73 29) #259# #1# 0) "XDG_CACHE_HOME" asdf::getenv-absolute-directory "common-lisp" :implementation asdf::os-windows-p :local-appdata asdf::get-folder-path :appdata "common-lisp" "cache" (:home ".cache" "common-lisp" :implementation))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 6 12 19 2 7 1 0 73 29) #260=#A(t (8) (asdf::output-translations fmakunbound proclaim ((notinline asdf::output-translations)) mapc asdf::*output-translations* #Y(asdf::output-translations nil nil (26 11 5 4 73 29) #260# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 0 1 20 12 19 2 21 1 0 73 29) #261=#A(t (22) (#262=(setf asdf::output-translations) fmakunbound asdf::new-value copy-list > :key asdf::x #:g20732 #263=(eql t) typep pathname pathname-directory directory listp length (#263# pathname) si::etypecase-error #Y(nil nil nil (24 45 6 26 10 0 4 45 7 13 0 15 8 19 2 9 39 6 8 -1 73 38 45 13 0 15 10 19 2 9 39 29 10 1 4 12 19 1 11 45 12 10 0 16 13 39 7 10 0 16 14 38 4 8 0 73 43 1 38 8 13 0 15 15 19 2 16 43 1 29) #261# #1# 0) stable-sort asdf::*output-translations* #Y(#262# nil nil (24 45 2 26 10 0 16 3 12 33 4 12 14 5 34 17 12 19 4 18 6 1 52 19 10 0 73 29) #261# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #264=#A(t (9) (asdf::output-translations-initialized-p fmakunbound proclaim ((notinline asdf::output-translations-initialized-p)) mapc asdf::*output-translations* t #Y(asdf::output-translations-initialized-p nil nil (26 11 5 73 39 4 11 6 73 29) #264# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 6 12 19 2 7 1 0 73 29) #265=#A(t (8) (asdf::clear-output-translations fmakunbound proclaim ((notinline asdf::clear-output-translations)) mapc asdf::*output-translations* #Y(asdf::clear-output-translations nil nil (26 75 52 5 0 29) #265# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function (t &key (:directory boolean) (:wilden boolean)) (values (or null pathname) &optional)) asdf::resolve-location)) mapc)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 44 12 19 2 45 1 0 73 29) #266=#A(t (46) (asdf::resolve-relative-location-component fmakunbound proclaim ((notinline asdf::resolve-relative-location-component)) mapc asdf::x (nil :wilden :directory) directory asdf::wilden #:g20736 pathname typep string :type :directory asdf::coerce-pathname cons :wilden t car asdf::merge-pathnames* #267=(eql :default-directory) asdf::default-directory asdf::relativize-pathname-directory #268=(eql :*/) asdf::*wild-directory* #269=(eql :**/) asdf::*wild-inferiors* #270=(eql :*.*.*) asdf::*wild-file* #271=(eql :implementation) asdf::implementation-identifier #272=(eql :implementation-type) asdf::implementation-type string-downcase #273=(eql :hostname) asdf::hostname (pathname string cons #267# #268# #269# #270# #271# #272# #273#) si::etypecase-error asdf::r asdf::absolute-pathname-p "~@<pathname ~S is not relative~@:>" error pathnamep #Y(asdf::resolve-relative-location-component nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 10 2 45 9 13 0 15 10 19 2 11 39 5 10 3 38 235 13 0 15 12 19 2 11 39 19 13 3 14 13 10 2 73 39 4 11 14 73 12 19 3 15 38 208 13 0 15 16 19 2 11 39 65 10 3 5 76 39 18 10 3 4 12 14 14 13 2 14 17 13 1 19 5 0 38 40 10 3 4 12 14 14 14 18 14 17 77 19 5 0 45 19 10 4 5 12 14 14 13 3 14 17 13 2 19 5 0 12 13 0 19 2 20 43 1 38 135 13 0 15 21 19 2 11 39 10 19 0 22 12 19 1 23 38 117 13 0 15 24 19 2 11 39 5 11 25 38 104 13 0 15 26 19 2 11 39 5 11 27 38 91 13 0 15 28 19 2 11 39 5 11 29 38 78 13 0 15 30 19 2 11 39 14 19 0 31 12 14 13 14 14 19 3 15 38 56 13 0 15 32 19 2 11 39 18 19 0 33 12 19 1 34 12 14 13 14 14 19 3 15 38 30 13 0 15 35 19 2 11 39 14 19 0 36 12 14 13 14 14 19 3 15 38 8 13 0 15 37 19 2 38 43 1 45 39 13 0 19 1 40 39 8 15 41 13 3 19 2 42 10 3 16 43 40 4 10 1 76 39 6 10 0 73 38 6 13 0 19 1 8 43 1 29) #266# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*here-directory* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 45 12 19 2 46 1 0 73 29) #274=#A(t (47) (asdf::resolve-absolute-location-component fmakunbound proclaim ((notinline asdf::resolve-absolute-location-component)) mapc asdf::x (nil :wilden :directory) directory asdf::wilden #:g20737 pathname typep string parse-namestring asdf::p asdf::ensure-directory-pathname cons :directory :wilden asdf::resolve-relative-location-component t asdf::merge-pathnames* #275=(eql :root) (:relative) make-pathname #276=(eql :home) asdf::user-homedir #277=(eql :here) asdf::*here-directory* :default-directory asdf::resolve-location #278=(eql :user-cache) asdf::*user-cache* #279=(eql :system-cache) "Using the :system-cache is deprecated. ~%~
Please remove it from your ASDF configuration" error #280=(eql :default-directory) asdf::default-directory (pathname string cons #275# #276# #277# #278# #279# #280#) si::etypecase-error asdf::r pathnamep asdf::s asdf::absolute-pathname-p "~@<Invalid designator for an absolute pathname: ~3i~_~S~@:>" #Y(asdf::resolve-absolute-location-component nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 57 0 60 310 10 3 45 9 13 0 15 10 19 2 11 39 5 10 4 38 246 13 0 15 12 19 2 11 39 25 13 4 19 1 13 45 14 10 4 39 8 13 0 19 1 15 38 3 10 0 43 1 38 213 13 0 15 16 19 2 11 39 62 10 4 5 76 39 18 10 4 4 12 14 17 13 3 14 18 13 2 19 5 0 38 35 10 4 5 12 14 17 13 3 14 18 13 2 19 5 19 12 10 4 4 12 14 17 14 20 14 18 77 19 5 0 12 19 2 21 36 1 38 143 13 0 15 22 19 2 11 39 30 14 17 15 23 19 2 24 45 14 10 3 39 8 13 0 19 1 8 38 4 10 0 73 43 1 36 1 38 105 13 0 15 25 19 2 11 39 6 19 0 26 38 91 13 0 15 27 19 2 11 39 22 11 28 73 40 4 11 29 73 12 14 17 14 20 14 18 77 19 5 30 38 61 13 0 15 31 19 2 11 39 15 14 32 14 17 14 20 14 18 77 19 5 30 38 38 13 0 15 33 19 2 11 39 8 15 34 19 1 35 38 22 13 0 15 36 19 2 11 39 6 19 0 37 38 8 13 0 15 38 19 2 39 43 1 45 40 10 2 39 6 10 4 16 41 76 39 8 13 0 19 1 8 38 3 10 0 45 42 13 0 19 1 43 76 39 8 15 44 13 5 19 2 35 10 0 73 43 2 63 29) #274# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 24 12 19 2 25 1 0 73 29) #281=#A(t (26) (asdf::resolve-location fmakunbound proclaim ((notinline asdf::resolve-location)) mapc asdf::x (nil :wilden :directory) directory asdf::wilden atom :directory :wilden asdf::resolve-absolute-location-component t asdf::path asdf::morep asdf::component #:g20740 asdf::dir asdf::wild 0 #23# asdf::resolve-relative-location-component asdf::merge-pathnames* #Y(asdf::resolve-location nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 10 2 16 9 39 16 13 2 14 10 13 1 14 11 13 0 19 5 12 38 161 58 60 158 10 3 4 12 14 10 10 2 40 4 10 3 5 73 39 4 11 13 73 12 14 11 10 1 73 39 6 10 3 5 76 73 12 19 5 12 45 14 10 4 5 12 77 77 46 15 46 16 46 17 75 45 18 75 45 19 57 20 61 2 2 80 10 3 16 9 39 4 35 0 1 10 3 45 21 10 0 4 51 5 10 0 5 51 0 10 0 51 6 43 1 10 3 5 51 3 10 5 40 3 10 9 39 3 11 13 51 2 10 8 39 4 10 5 76 51 1 13 4 14 10 13 2 14 11 13 1 19 5 22 12 13 6 19 2 23 51 6 35 0 0 10 6 73 36 7 62 73 43 1 43 1 43 3 43 1 63 29) #281# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #282=#A(t (17) (asdf::location-designator-p fmakunbound proclaim ((notinline asdf::location-designator-p)) mapc asdf::x asdf::c (or string pathname (member :root :home :here :user-cache :system-cache :default-directory)) typep #Y(asdf::absolute-component-p nil nil (24 45 6 26 13 0 15 7 19 2 8 29) #282# #1# 0) (or string pathname (member :default-directory :*/ :**/ :*.*.* :implementation :implementation-type)) #Y(asdf::relative-component-p nil nil (24 45 6 26 13 0 15 10 19 2 8 29) #282# #1# 0) boolean consp every #Y(asdf::location-designator-p nil nil (24 45 5 26 30 2 9 11 13 2 15 12 19 2 8 73 40 38 13 2 32 1 18 1 73 40 29 10 2 16 13 73 39 22 10 2 4 12 32 1 18 1 73 39 11 32 0 12 10 2 5 12 19 2 14 43 2 29) #282# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 15 12 19 2 16 1 0 73 29) #283=#A(t (17) (asdf::location-function-p fmakunbound proclaim ((notinline asdf::location-function-p)) mapc asdf::x asdf::length=n-p :function eq cadr symbolp consp caadr lambda cadadr #Y(asdf::location-function-p nil nil (24 45 5 26 13 0 9 2 19 2 6 73 39 52 10 0 4 12 11 7 17 8 73 39 41 10 0 16 9 16 10 73 40 32 10 0 16 9 16 11 73 39 23 10 0 16 12 12 1 13 17 8 73 39 11 10 0 16 14 12 9 2 19 2 6 29) #283# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 17 12 19 2 18 1 0 73 29) #284=#A(t (19) (asdf::validate-output-translations-directive fmakunbound proclaim ((notinline asdf::validate-output-translations-directive)) mapc asdf::directive (:enable-user-cache :disable-cache nil) member consp asdf::length=n-p :include eq second (or string pathname null) typep asdf::location-designator-p asdf::location-function-p #Y(asdf::validate-output-translations-directive nil nil (24 45 5 26 13 0 15 6 19 2 7 73 40 86 10 0 16 8 73 39 79 13 0 9 2 19 2 9 39 50 10 0 4 12 11 10 17 11 39 11 10 0 16 12 12 15 13 19 2 14 40 28 10 0 4 12 19 1 15 39 19 10 0 16 12 12 19 1 15 40 9 10 0 16 12 12 19 1 16 73 40 18 13 0 9 1 19 2 9 73 39 8 10 0 4 12 19 1 15 29) #284# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 14 12 19 2 15 1 0 73 29) #285=#A(t (16) (asdf::validate-output-translations-form fmakunbound proclaim ((notinline asdf::validate-output-translations-form)) mapc asdf::form (nil :location) asdf::location :output-translations asdf::validate-output-translations-directive :location :invalid-form-reporter asdf::invalid-output-translation asdf::validate-configuration-form #Y(asdf::validate-output-translations-form nil nil (24 45 5 28 6 22 40 2 77 46 7 13 1 14 8 15 9 14 10 13 0 14 11 15 12 19 7 13 29) #285# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #286=#A(t (12) (asdf::validate-output-translations-file fmakunbound proclaim ((notinline asdf::validate-output-translations-file)) mapc asdf::file asdf::validate-output-translations-form :description "output translations" asdf::validate-configuration-file #Y(asdf::validate-output-translations-file nil nil (24 45 5 26 13 0 15 6 14 7 15 8 19 4 9 29) #286# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #287=#A(t (13) (asdf::validate-output-translations-directory fmakunbound proclaim ((notinline asdf::validate-output-translations-directory)) mapc directory :output-translations asdf::validate-output-translations-directive :invalid-form-reporter asdf::invalid-output-translation asdf::validate-configuration-directory #Y(asdf::validate-output-translations-directory nil nil (24 45 5 26 13 0 14 6 15 7 14 8 15 9 19 5 10 29) #287# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 46 12 19 2 47 1 0 73 29) #288=#A(t (48) (asdf::parse-output-translations-string fmakunbound proclaim ((notinline asdf::parse-output-translations-string)) mapc string (nil :location) asdf::location "" equal (:output-translations :inherit-configuration) stringp "~@<Environment string isn't: ~3i~_~S~@:>" error char #\" eql read-from-string :location #\( asdf::validate-output-translations-form asdf::inherit asdf::directives asdf::start length asdf::end asdf::source asdf::inter-directory-separator asdf::separator asdf::i 0 :start position subseq asdf::s "" "" "~@<Only one inherited configuration allowed: ~3i~_~S~@:>" t :inherit-configuration 1+ > "~@<Uneven number of components in source to destination mapping: ~3i~_~S~@:>" :ignore-inherited-configuration :output-translations nreverse #Y(asdf::parse-output-translations-string nil nil (24 45 5 28 6 22 40 2 77 46 7 10 1 76 40 7 13 1 1 8 17 9 39 6 1 10 73 38 276 10 1 16 11 76 39 10 15 12 13 1 19 2 13 38 260 13 1 8 0 17 14 12 1 15 17 16 39 16 13 1 19 1 17 12 14 18 13 0 19 3 0 38 232 13 1 8 0 17 14 12 1 19 17 16 39 16 13 1 19 1 17 12 14 18 13 0 19 3 20 38 204 58 60 201 75 45 21 75 45 22 8 0 45 23 10 5 16 24 45 25 75 45 26 19 0 27 45 28 75 45 29 57 30 61 2 2 151 13 2 13 10 14 31 13 5 19 4 32 40 3 10 4 51 1 13 10 13 5 13 1 19 3 33 45 34 10 4 39 29 13 4 15 35 10 0 17 9 39 4 75 38 3 10 0 6 2 12 10 7 3 51 7 75 51 4 38 37 15 36 10 0 17 9 39 25 10 8 39 8 15 37 13 11 19 2 13 11 38 51 8 14 39 10 7 3 51 7 38 5 10 0 51 4 10 2 16 40 51 6 13 6 13 5 19 2 41 39 35 10 4 39 8 15 42 13 11 19 2 13 10 8 76 39 8 14 43 10 7 3 51 7 14 44 10 7 16 45 7 2 73 36 9 43 1 35 0 0 62 73 43 1 43 1 43 1 43 1 43 1 43 1 43 1 63 29) #288# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (asdf::*default-output-translations* si::*make-special (asdf::environment-output-translations asdf::user-output-translations-pathname asdf::user-output-translations-directory-pathname asdf::system-output-translations-pathname asdf::system-output-translations-directory-pathname))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #289=#A(t (11) (asdf::wrapping-output-translations fmakunbound proclaim ((notinline asdf::wrapping-output-translations)) mapc :output-translations "SYS:**;*.*" translate-logical-pathname (:inherit-configuration :enable-user-cache) #Y(asdf::wrapping-output-translations nil nil (26 14 5 15 6 19 1 7 12 75 6 2 12 1 8 7 3 73 29) #289# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*output-translations-file* si::*make-special "asdf-output-translations.conf" asdf::coerce-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*output-translations-directory* si::*make-special "asdf-output-translations.conf.d/" asdf::coerce-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #290=#A(t (13) (asdf::user-output-translations-pathname fmakunbound proclaim ((notinline asdf::user-output-translations-pathname)) mapc (nil :direction) :input asdf::direction asdf::*output-translations-file* :direction asdf::in-user-configuration-directory #Y(asdf::user-output-translations-pathname nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #290# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #291=#A(t (13) (asdf::system-output-translations-pathname fmakunbound proclaim ((notinline asdf::system-output-translations-pathname)) mapc (nil :direction) :input asdf::direction asdf::*output-translations-file* :direction asdf::in-system-configuration-directory #Y(asdf::system-output-translations-pathname nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #291# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #292=#A(t (13) (asdf::user-output-translations-directory-pathname fmakunbound proclaim ((notinline asdf::user-output-translations-directory-pathname)) mapc (nil :direction) :input asdf::direction asdf::*output-translations-directory* :direction asdf::in-user-configuration-directory #Y(asdf::user-output-translations-directory-pathname nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #292# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #293=#A(t (13) (asdf::system-output-translations-directory-pathname fmakunbound proclaim ((notinline asdf::system-output-translations-directory-pathname)) mapc (nil :direction) :input asdf::direction asdf::*output-translations-directory* :direction asdf::in-system-configuration-directory #Y(asdf::system-output-translations-directory-pathname nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #293# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #294=#A(t (9) (asdf::environment-output-translations fmakunbound proclaim ((notinline asdf::environment-output-translations)) mapc "ASDF_OUTPUT_TRANSLATIONS" asdf::getenv #Y(asdf::environment-output-translations nil nil (26 15 5 19 1 6 29) #294# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::process-output-translations fmakunbound proclaim ((notinline asdf::process-output-translations)) mapc :delete-methods t :lambda-list (asdf::spec &key asdf::inherit asdf::collect) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function (t &key (:collect (or symbol function))) t) asdf::inherit-output-translations)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function (t &key (:collect (or symbol function)) (:inherit list)) t) asdf::process-output-translations-directive)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #295=#A(t (13) (asdf::process-output-translations (symbol) (asdf::x &key (asdf::inherit asdf::*default-output-translations*) asdf::collect) asdf::x (t :collect :inherit) asdf::*default-output-translations* asdf::inherit asdf::collect :inherit :collect #Y(nil nil nil (24 45 3 28 4 22 40 3 14 5 46 6 22 40 2 77 46 7 13 2 20 0 23 12 14 8 13 1 14 9 13 0 19 5 0 29) #295# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 14 12 14 15 19 6 16 29) #296=#A(t (17) (asdf::process-output-translations (pathname) (pathname &key asdf::inherit asdf::collect) pathname (t :collect :inherit) asdf::inherit asdf::collect asdf::directory-pathname-p asdf::validate-output-translations-directory :inherit :collect asdf::probe-file* asdf::validate-output-translations-file asdf::inherit-output-translations #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 39 20 13 2 19 1 8 12 14 9 13 1 14 10 13 0 19 5 0 38 36 13 2 19 1 11 39 20 13 2 19 1 12 12 14 9 13 1 14 10 13 0 19 5 0 38 10 13 1 14 10 13 0 19 3 13 29) #296# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #297=#A(t (13) (asdf::process-output-translations (string) (string &key asdf::inherit asdf::collect) string (t :collect :inherit) asdf::inherit asdf::collect asdf::parse-output-translations-string :inherit :collect #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 12 14 8 13 1 14 9 13 0 19 5 0 29) #297# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #298=#A(t (12) (asdf::process-output-translations (null) (asdf::x &key asdf::inherit asdf::collect) asdf::x (t :collect :inherit) asdf::inherit asdf::collect :collect asdf::inherit-output-translations #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 1 14 7 13 0 19 3 8 29) #298# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 13 12 14 14 19 6 15 29) #299=#A(t (16) (asdf::process-output-translations (cons) (asdf::form &key asdf::inherit asdf::collect) asdf::form (t :collect :inherit) asdf::inherit asdf::collect asdf::validate-output-translations-form si::%dolist-var asdf::directive :inherit :collect asdf::process-output-translations-directive #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 5 45 8 75 45 9 38 24 10 1 4 51 0 13 0 14 10 13 3 14 11 13 2 19 5 12 10 1 5 51 1 10 1 40 -26 75 73 43 2 29) #299# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #300=#A(t (13) (asdf::inherit-output-translations fmakunbound proclaim ((notinline asdf::inherit-output-translations)) mapc asdf::inherit (nil :collect) asdf::collect :collect :inherit asdf::process-output-translations #Y(asdf::inherit-output-translations nil nil (24 45 5 28 6 22 40 2 77 46 7 10 1 73 39 18 10 1 4 12 14 8 13 0 14 9 10 1 5 12 19 5 10 29) #300# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 48 12 19 2 49 1 0 73 29) #301=#A(t (50) (asdf::process-output-translations-directive fmakunbound proclaim ((notinline asdf::process-output-translations-directive)) mapc asdf::directive (nil :collect :inherit) asdf::inherit asdf::collect atom #:g20757 :enable-user-cache (t :user-cache) :collect :disable-cache (t t) :inherit-configuration asdf::inherit-output-translations :ignore-inherited-configuration :ignore-invalid-entries nil (:enable-user-cache :disable-cache :inherit-configuration nil :ignore-invalid-entries :ignore-inherited-configuration) si::ecase-error second asdf::dst asdf::src :include eq pathname :inherit asdf::process-output-translations t eql :directory :wilden asdf::resolve-location asdf::loc asdf::absolute-pathname-p asdf::truenamize asdf::trusrc asdf::location-function-p symbolp fdefinition eval asdf::trudst asdf::*wild-file* asdf::merge-pathnames* asdf::wilddst #Y(asdf::process-output-translations-directive nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 10 2 16 9 39 73 10 2 45 10 10 0 42 11 12 15 12 14 13 13 1 19 3 0 38 49 42 14 12 15 15 14 13 13 1 19 3 0 38 35 42 16 12 13 2 14 13 13 1 19 3 17 38 21 41 18 7 41 19 4 42 20 5 75 73 38 8 13 0 15 21 19 2 22 43 1 38 217 10 2 4 12 10 2 16 23 12 46 24 46 25 13 0 11 26 17 27 39 23 10 1 73 39 16 10 1 16 28 12 14 29 77 14 13 13 2 19 5 30 38 172 10 0 73 39 167 13 0 11 31 17 32 40 34 13 0 14 33 14 31 14 34 14 31 19 5 35 45 36 13 0 19 1 37 39 8 13 0 19 1 38 38 3 10 0 43 1 45 39 13 2 19 1 40 39 35 13 3 13 0 10 2 16 23 16 41 39 9 10 2 16 23 16 42 38 7 10 2 16 23 16 43 6 2 12 20 1 23 38 81 13 2 11 31 17 27 39 15 13 3 13 0 11 31 6 2 12 20 1 23 38 59 10 2 39 16 13 2 14 33 14 31 14 34 14 31 19 5 35 38 3 10 0 45 44 14 45 13 0 19 2 46 45 47 13 5 13 0 11 31 6 2 12 20 1 23 13 5 13 2 10 1 6 2 12 20 1 23 43 2 43 1 43 2 29) #301# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 19 12 19 2 20 1 0 73 29) #302=#A(t (21) (asdf::compute-output-translations fmakunbound proclaim ((notinline asdf::compute-output-translations)) mapc asdf::parameter #:c20761 asdf::x #Y(asdf::c nil nil (24 45 7 26 13 0 10 1 3 51 1 0 29) #302# #1# 0) asdf::wrapping-output-translations asdf::*default-output-translations* :collect asdf::inherit-output-translations reverse :test equal :from-end t remove-duplicates #Y(asdf::compute-output-translations nil nil (25 40 2 77 46 5 26 75 45 6 30 1 8 15 9 13 2 11 10 7 3 12 14 11 32 0 12 19 3 12 10 1 16 13 12 43 1 43 1 14 14 15 15 14 16 14 17 19 5 18 29) #302# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*output-translations-parameter* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #303=#A(t (12) (asdf::initialize-output-translations fmakunbound proclaim ((notinline asdf::initialize-output-translations)) mapc asdf::*output-translations-parameter* asdf::parameter asdf::compute-output-translations #:g20767 (setf asdf::output-translations) #Y(asdf::initialize-output-translations nil nil (25 40 3 14 5 46 6 26 10 0 52 5 13 0 19 1 7 45 8 13 0 33 9 18 1 43 1 29) #303# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #304=#A(t (9) (asdf::disable-output-translations fmakunbound proclaim ((notinline asdf::disable-output-translations)) mapc (:output-translations :disable-cache :ignore-inherited-configuration) asdf::initialize-output-translations #Y(asdf::disable-output-translations nil nil (26 15 5 19 1 6 29) #304# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #305=#A(t (10) (asdf::ensure-output-translations fmakunbound proclaim ((notinline asdf::ensure-output-translations)) mapc asdf::output-translations-initialized-p asdf::output-translations asdf::initialize-output-translations #Y(asdf::ensure-output-translations nil nil (26 19 0 5 39 6 19 0 6 38 4 19 0 7 29) #305# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 20 12 19 2 21 1 0 73 29) #306=#A(t (22) (asdf::translate-pathname* fmakunbound proclaim ((notinline asdf::translate-pathname*)) mapc asdf::path asdf::absolute-source asdf::destination asdf::root asdf::source functionp t eq pathnamep "Invalid destination" error asdf::absolute-pathname-p asdf::merge-pathnames* translate-pathname asdf::directorize-pathname-host-device #Y(asdf::translate-pathname* nil nil (24 45 5 24 45 6 24 45 7 25 40 2 77 46 8 25 40 2 77 46 9 26 10 2 16 10 39 12 13 2 13 4 13 3 20 2 23 38 81 13 2 11 11 17 12 39 6 10 4 73 38 68 10 2 16 13 76 39 8 15 14 19 1 15 38 54 13 2 19 1 16 76 39 18 13 4 13 3 13 2 13 1 19 2 17 12 19 3 18 38 29 10 1 39 16 13 4 19 1 19 12 13 3 13 2 19 3 18 38 10 13 4 13 3 13 2 19 3 18 29) #306# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 32 12 19 2 33 1 0 73 29) #307=#A(t (34) (asdf::apply-output-translations fmakunbound proclaim ((notinline asdf::apply-output-translations)) mapc asdf::path #:g20770 logical-pathname typep #308=(or pathname string) asdf::ensure-output-translations asdf::truenamize asdf::p asdf::*output-translations* #:loop-list20771 asdf::destination asdf::source asdf::root asdf::absolute-source 0 #23# t eq pathnamep asdf::absolute-pathname-p asdf::pathname-root asdf::wilden asdf::merge-pathnames* pathname-match-p asdf::translate-pathname* (logical-pathname #308#) si::etypecase-error #Y(asdf::apply-output-translations nil nil (24 45 5 26 10 0 45 6 13 0 15 7 19 2 8 39 6 10 1 73 38 202 13 0 15 9 19 2 8 39 186 19 0 10 58 60 178 13 2 19 1 11 45 12 77 77 11 13 4 12 46 14 46 15 46 16 75 45 17 75 45 18 57 19 61 2 2 131 10 5 2 39 4 35 0 1 10 5 4 45 20 10 0 4 51 4 10 0 5 51 0 10 0 4 51 5 43 1 10 5 5 51 5 13 3 11 21 17 22 40 13 10 3 16 23 39 7 13 3 19 1 24 76 39 6 13 6 19 1 25 51 2 13 3 11 21 17 22 39 8 13 2 19 1 26 38 16 10 2 39 10 13 3 13 2 19 2 27 38 3 10 3 51 1 13 3 11 21 17 22 40 7 13 6 10 1 17 28 39 16 13 6 13 1 13 4 13 2 13 3 19 5 29 36 7 35 0 0 10 6 73 36 7 62 73 43 1 43 1 43 3 43 1 63 38 8 13 0 15 30 19 2 31 43 1 29) #307# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 12 12 14 11 14 13 15 14 19 8 15 29) #309=#A(t (16) (asdf::output-files (:around) (t t) (asdf::operation asdf::component) asdf::operation asdf::component call-next-method asdf::fixedp asdf::files asdf::apply-output-translations mapcar t #Y(nil nil nil (24 45 4 24 45 5 26 10 1 10 0 19 0 6 47 1 7 45 8 10 1 39 6 10 0 73 38 9 33 9 12 13 0 19 2 10 12 43 2 14 11 72 2 29) #309# #1# 0) :documentation "Translate output files, unless asked not to" clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 23 12 19 2 24 1 0 73 29) #310=#A(t (25) (asdf::compile-file-pathname* fmakunbound proclaim ((notinline asdf::compile-file-pathname*)) mapc asdf::input-file asdf::keys (t :output-file) asdf::output-file asdf::absolute-pathname-p compile-file-pathname "x.lisp" apply pathname-type type :type :defaults asdf::merge-pathnames* make-pathname asdf::defaults :output-file asdf::remove-keyword asdf::apply-output-translations #Y(asdf::compile-file-pathname* nil nil (24 45 5 27 45 6 28 7 22 40 2 77 46 8 13 0 19 1 9 39 44 15 10 15 11 13 1 19 3 12 12 19 1 13 45 14 14 15 13 0 14 16 13 3 19 1 17 12 19 4 18 45 19 13 2 13 0 19 2 17 43 2 38 29 15 10 13 2 10 0 39 6 10 1 73 38 8 14 20 13 1 19 2 21 12 19 3 12 12 19 1 22 29) #310# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #311=#A(t (14) (asdf::tmpize-pathname fmakunbound proclaim ((notinline asdf::tmpize-pathname)) mapc asdf::x :name "ASDF-TMP-" pathname-name asdf::strcat :defaults make-pathname #Y(asdf::tmpize-pathname nil nil (24 45 5 26 14 6 15 7 13 0 19 1 8 12 19 2 9 12 14 10 13 0 19 4 11 29) #311# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #312=#A(t (10) (asdf::delete-file-if-exists fmakunbound proclaim ((notinline asdf::delete-file-if-exists)) mapc asdf::x asdf::probe-file* delete-file #Y(asdf::delete-file-if-exists nil nil (24 45 5 26 10 0 39 6 13 0 19 1 6 73 39 5 10 0 16 7 29) #312# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 36 12 19 2 37 1 0 73 29) #313=#A(t (38) (asdf::compile-file* fmakunbound proclaim ((notinline asdf::compile-file*)) mapc asdf::input-file asdf::keys (t :output-file :compile-check) asdf::compile-check asdf::output-file :compile-check asdf::remove-keyword asdf::keywords asdf::compile-file-pathname* :output-file apply asdf::tmpize-pathname asdf::tmp-file :error asdf::status compile-file asdf::failure-p asdf::warnings-p asdf::output-truename asdf::*compile-file-failure-behaviour* asdf::*compile-file-warnings-behaviour* :success #:g20782 :warn :ignore t nil (:ignore :warn :success nil :error) si::ecase-error asdf::delete-file-if-exists rename-file #Y(asdf::compile-file* nil nil (24 45 5 27 45 6 28 7 22 40 2 77 46 8 22 40 2 77 46 9 14 10 13 2 19 2 11 45 12 15 13 13 4 14 14 13 1 13 0 19 5 15 45 9 13 0 19 1 16 45 17 11 18 45 19 15 20 13 7 14 14 13 1 13 3 19 5 15 47 2 21 47 1 22 45 23 10 2 39 7 11 24 51 3 38 15 10 1 39 7 11 25 51 3 38 5 11 26 51 3 10 3 45 27 10 0 41 26 7 41 28 4 42 29 5 11 30 38 17 41 18 4 42 31 4 75 38 8 13 0 15 32 19 2 33 43 1 39 19 10 8 76 40 14 13 8 13 10 14 14 13 4 13 6 19 5 15 39 23 13 5 19 1 34 10 0 39 12 13 0 13 5 19 2 35 10 5 51 0 38 13 13 0 19 1 34 75 51 0 11 30 51 2 13 0 13 1 13 2 72 3 43 3 43 4 29) #313# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 13 12 14 14 19 6 15 29) #314=#A(t (16) (asdf::operate (:before) (t t) (asdf::operation-class asdf::system &rest asdf::args &key &allow-other-keys) asdf::operation-class asdf::system asdf::args (t) #:output-files-for-system-and-operation :asdf asdf::find-symbol* "ASDF 2 is not compatible with ASDF-BINARY-LOCATIONS, which you are using.
ASDF 2 now achieves the same purpose with its builtin ASDF-OUTPUT-TRANSLATIONS,
which should be easier to configure. Please stop using ASDF-BINARY-LOCATIONS,
and instead use ASDF-OUTPUT-TRANSLATIONS. See the ASDF manual for details.
In case you insist on preserving your previous A-B-L configuration, but
do not know how to achieve the same effect with A-O-T, you may use function
ASDF:ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY as documented in the manual;
call that function where you would otherwise have loaded and configured A-B-L." error #Y(nil nil nil (24 45 4 24 45 5 27 45 6 28 7 15 8 14 9 19 2 10 73 39 6 15 11 19 1 12 29) #314# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 35 12 19 2 36 1 0 73 29) #315=#A(t (37) (asdf::enable-asdf-binary-locations-compatibility fmakunbound proclaim ((notinline asdf::enable-asdf-binary-locations-compatibility)) mapc (nil :source-to-target-mappings :map-all-source-files :include-per-user-information :default-toplevel-directory :centralize-lisp-binaries) asdf::centralize-lisp-binaries asdf::user-homedir ".fasls/" asdf::subpathname asdf::default-toplevel-directory asdf::include-per-user-information t asdf::map-all-source-files asdf::source-to-target-mappings "asdf:enable-asdf-binary-locations-compatibility doesn't support :map-all-source-files nil on CLISP, ECL and MKCL" error "foo.lisp" compile-file-pathname pathname-type asdf::fasl-type asdf::*wild-file* :type :defaults make-pathname asdf::mapped-files pathname-directory :implementation asdf::*wild-inferiors* append :root asdf::destination-directory :output-translations ((t t) :ignore-inherited-configuration) asdf::initialize-output-translations #Y(asdf::enable-asdf-binary-locations-compatibility nil nil (28 5 22 40 2 77 46 6 22 40 11 19 0 7 12 15 8 19 2 9 12 46 10 22 40 2 77 46 11 22 40 5 11 12 73 12 46 13 22 40 2 77 46 14 10 1 76 39 6 15 15 19 1 16 15 17 19 1 18 12 19 1 19 45 20 10 2 39 5 11 21 38 12 14 22 13 0 14 23 14 21 19 4 24 45 25 10 6 39 32 13 5 10 4 73 39 10 19 0 7 12 19 1 26 5 73 12 14 27 11 28 6 2 12 19 2 29 7 2 38 9 14 30 14 28 11 27 6 3 45 31 14 32 13 3 14 30 14 28 10 1 6 3 12 13 0 10 1 6 1 12 19 2 29 6 2 12 1 33 7 2 12 19 2 29 7 2 12 19 1 34 43 3 29) #315# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*default-source-registry-exclusions* si::*make-special boundp (".bzr" ".cdv" ".git" ".hg" ".pc" ".svn" "CVS" "RCS" "SCCS" "_darcs" "_sgbak" "autom4te.cache" "cover_db" "_build" "debian"))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (asdf::*source-registry-exclusions* si::*make-special boundp asdf::*default-source-registry-exclusions*)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*source-registry* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #316=#A(t (10) (asdf::source-registry-initialized-p fmakunbound proclaim ((notinline asdf::source-registry-initialized-p)) mapc asdf::*source-registry* hash-table typep #Y(asdf::source-registry-initialized-p nil nil (26 14 5 15 6 19 2 7 29) #316# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 6 12 19 2 7 1 0 73 29) #317=#A(t (8) (asdf::clear-source-registry fmakunbound proclaim ((notinline asdf::clear-source-registry)) mapc asdf::*source-registry* #Y(asdf::clear-source-registry nil nil (26 75 52 5 0 29) #317# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 14 2 77 14 3 14 4 14 5 15 6 14 7 14 8 19 8 9 52 0 1 0 73 29) #A(t (10) (asdf::*wild-asd* si::*make-special :directory :name asdf::*wild* :type "asd" :version :newest make-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 30 12 19 2 31 1 0 73 29) #318=#A(t (32) (asdf::filter-logical-directory-results fmakunbound proclaim ((notinline asdf::filter-logical-directory-results)) mapc directory asdf::entries asdf::merger logical-pathname typep #:loop-list20797 asdf::f asdf::p #:loop-list-head20798 #:loop-list-tail20799 0 #:g20800 #:g20801 error si::temp #Y(nil nil nil (24 45 19 26 10 0 51 2 35 1 0 29) #318# #1# 0) si::*handler-clusters* condition asdf::u #:g20803 #:g20804 #Y(nil nil nil (24 45 19 26 10 0 51 2 35 1 0 29) #318# #1# 0) truename equal rplacd #Y(asdf::filter-logical-directory-results nil nil (24 45 5 24 45 6 24 45 7 26 13 2 15 8 19 2 9 39 219 58 60 214 77 13 2 46 10 46 11 75 45 12 75 6 1 45 13 10 0 45 14 57 15 61 2 2 174 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 13 4 15 8 19 2 9 39 3 10 4 40 124 57 16 60 50 75 45 17 57 15 61 1 25 15 18 34 20 3 6 1 12 11 21 3 48 21 13 10 13 7 20 1 23 36 2 44 1 10 1 45 22 77 13 0 72 2 43 1 36 2 62 43 1 63 45 23 10 0 39 63 57 24 60 48 75 45 25 57 15 61 1 22 15 18 34 26 3 6 1 12 11 21 3 48 21 10 3 16 27 36 2 44 1 10 1 45 22 77 13 0 72 2 43 1 36 2 62 73 43 1 63 12 10 5 16 27 17 28 39 3 10 0 43 1 51 3 10 3 39 11 13 1 10 3 6 1 51 1 17 29 35 0 0 10 2 5 73 36 6 62 73 43 2 43 1 43 2 63 38 4 10 1 73 29) #318# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 45 12 19 2 46 1 0 73 29) #319=#A(t (47) (asdf::directory-files fmakunbound proclaim ((notinline asdf::directory-files)) mapc directory asdf::*wild-file* asdf::pattern pathname asdf::dir logical-pathname typep wild-pathname-p "Invalid wild pattern in logical directory ~S" error pathname-directory (nil (:relative)) :test equal member "Invalid file pattern ~S for logical directory ~S" pathname-host asdf::make-pathname-logical #:g20811 #:g20812 0 si::temp #Y(nil nil nil (24 45 26 26 10 0 51 2 35 1 0 29) #319# #1# 0) si::*handler-clusters* asdf::merge-pathnames* asdf::directory* condition asdf::entries asdf::f :defaults :name pathname-name asdf::make-pathname-component-logical :type pathname-type :version pathname-version make-pathname #Y(nil nil nil (24 45 33 26 14 34 13 2 14 35 13 0 19 1 36 12 19 1 37 12 14 38 13 0 19 1 39 12 19 1 37 12 14 40 10 0 16 41 12 19 1 37 12 19 8 42 29) #319# #1# 0) asdf::filter-logical-directory-results #Y(asdf::directory-files nil nil (24 45 5 25 40 3 14 6 46 7 26 10 1 16 8 45 9 13 0 15 10 19 2 11 39 55 13 0 19 1 12 39 8 15 13 13 2 19 2 14 13 1 19 1 15 12 15 16 14 17 15 18 19 4 19 76 39 10 15 20 13 1 13 2 19 3 14 13 1 13 0 19 1 21 12 19 2 22 51 1 57 23 60 54 75 45 24 57 25 61 1 29 15 14 34 27 3 6 1 12 11 28 3 48 28 13 4 13 3 19 2 29 12 19 1 30 36 2 44 1 10 1 45 31 77 13 0 72 2 43 1 36 2 62 43 1 63 45 32 13 3 13 0 34 43 12 19 3 44 43 1 43 1 29) #319# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #320=#A(t (10) (asdf::directory-asd-files fmakunbound proclaim ((notinline asdf::directory-asd-files)) mapc directory asdf::*wild-asd* asdf::directory-files #Y(asdf::directory-asd-files nil nil (24 45 5 26 13 0 14 6 19 2 7 29) #320# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 38 12 19 2 39 1 0 73 29) #321=#A(t (40) (asdf::subdirectories fmakunbound proclaim ((notinline asdf::subdirectories)) mapc directory asdf::ensure-directory-pathname asdf::*wild-directory* asdf::merge-pathnames* asdf::wild #:g20817 #:g20818 0 error si::temp #Y(nil nil nil (24 45 14 26 10 0 51 2 35 1 0 29) #321# #1# 0) si::*handler-clusters* asdf::directory* condition asdf::dirs pathname-directory asdf::normalize-pathname-directory-component (:absolute) asdf::prefix asdf::d asdf::dir consp :defaults :name :type :version :directory last asdf::make-pathname-component-logical append make-pathname #Y(nil nil nil (24 45 24 26 13 0 19 1 20 12 19 1 21 45 25 10 0 16 26 73 39 43 10 0 5 16 26 73 39 35 14 27 13 5 14 28 77 14 29 77 14 30 77 14 31 13 2 13 0 19 1 32 12 19 1 33 12 19 2 34 12 19 10 35 43 1 29) #321# #1# 0) asdf::filter-logical-directory-results #Y(asdf::subdirectories nil nil (24 45 5 26 13 0 19 1 6 45 5 14 7 13 0 19 2 8 45 9 57 10 60 48 75 45 11 57 12 61 1 23 15 13 34 15 3 6 1 12 11 16 3 48 16 13 3 19 1 17 36 2 44 1 10 1 45 18 77 13 0 72 2 43 1 36 2 62 43 1 63 45 19 13 2 13 0 13 2 19 1 20 12 19 1 21 40 3 1 22 45 23 34 36 12 43 1 19 3 37 43 3 29) #321# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 9 12 19 2 10 1 0 73 29) #322=#A(t (11) (asdf::collect-asds-in-directory fmakunbound proclaim ((notinline asdf::collect-asds-in-directory)) mapc directory asdf::collect asdf::directory-asd-files map #Y(asdf::collect-asds-in-directory nil nil (24 45 5 24 45 6 26 77 13 0 13 1 19 1 7 12 19 3 8 29) #322# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #323=#A(t (14) (asdf::collect-sub*directories fmakunbound proclaim ((notinline asdf::collect-sub*directories)) mapc directory asdf::collectp asdf::recursep asdf::collector asdf::subdirectories si::%dolist-var asdf::subdir #Y(asdf::collect-sub*directories nil nil (24 45 5 24 45 6 24 45 7 24 45 8 26 13 2 13 3 20 1 23 39 8 13 0 13 3 20 1 23 13 3 19 1 9 45 10 75 45 11 38 31 10 1 4 51 0 13 3 13 0 20 1 23 39 12 13 0 13 4 13 3 13 2 19 4 0 10 1 5 51 1 10 1 40 -33 75 73 43 2 29) #323# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 23 12 19 2 24 1 0 73 29) #324=#A(t (25) (asdf::collect-sub*directories-asd-files fmakunbound proclaim ((notinline asdf::collect-sub*directories-asd-files)) mapc directory (nil :collect :exclude) asdf::*default-source-registry-exclusions* asdf::exclude asdf::collect t constantly asdf::x pathname-directory last :test equal member #Y(nil nil nil (24 45 12 26 13 0 19 1 13 12 19 1 14 4 12 13 2 14 15 33 16 12 19 4 17 76 73 29) #324# #1# 0) asdf::dir asdf::collect-asds-in-directory #Y(nil nil nil (24 45 19 26 13 0 13 1 19 2 20 29) #324# #1# 0) asdf::collect-sub*directories #Y(asdf::collect-sub*directories-asd-files nil nil (24 45 5 28 6 22 40 3 14 7 46 8 22 40 2 77 46 9 13 2 14 10 19 1 11 12 34 18 12 34 21 12 19 4 22 29) #324# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 20 12 19 2 21 1 0 73 29) #325=#A(t (22) (asdf::validate-source-registry-directive fmakunbound proclaim ((notinline asdf::validate-source-registry-directive)) mapc asdf::directive (:default-registry) member consp rest :include :directory :tree asdf::length=n-p asdf::location-designator-p :exclude :also-exclude stringp every :default-registry #Y(asdf::validate-source-registry-directive nil nil (24 45 5 26 13 0 15 6 19 2 7 73 40 73 10 0 16 8 73 39 66 10 0 5 45 9 10 1 4 41 10 7 41 11 4 42 12 20 13 0 9 1 19 2 13 73 39 8 10 0 4 12 19 1 14 38 28 41 15 4 42 16 11 33 17 12 13 0 19 2 18 38 12 42 19 7 10 0 76 73 38 3 75 73 43 1 29) #325# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 14 12 19 2 15 1 0 73 29) #326=#A(t (16) (asdf::validate-source-registry-form fmakunbound proclaim ((notinline asdf::validate-source-registry-form)) mapc asdf::form (nil :location) asdf::location :source-registry asdf::validate-source-registry-directive :location :invalid-form-reporter asdf::invalid-source-registry asdf::validate-configuration-form #Y(asdf::validate-source-registry-form nil nil (24 45 5 28 6 22 40 2 77 46 7 13 1 14 8 15 9 14 10 13 0 14 11 15 12 19 7 13 29) #326# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #327=#A(t (12) (asdf::validate-source-registry-file fmakunbound proclaim ((notinline asdf::validate-source-registry-file)) mapc asdf::file asdf::validate-source-registry-form :description "a source registry" asdf::validate-configuration-file #Y(asdf::validate-source-registry-file nil nil (24 45 5 26 13 0 15 6 14 7 15 8 19 4 9 29) #327# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #328=#A(t (13) (asdf::validate-source-registry-directory fmakunbound proclaim ((notinline asdf::validate-source-registry-directory)) mapc directory :source-registry asdf::validate-source-registry-directive :invalid-form-reporter asdf::invalid-source-registry asdf::validate-configuration-directory #Y(asdf::validate-source-registry-directory nil nil (24 45 5 26 13 0 14 6 15 7 14 8 15 9 19 5 10 29) #328# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 50 12 19 2 51 1 0 73 29) #329=#A(t (52) (asdf::parse-source-registry-string fmakunbound proclaim ((notinline asdf::parse-source-registry-string)) mapc string (nil :location) asdf::location "" equal (:source-registry :inherit-configuration) stringp "~@<Environment string isn't: ~3i~_~S~@:>" error char "\"(" find read-from-string :location asdf::validate-source-registry-form asdf::inherit asdf::directives asdf::start length asdf::end asdf::inter-directory-separator asdf::separator asdf::pos 0 :start position subseq asdf::s asdf::dir asdf::absolute-pathname-p "~@<source-registry string must specify absolute pathnames: ~3i~_~S~@:>" #Y(asdf::check nil nil (24 45 33 26 13 0 19 1 34 76 39 8 15 35 13 11 19 2 13 10 0 73 29) #329# #1# 0) "" "~@<Only one inherited configuration allowed: ~3i~_~S~@:>" t :inherit-configuration "//" asdf::string-suffix-p :tree - :directory 1+ (:ignore-inherited-configuration) :source-registry nreverse #Y(asdf::parse-source-registry-string nil nil (24 45 5 28 6 22 40 2 77 46 7 10 1 76 40 7 13 1 1 8 17 9 39 6 1 10 73 38 262 10 1 16 11 76 39 10 15 12 13 1 19 2 13 38 246 13 1 8 0 17 14 12 15 15 19 2 16 39 16 13 1 19 1 17 12 14 18 13 0 19 3 19 38 217 58 60 214 75 45 20 75 45 21 8 0 45 22 10 5 16 23 45 24 19 0 25 45 26 75 45 27 57 28 61 2 2 169 13 2 13 9 14 29 13 4 19 4 30 51 1 13 9 13 4 10 1 73 40 4 10 3 73 12 19 3 31 45 32 30 1 36 15 37 10 1 17 9 39 25 10 8 39 8 15 38 13 11 19 2 13 11 39 51 8 15 40 10 7 3 51 7 38 61 13 1 15 41 19 2 42 39 36 14 43 13 1 9 0 10 1 16 23 12 9 2 19 2 44 12 19 3 31 12 32 0 18 1 6 2 12 10 7 3 51 7 38 17 14 45 13 1 32 0 18 1 6 2 12 10 7 3 51 7 43 1 10 2 39 9 10 2 16 46 51 5 38 24 10 7 76 39 8 15 47 10 6 3 51 6 14 48 10 6 16 49 7 2 73 36 8 43 1 35 0 0 62 73 43 1 43 1 43 1 43 1 43 1 43 1 63 29) #329# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 14 12 19 2 15 1 0 73 29) #330=#A(t (16) (asdf::register-asd-directory fmakunbound proclaim ((notinline asdf::register-asd-directory)) mapc directory (nil :collect :exclude :recurse) asdf::recurse asdf::exclude asdf::collect asdf::collect-asds-in-directory :exclude :collect asdf::collect-sub*directories-asd-files #Y(asdf::register-asd-directory nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 22 40 2 77 46 9 10 2 76 39 10 13 3 13 0 19 2 10 38 14 13 3 14 11 13 1 14 12 13 0 19 5 13 29) #330# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (asdf::*default-source-registries* si::*make-special (asdf::environment-source-registry asdf::user-source-registry asdf::user-source-registry-directory asdf::system-source-registry asdf::system-source-registry-directory asdf::default-source-registry))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*source-registry-file* si::*make-special "source-registry.conf" asdf::coerce-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (asdf::*source-registry-directory* si::*make-special "source-registry.conf.d/" asdf::coerce-pathname)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #331=#A(t (12) (asdf::wrapping-source-registry fmakunbound proclaim ((notinline asdf::wrapping-source-registry)) mapc :source-registry :tree "SYS:" translate-logical-pathname :inherit-configuration #Y(asdf::wrapping-source-registry nil nil (26 14 5 14 6 15 7 19 1 8 6 2 12 11 9 6 3 73 29) #331# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 33 12 19 2 34 1 0 73 29) #332=#A(t (35) (asdf::default-source-registry fmakunbound proclaim ((notinline asdf::default-source-registry)) mapc :source-registry :directory asdf::default-directory asdf::os-unix-p "XDG_DATA_HOME" asdf::getenv-absolute-directory asdf::user-homedir ".local/share/" asdf::subpathname "XDG_DATA_DIRS" asdf::getenv-absolute-directories ("/usr/local/share" "/usr/share") asdf::os-windows-p asdf::get-folder-path (:local-appdata :appdata :common-appdata) mapcar append #:loop-list20835 asdf::dir #:loop-list-head20836 #:loop-list-tail20837 0 "common-lisp/systems/" asdf::subpathname* rplacd :tree "common-lisp/source/" (:inherit-configuration) #Y(asdf::default-source-registry nil nil (26 14 5 14 6 19 0 7 6 2 12 58 60 148 77 19 0 8 73 39 31 15 9 19 1 10 73 40 10 19 0 11 12 15 12 19 2 13 12 15 14 19 1 15 40 3 1 16 7 2 73 12 19 0 17 73 39 8 15 18 15 19 19 2 20 12 19 2 21 12 46 22 46 23 75 6 1 45 24 10 0 45 25 57 26 61 2 2 60 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 14 6 13 3 15 27 19 2 28 6 2 6 1 51 1 17 29 13 1 14 30 13 3 15 31 19 2 28 6 2 6 1 51 1 17 29 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 15 32 19 2 21 7 3 73 29) #332# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #333=#A(t (13) (asdf::user-source-registry fmakunbound proclaim ((notinline asdf::user-source-registry)) mapc (nil :direction) :input asdf::direction asdf::*source-registry-file* :direction asdf::in-user-configuration-directory #Y(asdf::user-source-registry nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #333# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #334=#A(t (13) (asdf::system-source-registry fmakunbound proclaim ((notinline asdf::system-source-registry)) mapc (nil :direction) :input asdf::direction asdf::*source-registry-file* :direction asdf::in-system-configuration-directory #Y(asdf::system-source-registry nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #334# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #335=#A(t (13) (asdf::user-source-registry-directory fmakunbound proclaim ((notinline asdf::user-source-registry-directory)) mapc (nil :direction) :input asdf::direction asdf::*source-registry-directory* :direction asdf::in-user-configuration-directory #Y(asdf::user-source-registry-directory nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #335# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #336=#A(t (13) (asdf::system-source-registry-directory fmakunbound proclaim ((notinline asdf::system-source-registry-directory)) mapc (nil :direction) :input asdf::direction asdf::*source-registry-directory* :direction asdf::in-system-configuration-directory #Y(asdf::system-source-registry-directory nil nil (28 5 22 40 3 14 6 46 7 14 8 14 9 13 0 19 3 10 29) #336# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #337=#A(t (9) (asdf::environment-source-registry fmakunbound proclaim ((notinline asdf::environment-source-registry)) mapc "CL_SOURCE_REGISTRY" asdf::getenv #Y(asdf::environment-source-registry nil nil (26 15 5 19 1 6 29) #337# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 14 5 14 6 14 7 15 8 19 5 9 29) #A(t (10) (asdf::process-source-registry fmakunbound proclaim ((notinline asdf::process-source-registry)) mapc :delete-methods t :lambda-list (asdf::spec &key asdf::inherit asdf::register) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function (t &key (:register (or symbol function))) t) asdf::inherit-source-registry)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function (t &key (:register (or symbol function)) (:inherit list)) t) asdf::process-source-registry-directive)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #338=#A(t (12) (asdf::process-source-registry (symbol) (asdf::x &key asdf::inherit asdf::register) asdf::x (t :register :inherit) asdf::inherit asdf::register :inherit :register #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 20 0 23 12 14 7 13 1 14 8 13 0 19 5 0 29) #338# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #339=#A(t (20) (asdf::process-source-registry (pathname) (pathname &key asdf::inherit asdf::register) pathname (t :register :inherit) asdf::inherit asdf::register asdf::directory-pathname-p asdf::truenamize asdf::*here-directory* asdf::validate-source-registry-directory :inherit :register asdf::probe-file* asdf::pathname-directory-pathname asdf::validate-source-registry-file asdf::inherit-source-registry #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 39 29 13 2 19 1 8 48 9 13 2 19 1 10 12 14 11 13 1 14 12 13 0 19 5 0 44 1 38 45 13 2 19 1 13 39 29 13 2 19 1 14 48 9 13 2 19 1 15 12 14 11 13 1 14 12 13 0 19 5 0 44 1 38 10 13 1 14 12 13 0 19 3 16 29) #339# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #340=#A(t (13) (asdf::process-source-registry (string) (string &key asdf::inherit asdf::register) string (t :register :inherit) asdf::inherit asdf::register asdf::parse-source-registry-string :inherit :register #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 2 19 1 7 12 14 8 13 1 14 9 13 0 19 5 0 29) #340# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #341=#A(t (12) (asdf::process-source-registry (null) (asdf::x &key asdf::inherit asdf::register) asdf::x (t :register :inherit) asdf::inherit asdf::register :register asdf::inherit-source-registry #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 13 1 14 7 13 0 19 3 8 29) #341# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 15 12 14 16 19 6 17 29) #342=#A(t (18) (asdf::process-source-registry (cons) (asdf::form &key asdf::inherit asdf::register) asdf::form (t :register :inherit) asdf::inherit asdf::register asdf::*default-source-registry-exclusions* asdf::*source-registry-exclusions* asdf::validate-source-registry-form si::%dolist-var asdf::directive :inherit :register asdf::process-source-registry-directive #Y(nil nil nil (24 45 3 28 4 22 40 2 77 46 5 22 40 2 77 46 6 11 7 48 8 13 2 19 1 9 5 45 10 75 45 11 38 24 10 1 4 51 0 13 0 14 12 13 3 14 13 13 2 19 5 14 10 1 5 51 1 10 1 40 -26 75 73 43 2 44 1 29) #342# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 11 12 19 2 12 1 0 73 29) #343=#A(t (13) (asdf::inherit-source-registry fmakunbound proclaim ((notinline asdf::inherit-source-registry)) mapc asdf::inherit (nil :register) asdf::register :register :inherit asdf::process-source-registry #Y(asdf::inherit-source-registry nil nil (24 45 5 28 6 22 40 2 77 46 7 10 1 73 39 18 10 1 4 12 14 8 13 0 14 9 10 1 5 12 19 5 10 29) #343# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 45 12 19 2 46 1 0 73 29) #344=#A(t (47) (asdf::process-source-registry-directive fmakunbound proclaim ((notinline asdf::process-source-registry-directive)) mapc asdf::directive (nil :register :inherit) asdf::inherit asdf::register consp #:g20850 #:g20851 si::dm-too-few-arguments asdf::kw rest #:g20852 :include #:g20853 #:g20854 pathname si::dm-too-many-arguments asdf::resolve-location :inherit :register asdf::process-source-registry :directory #:g20855 #:g20856 t :tree #:g20857 #:g20858 :recurse :exclude asdf::*source-registry-exclusions* :also-exclude #:g20861 append :default-registry (asdf::default-source-registry) asdf::inherit-source-registry :inherit-configuration :ignore-inherited-configuration (:include :directory :tree :exclude :also-exclude :default-registry :inherit-configuration :ignore-inherited-configuration) si::ecase-error #Y(asdf::process-source-registry-directive nil nil (24 45 5 28 6 22 40 2 77 46 7 22 40 2 77 46 8 10 2 16 9 39 5 10 2 38 5 10 2 6 1 45 10 10 0 45 11 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 13 10 1 45 14 10 1 45 15 10 0 42 16 60 10 1 45 17 10 0 45 18 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 19 10 1 39 6 13 2 19 1 20 13 0 19 1 21 12 14 22 77 14 23 13 8 19 5 24 43 3 38 208 42 25 63 10 1 45 26 10 0 45 27 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 19 10 1 39 6 13 2 19 1 20 10 0 39 16 13 8 13 0 14 25 14 28 19 3 21 12 20 1 23 43 3 38 143 42 29 71 10 1 45 30 10 0 45 31 10 0 76 39 6 13 1 19 1 12 10 0 4 12 10 0 5 51 0 22 45 19 10 1 39 6 13 2 19 1 20 10 0 39 24 13 8 13 0 14 25 14 28 19 3 21 12 14 32 14 28 14 33 14 34 20 5 23 43 3 38 70 42 33 7 10 1 52 34 38 61 42 35 18 10 1 45 36 14 34 13 0 19 2 37 52 34 43 1 38 41 42 38 12 15 39 14 23 13 5 19 3 40 38 27 42 41 12 13 6 14 23 13 5 19 3 40 38 13 42 42 3 38 8 13 0 15 43 19 2 44 43 1 43 4 75 73 29) #344# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 28 12 19 2 29 1 0 73 29) #345=#A(t (30) (asdf::flatten-source-registry fmakunbound proclaim ((notinline asdf::flatten-source-registry)) mapc asdf::parameter #:collect20865 asdf::x #Y(asdf::collect nil nil (24 45 7 26 13 0 10 1 3 51 1 0 29) #345# #1# 0) asdf::default-directory *default-pathname-defaults* asdf::wrapping-source-registry asdf::*default-source-registries* :register directory (nil :exclude :recurse) asdf::recurse asdf::exclude :recurse :exclude #Y(nil nil nil (24 45 14 28 15 22 40 2 77 46 16 22 40 2 77 46 17 13 2 14 18 13 1 14 19 10 0 6 5 12 32 3 18 1 29) #345# #1# 0) asdf::inherit-source-registry reverse :test equal :from-end t remove-duplicates #Y(asdf::flatten-source-registry nil nil (25 40 2 77 46 5 26 75 45 6 30 1 8 19 0 9 48 10 15 11 13 2 11 12 7 3 12 14 13 34 20 12 19 3 21 44 1 10 1 16 22 12 43 1 43 1 14 23 15 24 14 25 14 26 19 5 27 29) #345# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 44 12 19 2 45 1 0 73 29) #346=#A(t (46) (asdf::compute-source-registry fmakunbound proclaim ((notinline asdf::compute-source-registry)) mapc asdf::parameter asdf::*source-registry* asdf::registry asdf::flatten-source-registry si::%dolist-var asdf::entry #:g20898 #:g20899 si::dm-too-few-arguments directory :recurse si::search-keyword #:g20900 si::missing-keyword eq asdf::recurse :exclude #:g20901 asdf::exclude (:exclude :recurse) si::check-keyword :test equal make-hash-table asdf::h :collect asdf::asd pathname-name asdf::name logical-pathname typep string-downcase gethash asdf::*asdf-verbose* "~@<In source-registry entry ~A~@[/~*~] ~
                                found several entries for ~A - picking ~S over ~S~:>" warn si::hash-set #Y(nil nil nil (24 45 31 26 13 0 19 1 32 45 33 13 1 15 34 19 2 35 39 8 13 0 19 1 36 38 3 10 0 45 33 13 0 13 13 19 2 37 39 5 75 73 38 56 13 0 13 3 19 2 37 39 29 11 38 73 39 22 15 39 13 8 13 6 13 0 13 0 13 3 19 2 37 12 13 2 19 6 40 38 19 13 0 13 13 13 2 19 3 41 13 0 13 3 13 2 19 3 41 43 2 29) #346# #1# 0) asdf::register-asd-directory #Y(asdf::compute-source-registry nil nil (25 40 2 77 46 5 25 40 3 14 6 46 7 26 13 1 19 1 8 45 9 75 45 10 38 129 10 1 4 51 0 10 0 45 11 10 0 45 12 10 0 76 39 6 13 1 19 1 13 10 0 4 12 10 0 5 51 0 22 45 14 13 1 15 15 19 2 16 45 17 13 0 1 18 17 19 39 4 75 38 3 10 0 45 20 13 3 15 21 19 2 16 45 22 13 0 1 18 17 19 39 4 75 38 3 10 0 45 23 13 5 15 24 19 2 25 14 26 15 27 19 2 28 45 29 13 5 14 15 13 3 14 21 13 1 14 30 34 42 12 19 7 43 10 0 43 1 43 7 10 1 5 51 1 10 1 40 -131 43 2 0 29) #346# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*source-registry-parameter* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #347=#A(t (14) (asdf::initialize-source-registry fmakunbound proclaim ((notinline asdf::initialize-source-registry)) mapc asdf::*source-registry-parameter* asdf::parameter :test equal make-hash-table asdf::*source-registry* asdf::compute-source-registry #Y(asdf::initialize-source-registry nil nil (25 40 3 14 5 46 6 26 10 0 52 5 14 7 15 8 19 2 9 52 10 13 0 19 1 11 29) #347# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 8 12 19 2 9 1 0 73 29) #348=#A(t (10) (asdf::ensure-source-registry fmakunbound proclaim ((notinline asdf::ensure-source-registry)) mapc asdf::parameter asdf::source-registry-initialized-p asdf::initialize-source-registry #Y(asdf::ensure-source-registry nil nil (25 40 2 77 46 5 26 19 0 6 76 39 6 13 0 19 1 7 0 29) #348# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 10 12 19 2 11 1 0 73 29) #349=#A(t (12) (asdf::sysdef-source-registry-search fmakunbound proclaim ((notinline asdf::sysdef-source-registry-search)) mapc asdf::system asdf::ensure-source-registry asdf::coerce-name asdf::*source-registry* gethash #Y(asdf::sysdef-source-registry-search nil nil (24 45 5 26 19 0 6 13 0 19 1 7 12 14 8 19 2 9 12 72 1 29) #349# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 7 12 19 2 8 1 0 73 29) #350=#A(t (9) (asdf::clear-configuration fmakunbound proclaim ((notinline asdf::clear-configuration)) mapc asdf::clear-source-registry asdf::clear-output-translations #Y(asdf::clear-configuration nil nil (26 19 0 5 19 0 6 29) #350# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 58 60 75 77 14 10 46 11 46 12 75 6 1 45 13 10 0 45 14 57 15 61 2 2 41 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 3 1 16 17 17 76 39 11 13 1 34 21 6 1 51 1 17 22 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 52 10 1 23 52 24 15 23 1 41 12 19 2 9 1 23 73 29) #351=#A(t (42) (asdf::register-pre-built-system asdf::name asdf::system :name asdf::coerce-name :source-file make-instance asdf::register-system #Y(asdf::register-pre-built-system nil nil (24 45 1 26 15 2 14 3 13 0 19 1 4 12 14 5 77 19 5 6 12 19 1 7 29) #351# #1# 0) si::fset ext::*module-provider-functions* #:loop-list20913 asdf::f #:loop-list-head20914 #:loop-list-tail20915 0 asdf::module-provide-asdf eq list asdf::l values-list #Y(nil nil nil (24 45 1 26 15 18 13 4 13 0 20 1 23 69 21 23 45 19 10 0 4 39 10 13 1 19 1 4 12 19 1 0 10 0 16 20 43 1 29) #351# #1# 0) rplacd asdf::compile-file-keeping-object asdf::*compile-op-compile-file-function* asdf::input-file asdf::keys (t) asdf::use-ecl-byte-compiler-p asdf::compile-file* apply :system-p t asdf::flags2 asdf::flags1 asdf::object-file :type :fasl compile-file-pathname :lisp-files c::build-fasl #Y(asdf::compile-file-keeping-object nil nil (24 45 25 27 45 26 28 27 19 0 28 39 12 15 29 13 1 13 0 19 3 30 38 62 15 29 13 1 14 31 14 32 13 0 19 5 30 47 2 33 47 1 34 45 35 10 0 73 39 27 13 0 14 36 14 37 19 3 38 12 14 39 10 0 6 1 12 19 3 40 73 39 4 10 0 73 12 13 1 13 2 72 3 43 3 29) #351# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 25 12 19 2 26 1 0 73 29) #352=#A(t (27) (asdf::module-provide-asdf fmakunbound proclaim ((notinline asdf::module-provide-asdf)) mapc asdf::name style-warning muffle-warning asdf::missing-component constantly error asdf::e *error-output* "~@<ASDF could not load ~(~A~) because ~A.~@:>~%" format #Y(nil nil nil (24 45 11 26 14 12 15 13 13 1 13 0 19 4 14 29) #352# #1# 0) si::*handler-clusters* make-broadcast-stream string-downcase asdf::find-system asdf::system asdf::*verbose-out* :verbose asdf::require-system t #Y(asdf::module-provide-asdf nil nil (24 45 5 26 15 6 33 7 3 12 15 8 77 19 1 9 3 12 15 10 34 15 3 6 3 12 11 16 3 48 16 19 0 17 12 13 0 19 1 18 12 77 19 2 19 12 46 20 49 21 10 0 73 39 12 13 0 14 22 77 19 3 23 11 24 73 43 1 44 1 44 1 29) #352# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (11 0 45 1 10 0 73 39 5 1 2 16 3 43 1 29) #A(t (4) (t asdf::x (pushnew 'asdf::module-provide-asdf ext::*module-provider-functions*) eval)) #1# 0) #Y(si::bytecodes nil nil (11 0 73 39 8 19 0 1 75 52 0 73 29) #A(t (2) (asdf::*ignored-configuration-form* asdf::clear-configuration)) #1# 0) #Y(si::bytecodes nil nil (11 0 73 39 10 15 1 19 0 2 12 19 2 3 29) #A(t (4) (*load-verbose* ";; ASDF, version ~a~%" asdf::asdf-version asdf::asdf-message)) #1# 0) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 52 1 73 29) #A(t (3) (:asdf *features* adjoin)) #1# 0) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 52 1 73 29) #A(t (3) (:asdf2 *features* adjoin)) #1# 0) #Y(si::bytecodes nil nil (14 0 19 1 1 29) #A(t (2) (:asdf provide)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#2# si::select-package)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #353=#A(t (7) (asdf::fasl-type "foo.lisp" compile-file-pathname pathname-type identity #Y(asdf::fasl-type nil nil (26 15 1 19 1 2 12 19 1 3 16 4 29) #353# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::bundle-op (asdf::operation) ((:writers ((setf asdf::bundle-op-build-args)) :readers (asdf::bundle-op-build-args) :initform nil :initargs (:args) :name asdf::build-args) (:initform nil :initargs (:name-suffix) :name asdf::name-suffix) (:readers (asdf::bundle-op-type) :name type) (:writers ((setf asdf::bundle-op-lisp-files)) :readers (asdf::bundle-op-lisp-files) :initform nil :name asdf::lisp-files)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::fasl-op (asdf::bundle-op) ((:initform :fasl :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::lib-op (asdf::bundle-op) ((:initform :lib :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::dll-op (asdf::bundle-op) ((:initform :dll :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::monolithic-bundle-op (asdf::bundle-op) ((:writers ((setf asdf::monolithic-op-prologue-code)) :readers (asdf::monolithic-op-prologue-code) :name asdf::prologue-code) (:writers ((setf asdf::monolithic-op-epilogue-code)) :readers (asdf::monolithic-op-epilogue-code) :name asdf::epilogue-code)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #354=#A(t (6) (asdf::bundle-op-monolithic-p asdf::op asdf::monolithic-bundle-op typep #Y(asdf::bundle-op-monolithic-p nil nil (24 45 1 26 13 0 15 2 19 2 3 29) #354# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::monolithic-fasl-op (asdf::monolithic-bundle-op asdf::fasl-op) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::monolithic-lib-op (asdf::monolithic-bundle-op asdf::lib-op) ((:initform :lib :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::monolithic-dll-op (asdf::monolithic-bundle-op asdf::dll-op) ((:initform :dll :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::program-op (asdf::monolithic-bundle-op) ((:initform :program :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 56 12 14 35 19 6 57 29) #355=#A(t (58) (initialize-instance (:after) (asdf::bundle-op) (asdf::instance &rest asdf::initargs &key (asdf::name-suffix nil asdf::name-suffix-p) &allow-other-keys) asdf::instance asdf::initargs (t :name-suffix) asdf::name-suffix-p asdf::name-suffix #:g20977 #:g20978 asdf::bundle-op-monolithic-p ".system-and-dependencies" ".system" #:g20979 (setf slot-value) asdf::monolithic-bundle-op typep asdf::original-initargs slot-value #:g20980 #:g20981 :lisp-files si::search-keyword #:g20982 si::missing-keyword eq asdf::lisp-files :prologue-code #:g20983 asdf::prologue-code :epilogue-code #:g20984 asdf::epilogue-code (:epilogue-code :prologue-code :lisp-files) t si::check-keyword #:g20985 #:g20986 (asdf::lisp-files asdf::epilogue-code asdf::prologue-code) asdf::remove-keys #:g20987 (setf slot-value) #:g20988 #:g20989 (setf asdf::monolithic-op-prologue-code) #:g20990 #:g20991 (setf asdf::monolithic-op-epilogue-code) #:g20992 #:g20993 (setf asdf::bundle-op-lisp-files) #:g20994 (type asdf::monolithic asdf::name-suffix) #:g20995 (setf asdf::bundle-op-build-args) #Y(nil nil nil (24 45 4 27 45 5 28 6 22 40 3 77 75 45 7 46 8 10 1 76 39 38 10 3 45 9 1 8 45 10 13 5 19 1 11 39 5 1 12 38 3 1 13 45 14 13 0 13 2 13 1 33 15 18 3 43 1 43 2 13 3 15 16 19 2 17 39 192 13 3 15 18 19 2 19 45 20 10 0 45 21 10 0 45 18 13 1 15 22 19 2 23 45 24 13 0 1 25 17 26 39 4 75 38 3 10 0 45 27 13 3 15 28 19 2 23 45 29 13 0 1 25 17 26 39 4 75 38 3 10 0 45 30 13 5 15 31 19 2 23 45 32 13 0 1 25 17 26 39 4 75 38 3 10 0 45 33 13 7 15 34 14 35 19 3 36 10 12 45 37 1 18 45 38 15 39 13 8 19 2 40 45 41 13 0 13 2 13 1 33 42 18 3 43 1 43 2 10 12 45 43 10 3 45 44 13 0 13 1 33 45 18 2 43 1 43 1 10 12 45 46 10 1 45 47 13 0 13 1 33 48 18 2 43 1 43 1 10 12 45 49 10 5 45 50 13 0 13 1 33 51 18 2 43 1 43 1 43 9 10 3 45 52 15 53 13 4 15 18 19 2 19 12 19 2 40 45 54 13 0 13 1 33 55 18 2 43 1 43 1 29) #355# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 12 12 14 13 19 6 14 29) #356=#A(t (15) (asdf::bundle-op-build-args (:around) (asdf::lib-op) (asdf::op) asdf::op call-next-method asdf::args :ld-flags #:g21003 si::rem-f si::flag #:g21002 #Y(nil nil nil (24 45 4 26 19 0 5 45 6 11 7 45 8 13 1 10 0 17 9 47 1 10 45 11 10 0 51 3 10 1 43 2 43 1 10 0 73 43 1 29) #356# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (asdf::*force-load-p* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 8 12 14 9 19 6 10 29) #357=#A(t (11) (asdf::operation-done-p (:around) (asdf::load-op t) (asdf::operation asdf::c) asdf::operation asdf::c asdf::*force-load-p* call-next-method #Y(nil nil nil (24 45 4 24 45 5 26 11 6 39 5 75 73 38 4 19 0 7 29) #357# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 26 12 19 2 27 1 0 73 29) #358=#A(t (28) (asdf::gather-components asdf::op-type asdf::system (nil :include-self :filter-type :filter-system) asdf::filter-system asdf::filter-type asdf::include-self make-instance asdf::operation t asdf::*force-load-p* asdf::load-op asdf::traverse asdf::tree #:loop-list21008 asdf::component asdf::op #:loop-list-head21009 #:loop-list-tail21010 0 #23# typep asdf::component-system eq rplacd append #Y(asdf::gather-components nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 22 40 2 77 46 5 22 40 2 77 46 6 13 4 19 1 7 45 8 11 9 48 10 15 11 19 1 7 12 13 4 19 2 12 45 13 58 60 135 77 77 13 1 46 14 46 15 46 16 75 6 1 45 17 10 0 45 18 57 19 61 2 2 97 10 5 2 39 4 35 0 1 10 5 4 45 20 10 0 4 51 4 10 0 5 51 0 10 0 51 5 43 1 10 5 5 51 5 13 3 15 11 19 2 21 39 25 13 4 13 10 19 2 21 39 16 10 11 76 40 11 13 4 19 1 22 12 10 11 17 23 39 25 13 1 13 4 10 12 17 23 39 4 75 51 9 13 8 10 4 3 6 1 51 1 17 24 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 12 10 2 73 39 9 13 1 10 5 3 6 1 73 12 19 2 25 43 2 44 1 29) #358# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 19 5 5 29) #A(t (6) (asdf::bundle-sub-operations :delete-methods t :lambda-list (asdf::operation asdf::component) ensure-generic-function)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 9 19 6 12 29) #359=#A(t (13) (asdf::bundle-sub-operations (asdf::monolithic-bundle-op t) (asdf::o asdf::c) asdf::o asdf::c asdf::lib-op :filter-type asdf::system :include-self t asdf::gather-components #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 14 6 15 7 14 8 14 9 19 6 10 29) #359# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #360=#A(t (14) (asdf::bundle-sub-operations (asdf::lib-op t) (asdf::o asdf::c) asdf::o asdf::c asdf::compile-op :filter-system asdf::bundle-op-monolithic-p :filter-type (not asdf::system) asdf::gather-components #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 14 6 13 1 19 1 7 76 73 39 4 10 0 73 12 14 8 15 9 19 6 10 29) #360# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 10 12 14 11 19 6 12 29) #361=#A(t (13) (asdf::bundle-sub-operations (asdf::monolithic-lib-op t) (asdf::o asdf::c) asdf::o asdf::c asdf::compile-op :filter-system :filter-type (not asdf::system) asdf::gather-components #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 14 6 77 14 7 15 8 19 6 9 29) #361# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #362=#A(t (10) (asdf::bundle-sub-operations (asdf::dll-op t) (asdf::o asdf::c) asdf::o asdf::c asdf::lib-op make-instance #Y(nil nil nil (24 45 3 24 45 4 26 15 5 19 1 6 12 10 0 3 6 1 73 29) #362# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #363=#A(t (10) (asdf::bundle-sub-operations (asdf::fasl-op t) (asdf::o asdf::c) asdf::o asdf::c asdf::lib-op make-instance #Y(nil nil nil (24 45 3 24 45 4 26 15 5 19 1 6 12 10 0 3 6 1 73 29) #363# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 19 12 14 20 19 6 21 29) #364=#A(t (22) (asdf::component-depends-on (asdf::bundle-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::bundle-sub-operations #:loop-list21021 asdf::dep asdf::op #:loop-list-head21022 #:loop-list-tail21023 0 #23# asdf::system typep class-of class-name asdf::component-name rplacd #Y(nil nil nil (24 45 3 24 45 4 26 58 60 115 77 77 13 2 13 1 19 2 5 12 46 6 46 7 46 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 71 10 5 2 39 4 35 0 1 10 5 4 45 12 10 0 4 51 4 10 0 5 51 0 10 0 51 5 43 1 10 5 5 51 5 13 4 15 13 19 2 14 39 25 13 1 10 3 16 15 12 19 1 16 12 13 4 19 1 17 6 2 6 1 51 1 17 18 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 29) #364# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #365=#A(t (10) (asdf::component-depends-on (asdf::lib-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::compile-op asdf::component-name #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 19 1 6 6 2 6 1 73 29) #365# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #366=#A(t (8) (asdf::component-depends-on (asdf::bundle-op t) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #366# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 18 12 14 19 19 6 20 29) #367=#A(t (21) (asdf::input-files (asdf::bundle-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::bundle-sub-operations #:loop-list21039 asdf::sub-c asdf::sub-op #:loop-list-head21040 #:loop-list-tail21041 0 #23# #:g21042 asdf::output-files #:g21043 rplacd last #Y(nil nil nil (24 45 3 24 45 4 26 58 60 118 77 77 13 2 13 1 19 2 5 12 46 6 46 7 46 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 74 10 5 2 39 4 35 0 1 10 5 4 45 12 10 0 4 51 4 10 0 5 51 0 10 0 51 5 43 1 10 5 5 51 5 10 1 45 13 13 4 13 5 19 2 14 45 15 13 1 10 0 17 16 10 0 43 1 43 1 39 10 10 1 5 12 19 1 17 51 1 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 29) #367# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #368=#A(t (20) (asdf::output-files (asdf::bundle-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c :name asdf::component-name asdf::name-suffix slot-value asdf::strcat :type "lisp" :defaults asdf::system-source-directory make-pathname asdf::bundle-op-type compile-file-pathname #Y(nil nil nil (24 45 3 24 45 4 26 14 5 13 0 19 1 6 12 13 1 15 7 19 2 8 12 19 2 9 12 14 10 15 11 14 12 13 0 19 1 13 12 19 6 14 12 14 10 13 1 19 1 15 12 19 3 16 6 1 73 29) #368# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 5 19 6 7 29) #369=#A(t (8) (asdf::perform (asdf::bundle-op t) (asdf::o asdf::c) asdf::o asdf::c t #Y(nil nil nil (24 45 3 24 45 4 26 11 5 73 29) #369# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 5 19 6 7 29) #370=#A(t (8) (asdf::operation-done-p (asdf::bundle-op asdf::source-file) (asdf::o asdf::c) asdf::o asdf::c t #Y(nil nil nil (24 45 3 24 45 4 26 11 5 73 29) #370# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 1 0 73 29) #371=#A(t (24) (asdf::select-operation asdf::monolithic type #:g21045 :binary asdf::monolithic-binary-op asdf::binary-op :dll :shared-library asdf::monolithic-dll-op asdf::dll-op :lib :static-library asdf::monolithic-lib-op asdf::lib-op :fasl asdf::monolithic-fasl-op asdf::fasl-op :program asdf::program-op (:binary :shared-library :dll :static-library :lib :fasl :program) si::ecase-error #Y(asdf::select-operation nil nil (24 45 1 24 45 2 26 10 0 45 3 10 0 42 4 15 10 2 39 6 1 5 73 38 4 1 6 73 38 73 41 7 4 42 8 15 10 2 39 6 1 9 73 38 4 1 10 73 38 53 41 11 4 42 12 15 10 2 39 6 1 13 73 38 4 1 14 73 38 33 42 15 15 10 2 39 6 1 16 73 38 4 1 17 73 38 16 42 18 6 1 19 73 38 8 13 0 15 20 19 2 21 43 1 29) #371# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 46 12 19 2 47 1 0 73 29) #372=#A(t (48) (asdf::make-build asdf::system asdf::args (t :move-here :type :monolithic) asdf::monolithic :fasl type asdf::move-here-p asdf::move-here asdf::select-operation asdf::operation-name (or pathname string) typep pathname "./asdf-output/" merge-pathnames asdf::move-here-path asdf::operate (asdf::monolithic type asdf::move-here) asdf::remove-keys apply asdf::operation asdf::find-system asdf::output-files asdf::files (:program :binary) member ensure-directories-exist truename asdf::dest-path #:loop-list21049 asdf::f asdf::new-f #:loop-list-head21050 #:loop-list-tail21051 0 :name pathname-name :type pathname-type :defaults make-pathname probe-file delete-file rename-file rplacd #Y(asdf::make-build nil nil (24 45 1 27 45 2 28 3 22 40 2 77 46 4 22 40 3 14 5 46 6 22 40 3 77 75 45 7 46 8 13 3 13 2 19 2 9 45 10 10 1 39 8 13 1 15 11 19 2 12 39 7 10 1 16 13 38 6 15 14 19 1 15 45 16 33 17 12 13 1 13 7 15 18 13 6 19 2 19 12 19 4 20 45 21 13 8 19 1 22 45 1 10 0 39 8 13 1 13 0 19 2 23 45 24 10 5 40 13 10 6 76 39 8 13 4 15 25 19 2 26 39 130 58 60 125 13 4 19 1 27 16 28 45 29 77 13 2 46 30 46 31 75 45 32 75 6 1 45 33 10 0 45 34 57 35 61 2 2 74 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 14 36 13 4 19 1 37 12 14 38 13 4 19 1 39 12 14 40 13 6 19 6 41 51 3 10 3 16 42 39 5 10 3 16 43 13 4 13 3 19 2 44 13 1 10 3 6 1 51 1 17 45 35 0 0 10 2 5 73 36 7 62 73 43 2 43 1 43 2 43 1 63 38 4 10 0 73 43 5 29) #372# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::load-fasl-op (asdf::operation) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #373=#A(t (15) (asdf::component-depends-on (asdf::load-fasl-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::trivial-system-p asdf::load-fasl-op asdf::load-op asdf::fasl-op asdf::compile-op make-instance subst #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 76 73 39 28 15 6 15 7 15 8 15 9 15 7 19 1 10 12 13 0 19 2 0 12 19 3 11 12 19 3 11 29) #373# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #374=#A(t (12) (asdf::input-files (asdf::load-fasl-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::trivial-system-p asdf::fasl-op make-instance asdf::output-files #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 76 73 39 12 15 6 19 1 7 12 13 0 19 2 8 29) #374# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #375=#A(t (8) (asdf::perform (asdf::load-fasl-op t) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #375# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 16 12 14 17 19 6 18 29) #376=#A(t (19) (asdf::perform (asdf::load-fasl-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c asdf::input-files asdf::l load asdf::module-components #:loop-list21073 asdf::i 0 asdf::load-op asdf::component-operation-times get-universal-time si::hash-set #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 45 6 10 0 73 39 68 10 0 4 12 19 1 7 73 39 58 77 13 1 19 1 8 12 46 9 46 10 57 11 61 2 2 37 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 15 12 13 1 19 1 13 12 19 0 14 12 19 3 15 35 0 0 62 73 43 2 43 1 29) #376# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::compiled-file (asdf::component) ((:initform nil :name type)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #377=#A(t (9) (asdf::trivial-system-p asdf::c asdf::compiled-file typep #Y(nil nil nil (24 45 1 26 13 0 15 2 19 2 3 29) #377# #1# 0) asdf::module-components every #Y(asdf::trivial-system-p nil nil (24 45 1 26 34 4 12 13 0 19 1 5 12 19 2 6 29) #377# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #378=#A(t (15) (asdf::component-relative-pathname (asdf::compiled-file) (asdf::component) asdf::component asdf::relative-pathname slot-value asdf::component-name :type asdf::fasl-type :defaults asdf::component-parent-pathname asdf::coerce-pathname #Y(nil nil nil (24 45 3 26 13 0 15 4 19 2 5 73 40 6 13 0 19 1 6 12 14 7 19 0 8 12 14 9 13 0 19 1 10 12 19 5 11 29) #378# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #379=#A(t (8) (asdf::output-files (t asdf::compiled-file) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #379# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #380=#A(t (8) (asdf::input-files (t asdf::compiled-file) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #380# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #381=#A(t (10) (asdf::perform (asdf::load-op asdf::compiled-file) (asdf::o asdf::c) asdf::o asdf::c asdf::component-pathname load #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 19 1 6 29) #381# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #382=#A(t (10) (asdf::perform (asdf::load-fasl-op asdf::compiled-file) (asdf::o asdf::c) asdf::o asdf::c asdf::component-pathname load #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 19 1 6 29) #382# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #383=#A(t (8) (asdf::perform (t asdf::compiled-file) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #383# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::prebuilt-system (asdf::system) ((:initargs (:lib) :writers ((setf asdf::prebuilt-system-static-library)) :readers (asdf::prebuilt-system-static-library) :name asdf::static-library)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 6 19 6 8 29) #384=#A(t (9) (asdf::output-files (asdf::lib-op asdf::prebuilt-system) (asdf::o asdf::c) asdf::o asdf::c asdf::prebuilt-system-static-library t #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 6 1 12 14 6 72 2 29) #384# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #385=#A(t (9) (asdf::perform (asdf::lib-op asdf::prebuilt-system) (asdf::o asdf::c) asdf::o asdf::c asdf::output-files #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 4 73 29) #385# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #386=#A(t (8) (asdf::component-depends-on (asdf::lib-op asdf::prebuilt-system) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #386# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #387=#A(t (8) (asdf::bundle-sub-operations (asdf::lib-op asdf::prebuilt-system) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #387# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #388=#A(t (10) (asdf::bundle-sub-operations (asdf::monolithic-lib-op asdf::prebuilt-system) (asdf::o asdf::c) asdf::o asdf::c "Prebuilt system ~S shipped with ECL can not be used in a monolithic library operation." error #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 19 2 6 29) #388# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #389=#A(t (8) (asdf::bundle-sub-operations (asdf::monolithic-bundle-op asdf::prebuilt-system) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #389# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::binary-op (asdf::bundle-op) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 29) #A(t (3) (asdf::monolithic-binary-op (asdf::binary-op asdf::monolithic-bundle-op) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #390=#A(t (13) (asdf::binary-op-dependencies asdf::o asdf::s asdf::bundle-op-monolithic-p asdf::monolithic-lib-op asdf::monolithic-fasl-op asdf::lib-op asdf::fasl-op :args asdf::bundle-op-build-args make-instance #Y(asdf::binary-op-dependencies nil nil (24 45 1 24 45 2 26 13 1 19 1 3 39 9 15 4 15 5 72 2 38 7 15 6 15 7 72 2 47 1 7 45 6 13 0 14 8 13 3 19 1 9 12 19 3 10 12 10 2 6 2 12 13 1 14 8 13 3 19 1 9 12 19 3 10 12 10 2 6 2 6 2 73 43 2 29) #390# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #391=#A(t (20) (asdf::component-depends-on (asdf::binary-op asdf::system) (asdf::o asdf::s) asdf::o asdf::s asdf::binary-op-dependencies #:loop-list21095 asdf::dep #:loop-list-head21096 #:loop-list-tail21097 0 #:g21098 apply copy-list #:g21099 rplacd last #Y(nil nil nil (24 45 3 24 45 4 26 58 60 102 77 13 2 13 1 19 2 5 12 46 6 46 7 75 6 1 45 8 10 0 45 9 57 10 61 2 2 61 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 1 45 11 33 0 12 13 4 19 2 12 16 13 45 14 13 1 10 0 17 15 10 0 43 1 43 1 39 10 10 1 5 12 19 1 16 51 1 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 29) #391# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 17 12 14 18 19 6 19 29) #392=#A(t (20) (asdf::input-files (asdf::binary-op asdf::system) (asdf::o asdf::s) asdf::o asdf::s asdf::binary-op-dependencies #:loop-list21115 asdf::dep #:loop-list-head21116 #:loop-list-tail21117 0 #:g21118 apply copy-list #:g21119 rplacd last #Y(nil nil nil (24 45 3 24 45 4 26 58 60 102 77 13 2 13 1 19 2 5 12 46 6 46 7 75 6 1 45 8 10 0 45 9 57 10 61 2 2 61 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 1 45 11 33 0 12 13 4 19 2 12 16 13 45 14 13 1 10 0 17 15 10 0 43 1 43 1 39 10 10 1 5 12 19 1 16 51 1 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 29) #392# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 24 12 14 25 19 6 26 29) #393=#A(t (27) (asdf::output-files (asdf::binary-op asdf::system) (asdf::o asdf::s) asdf::o asdf::s :name asdf::component-name :type "asd" make-pathname asdf::component-relative-pathname asdf::merge-pathnames* asdf::binary-op-dependencies #:loop-list21135 asdf::dep #:loop-list-head21136 #:loop-list-tail21137 0 #:g21138 apply copy-list #:g21139 rplacd last #Y(nil nil nil (24 45 3 24 45 4 26 14 5 13 0 19 1 6 12 14 7 15 8 19 4 9 12 13 0 19 1 10 12 19 2 11 12 58 60 101 77 13 2 13 1 19 2 12 12 46 13 46 14 75 6 1 45 15 10 0 45 16 57 17 61 2 2 61 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 1 45 18 33 0 12 13 4 19 2 19 16 20 45 21 13 1 10 0 17 22 10 0 43 1 43 1 39 10 10 1 5 12 19 1 23 51 1 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 7 2 73 29) #393# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 53 12 14 52 19 6 54 29) #394=#A(t (55) (asdf::perform (asdf::binary-op asdf::system) (asdf::o asdf::s) asdf::o asdf::s asdf::binary-op-dependencies asdf::dependencies asdf::output-files apply asdf::library second asdf::fasl asdf::filename asdf::component-name asdf::name string :keyword find-package intern asdf::name-keyword si::%dolist-var asdf::dep :direction :output :if-exists :supersede :if-does-not-exist :create open ";;; Prebuilt ASDF definition for system ~A" format ";;; Built for ~A ~A on a ~A/~A ~A" lisp-implementation-type lisp-implementation-version software-type machine-type software-version *package* asdf::defsystem :class asdf::prebuilt-system :components :compiled-file pathname-name :lib :name :type pathname-type make-pathname pprint close :abort t #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 2 5 45 6 33 7 12 10 0 4 12 19 2 8 4 45 9 33 7 12 10 1 16 10 12 19 2 8 4 45 11 13 4 13 3 19 2 7 4 45 12 13 4 19 1 13 45 14 10 0 16 15 12 11 16 16 17 12 19 2 18 45 19 10 5 45 20 75 45 21 38 19 10 1 4 51 0 33 0 12 13 0 19 2 8 10 1 5 51 1 10 1 40 -21 43 2 13 2 14 22 14 23 14 24 14 25 14 26 14 27 19 7 28 45 4 64 108 13 0 15 29 13 2 19 3 30 13 0 15 31 19 0 32 12 19 0 33 12 19 0 34 12 19 0 35 12 19 0 36 12 19 7 30 11 16 16 17 48 37 15 38 13 1 14 39 15 40 14 41 14 42 13 4 19 1 43 6 2 6 1 12 14 44 14 45 13 5 19 1 43 12 14 46 13 5 19 1 47 12 19 4 48 6 8 12 13 0 19 2 49 44 1 69 10 0 39 6 13 0 19 1 50 70 65 10 0 39 10 13 0 14 51 14 52 19 3 50 66 43 1 43 6 29) #394# #1# 0) clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #395=#A(t (20) (asdf::copy-stream-to-stream asdf::input asdf::output (nil :buffer-size :element-type) character asdf::element-type asdf::buffer-size asdf::buffer asdf::end 0 :element-type make-array read-sequence zerop :end write-sequence < close #Y(asdf::copy-stream-to-stream nil nil (24 45 1 24 45 2 28 3 22 40 3 15 4 46 5 22 40 3 9 8192 46 6 10 3 45 1 64 83 58 60 79 75 45 7 75 45 8 57 9 61 2 2 60 10 5 6 1 12 14 10 13 6 19 3 11 51 2 13 2 13 4 19 2 12 51 1 10 1 16 13 39 4 35 0 1 13 2 13 7 14 14 13 1 19 4 15 13 1 13 5 19 2 16 39 5 75 73 36 3 35 0 0 62 73 43 1 43 1 63 65 13 0 19 1 17 66 43 1 29) #395# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 23 12 19 2 24 1 0 73 29) #396=#A(t (25) (asdf::concatenate-files asdf::inputs asdf::output :element-type (unsigned-byte 8) :direction :output :if-exists :rename-and-delete open asdf::o si::%dolist-var asdf::input (unsigned-byte 8) :input :if-does-not-exist :error asdf::i (unsigned-byte 8) asdf::copy-stream-to-stream close :abort t #Y(asdf::concatenate-files nil nil (24 45 1 24 45 2 26 13 0 14 3 15 4 14 5 14 6 14 7 14 8 19 7 9 45 10 64 100 10 2 45 11 75 45 12 38 71 10 1 4 51 0 13 0 14 3 15 13 14 5 14 14 14 15 14 16 19 7 9 45 17 64 24 13 0 13 3 14 3 15 18 19 4 19 69 10 0 39 6 13 0 19 1 20 70 65 10 0 39 10 13 0 14 21 14 22 19 3 20 66 43 1 10 1 5 51 1 10 1 40 -73 75 73 43 2 69 10 0 39 6 13 0 19 1 20 70 65 10 0 39 10 13 0 14 21 14 22 19 3 20 66 43 1 29) #396# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 3 19 2 4 15 0 1 12 12 19 2 13 1 0 73 29) #397=#A(t (14) (asdf::add-pathname-suffix fmakunbound proclaim ((notinline asdf::add-pathname-suffix)) mapc pathname asdf::suffix :name pathname-name asdf::strcat :defaults make-pathname #Y(asdf::add-pathname-suffix nil nil (24 45 5 24 45 6 26 14 7 13 1 19 1 8 12 13 0 19 2 9 12 14 10 13 1 19 4 11 29) #397# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #398=#A(t (8) (asdf::combine-fasls asdf::inputs asdf::output "~S is not supported on ~A" asdf::implementation-type error #Y(asdf::combine-fasls nil nil (24 45 1 24 45 2 26 15 3 15 0 19 0 4 12 19 3 5 29) #398# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #399=#A(t (11) (asdf::call-with-staging-pathname pathname asdf::fun "-ASDF-TMP" asdf::add-pathname-suffix asdf::staging rename-file asdf::probe-file* delete-file #Y(asdf::call-with-staging-pathname nil nil (24 45 1 24 45 2 26 10 1 16 1 45 1 13 0 15 3 19 2 4 45 5 64 18 13 2 13 0 20 1 23 69 13 0 13 1 19 2 6 70 65 13 0 19 1 7 39 5 10 0 16 8 66 43 2 29) #399# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 14 15 9 2 19 4 16 1 0 73 29) #400=#A(t (17) (asdf::with-staging-pathname #:g21141 #:g21140 #:g21142 si::dm-too-few-arguments #:g21143 #:g21144 asdf::pathname-var asdf::pathname-value asdf::body si::dm-too-many-arguments asdf::call-with-staging-pathname function lambda #Y(asdf::with-staging-pathname nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 3 10 0 45 8 10 4 45 9 10 3 39 6 13 7 19 1 10 15 11 13 1 15 12 15 13 10 2 6 1 12 10 0 7 3 6 2 6 3 73 29) #400# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #401=#A(t (8) (asdf::output-files (asdf::fasl-op asdf::source-file) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #401# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 5 12 14 6 19 6 7 29) #402=#A(t (8) (asdf::input-files (asdf::fasl-op asdf::source-file) (asdf::o asdf::c) asdf::o asdf::c #Y(nil nil nil (24 45 3 24 45 4 26 75 73 29) #402# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (asdf::precompiled-system (asdf::system) ((:readers (asdf::%system-fasl) :initargs (:fasl) :name asdf::fasl)) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 19 5 5 15 0 15 0 77 15 6 15 7 1 21 12 14 2 19 6 22 12 19 2 23 29) #403=#A(t (24) (asdf::system-fasl :delete-methods t :lambda-list (asdf::system) ensure-generic-function (asdf::precompiled-system) (asdf::system) asdf::system asdf::%system-fasl asdf::f #:g21148 #404=(or pathname string) typep function cons eval (#404# function cons) si::etypecase-error asdf::p pathname #Y(nil nil nil (24 45 8 26 13 0 19 1 9 45 10 10 0 45 11 13 0 15 12 19 2 13 39 5 10 1 38 39 13 0 15 14 19 2 13 39 8 13 1 20 0 23 38 23 13 0 15 15 19 2 13 39 7 10 1 16 16 38 8 13 0 15 17 19 2 18 43 1 45 19 10 0 16 20 43 2 29) #403# #1# 0) clos::install-method clos::associate-methods-to-gfun)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #405=#A(t (9) (asdf::input-files (asdf::load-op asdf::precompiled-system) (asdf::o asdf::s) asdf::o asdf::s asdf::system-fasl #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 6 1 73 29) #405# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #406=#A(t (10) (asdf::perform (asdf::load-op asdf::precompiled-system) (asdf::o asdf::s) asdf::o asdf::s asdf::system-fasl load #Y(nil nil nil (24 45 3 24 45 4 26 13 0 19 1 5 12 19 1 6 29) #406# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #407=#A(t (10) (asdf::input-files (asdf::load-fasl-op asdf::precompiled-system) (asdf::o asdf::s) asdf::o asdf::s asdf::load-op make-instance #Y(nil nil nil (24 45 3 24 45 4 26 15 5 19 1 6 12 13 0 19 2 0 29) #407# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #408=#A(t (10) (asdf::perform (asdf::load-fasl-op asdf::precompiled-system) (asdf::o asdf::s) asdf::o asdf::s asdf::load-op make-instance #Y(nil nil nil (24 45 3 24 45 4 26 15 5 19 1 6 12 13 0 19 2 0 29) #408# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 16 12 14 17 19 6 18 29) #409=#A(t (19) (asdf::output-files (asdf::fasl-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c call-next-method #:loop-list21158 asdf::file #:loop-list-head21159 #:loop-list-tail21160 0 :type "fasb" :defaults make-pathname rplacd #Y(nil nil nil (24 45 3 24 45 4 26 58 60 78 77 19 0 5 12 46 6 46 7 75 6 1 45 8 10 0 45 9 57 10 61 2 2 41 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 14 11 15 12 14 13 13 3 19 4 14 6 1 51 1 17 15 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 29) #409# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 29 12 14 30 19 6 31 29) #410=#A(t (32) (asdf::perform (asdf::bundle-op asdf::system) (asdf::o asdf::c) asdf::o asdf::c "fas" asdf::input-files :key pathname-type :test string= remove asdf::object-files asdf::output-files asdf::output ensure-directories-exist c::builder asdf::bundle-op-type :lisp-files asdf::bundle-op-lisp-files append asdf::bundle-op-build-args asdf::monolithic-bundle-op typep asdf::monolithic-op-prologue-code :prologue-code asdf::monolithic-op-epilogue-code :epilogue-code apply #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 1 13 0 19 2 6 12 14 7 33 8 12 14 9 33 10 12 19 6 11 45 12 13 2 13 1 19 2 13 45 14 10 0 4 12 19 1 15 33 16 12 13 3 19 1 17 12 10 0 4 12 14 18 13 1 13 3 19 1 19 12 19 2 20 12 13 3 19 1 21 12 13 3 15 22 19 2 23 39 6 13 3 19 1 24 73 39 11 14 25 13 3 19 1 24 6 2 73 12 13 3 15 22 19 2 23 39 6 13 3 19 1 26 73 39 11 14 27 13 3 19 1 26 6 2 73 12 19 3 20 12 19 6 28 43 2 29) #410# #1# 0) t clos::install-method)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ((asdf::load-fasl-op asdf::precompiled-system asdf::make-build) export)) #1# 0) #Y(si::bytecodes nil nil (15 0 14 1 14 2 15 3 14 4 15 5 19 6 6 52 1 73 29) #A(t (7) (("fasb" . si::load-binary) ext::*load-hooks* :test equal :key car adjoin)) #1# 0))
