(#Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 77 77 77 77 19 10 2 29) #A(t (3) (#1="ECL-QUICKLISP" ("CL") si::dodefpackage)) #2=#P"/Users/strobolights/dev/mecl/ecl-build-for-ios64/compile.lsp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#1# si::select-package)) #2# 0) #Y(si::bytecodes nil nil (14 0 19 1 1 29) #A(t (2) (:ecl-curl require)) #2# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (ecl-quicklisp::*quicklisp-url* si::*make-special "http://beta.quicklisp.org/quicklisp.lisp")) #2# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 19 1 3 52 0 1 0 73 29) #A(t (4) (ecl-quicklisp::*quicklisp-directory* si::*make-special "HOME:QUICKLISP;" translate-logical-pathname)) #2# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (ecl-quicklisp::*quicklisp-setup* si::*make-special "HOME:QUICKLISP;SETUP.LISP")) #2# 0) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 1 0 73 29) #3=#A(t (19) (ecl-quicklisp::safe-download ecl-quicklisp::url ecl-quicklisp::filename ensure-directories-exist #:g22207 #:g22208 0 ecl-curl::download-error si::temp #Y(nil nil nil (24 45 8 26 10 0 51 2 35 1 0 29) #3# #2# 0) si::*handler-clusters* ecl-curl::download-url-to-file ecl-quicklisp::c t "~&;;;~%;;; Unable to download quicklisp. Aborting. ~%;;;" format ext::quit #Y(ecl-quicklisp::safe-download nil nil (24 45 1 24 45 2 26 13 0 19 1 3 57 4 60 57 75 45 5 57 6 61 1 25 15 7 34 9 3 6 1 12 11 10 3 48 10 13 4 13 3 19 2 11 36 2 44 1 10 1 45 12 14 13 15 14 19 2 15 9 1 19 1 16 43 1 36 2 62 43 1 63 10 0 73 29) #3# #2# 0) si::fset)) #2# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #4=#A(t (17) (ecl-quicklisp::install-quicklisp ecl-quicklisp::target-directory "_installer.lisp" merge-pathnames ecl-quicklisp::file ensure-directories-exist ecl-quicklisp::*quicklisp-url* ecl-curl::download-url-to-file load "(quicklisp-quickstart:install :path ~S)" truename namestring format read-from-string eval #Y(ecl-quicklisp::install-quicklisp nil nil (24 45 1 26 15 2 13 0 19 2 3 45 4 13 0 19 1 5 14 6 13 0 19 2 7 13 0 19 1 8 77 15 9 10 1 16 10 16 11 12 19 3 12 12 19 1 13 16 14 43 1 29) #4# #2# 0) si::fset)) #2# 0) #Y(si::bytecodes nil nil (57 0 60 79 75 45 1 57 2 61 1 49 15 3 34 5 3 6 1 12 11 6 3 48 6 11 7 16 8 76 39 6 14 9 19 1 10 1 11 16 12 76 39 6 14 7 19 1 13 15 14 19 1 15 16 16 36 2 44 1 10 1 45 17 14 18 15 19 13 0 19 3 20 43 1 36 2 62 73 43 1 63 29) #5=#A(t (21) (#:g22210 #:g22211 0 error si::temp #Y(nil nil nil (24 45 4 26 10 0 51 2 35 1 0 29) #5# #2# 0) si::*handler-clusters* ecl-quicklisp::*quicklisp-setup* probe-file ecl-quicklisp::*quicklisp-directory* ecl-quicklisp::install-quicklisp "QL" find-package load "
       (pushnew #'(ext:lambda-block quicklisp-require (module)
				    (let* ((module (string-downcase module)))
				      (when (find module (ql:provided-systems t)
						  :test #'string-equal
						  :key #'ql-dist:name)
					(and (ql:quickload module)
                                             (provide module)))))
		sys::*module-provider-functions*)
" read-from-string eval ecl-quicklisp::c t "~%;;; Unable to load / install quicklisp. Error message follows:~%~A" format)) #2# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ("ecl-quicklisp" provide)) #2# 0))
