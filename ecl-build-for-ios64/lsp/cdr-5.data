static const char compiler_data_text[] = 
"ext::ratiop 0 ext::short-floatp ext::single-floatp ext::double-floatp ext::long-"
 "floatp (deftype ext::negative-fixnum nil `(integer ,most-negative-fixnum -1)) (d"
 "eftype ext::non-positive-fixnum nil `(integer ,most-negative-fixnum 0)) (deftype"
 " ext::non-negative-fixnum nil `(integer 0 ,most-positive-fixnum)) (deftype ext::"
 "positive-fixnum nil `(integer 1 ,most-positive-fixnum)) (deftype ext::negative-i"
 "nteger nil '#1=(integer * -1)) #1# (deftype ext::non-positive-integer nil '#2=(i"
 "nteger * 0)) #2# (deftype ext::non-negative-integer nil '#3=(integer 0 *)) #3# ("
 "deftype ext::positive-integer nil '#4=(integer 1 *)) #4# (deftype ext::negative-"
 "rational nil '#5=(rational * (0))) #5# (deftype ext::non-positive-rational nil '"
 "#6=(rational * 0)) #6# (deftype ext::non-negative-rational nil '#7=(rational 0 *"
 ")) #7# (deftype ext::positive-rational nil '#8=(rational (0) *)) #8# (deftype ex"
 "t::negative-ratio nil '#9=(satisfies ext::negative-ratio-p)) #9# (deftype ext::n"
 "on-positive-ratio nil 'ext::negative-ratio) (deftype ext::non-negative-ratio nil"
 " 'ext::positive-ratio) (deftype ext::positive-ratio nil '#10=(satisfies ext::pos"
 "itive-ratio-p)) #10# (deftype ext::negative-real nil '#11=(real * (0))) #11# (de"
 "ftype ext::non-positive-real nil '#12=(real * 0)) #12# (deftype ext::non-negativ"
 "e-real nil '#13=(real 0 *)) #13# (deftype ext::positive-real nil '#14=(real (0) "
 "*)) #14# (deftype ext::negative-float nil '#15=(float * (0))) #15# (deftype ext:"
 ":non-positive-float nil '#16=(float * 0)) #16# (deftype ext::non-negative-float "
 "nil '#17=(float 0 *)) #17# (deftype ext::positive-float nil '#18=(float (0) *)) "
 "#18# (deftype ext::negative-short-float nil '#19=(short-float * (#20=0.0))) #19#"
 " (deftype ext::non-positive-short-float nil '#21=(short-float * #20#)) #21# (def"
 "type ext::non-negative-short-float nil '#22=(short-float #20# *)) #22# (deftype "
 "ext::positive-short-float nil '#23=(short-float (#20#) *)) #23# (deftype ext::ne"
 "gative-single-float nil '#24=(single-float * (#20#))) #24# (deftype ext::non-pos"
 "itive-single-float nil '#25=(single-float * #20#)) #25# (deftype ext::non-negati"
 "ve-single-float nil '#26=(single-float #20# *)) #26# (deftype ext::positive-sing"
 "le-float nil '#27=(single-float (#20#) *)) #27# (deftype ext::negative-double-fl"
 "oat nil '#28=(double-float * (#29=0.0d0))) #28# (deftype ext::non-positive-doubl"
 "e-float nil '#30=(double-float * #29#)) #30# (deftype ext::non-negative-double-f"
 "loat nil '#31=(double-float #29# *)) #31# (deftype ext::positive-double-float ni"
 "l '#32=(double-float (#29#) *)) #32# (deftype ext::negative-long-float nil '#33="
 "(long-float * (#34=0.0l0))) #33# (deftype ext::non-positive-long-float nil '#35="
 "(long-float * #34#)) #35# (deftype ext::non-negative-long-float nil '#36=(long-f"
 "loat #34# *)) #36# (deftype ext::positive-long-float nil '#37=(long-float (#34#)"
 " *)) #37# ";
#define compiler_data_text_size 2810
