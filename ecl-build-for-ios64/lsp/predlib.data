static const char compiler_data_text[] = 
"ext::constantly-t ext::constantly-nil 0 0 si::*subtypep-cache* si::*upgraded-arr"
 "ay-element-type-cache* si::subtypep-clear-cache si::create-type-name si::deftype"
 "-form si::deftype-definition (&optional &key) (&optional &rest &key &allow-other"
 "-keys &aux &whole &environment &body) #1='* (:compile-toplevel :load-toplevel :e"
 "xecute) deftype si::index #2=(or rational float) #3=(integer * *) #4=(integer 0 "
 "*) si::proper-list #5=(or (array base-char (*)) (array character (*))) #6=(array"
 " base-char (*)) #7=(array character (*)) #8=(array bit (*)) #9=(simple-array t ("
 "*)) #10=(or (simple-array base-char (*)) (simple-array character (*))) #11=(simp"
 "le-array base-char (*)) #12=(simple-array bit (*)) si::simple-array-p si::comple"
 "x-array-p si::+known-typep-predicates+ si::type-predicate si::+upgraded-array-el"
 "ement-types+ (integer 0 127) #13=(nil base-char character bit ext::byte8 ext::in"
 "teger8 ext::byte16 ext::integer16 ext::byte32 ext::integer32 ext::byte64 ext::in"
 "teger64 single-float double-float t) 0 0 0 0 0 0 si::normalize-type si::expand-d"
 "eftype si::error-coerce c::type-specifier 0 0 (vector simple-vector simple-base-"
 "string simple-string base-string string bit-vector simple-bit-vector) (single-fl"
 "oat short-float double-float long-float float) si::*save-types-database* si::*hi"
 "ghest-type-tag* si::*member-types* si::*intervals-mask* si::*elementary-types* s"
 "i::update-types si::register-member-type si::number-member-type si::+canonical-t"
 "ype-failure+ (* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * "
 "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *) si::array-type-<="
 " (ext::complex-array . #14=(simple-array)) #14# si::array-type-p si::bounds-<= s"
 "i::bounds-< (complex real) si::register-cons-type si::+built-in-types+ 0 0 0 0 0"
 " 0 0 si::function-type-p si::values-type-p si::canonical-type si::safe-canonical"
 "-type si::type= 0 0 0 0 0 0 0 0 clos::classp 0 0 0 0 0 0 0 0 0 0 0 si::register-"
 "function-type si::register-values-type 0 0 (deftype boolean nil '#15=(member nil"
 " t)) #15# (deftype si::index nil '#16=(integer 0 536870911)) #16# (deftype fixnu"
 "m nil '#17=(integer -536870912 536870911)) #17# (deftype bignum nil '#18=(or (in"
 "teger * (-536870912)) (integer (536870911) *))) #18# (deftype ext::byte8 nil '#1"
 "9=(integer 0 255)) #19# (deftype ext::integer8 nil '#20=(integer -128 127)) #20#"
 " (deftype ext::byte16 nil '#21=(integer 0 65535)) #21# (deftype ext::integer16 n"
 "il '#22=(integer -32768 32767)) #22# (deftype ext::byte32 nil '#23=(integer 0 42"
 "94967295)) #23# (deftype ext::integer32 nil '#24=(integer -2147483648 2147483647"
 ")) #24# (deftype ext::byte64 nil '#25=(integer 0 18446744073709551615)) #25# (de"
 "ftype ext::integer64 nil '#26=(integer -9223372036854775808 9223372036854775807)"
 ") #26# (deftype ext::cl-fixnum nil '#27=(signed-byte 32)) #27# (deftype ext::cl-"
 "index nil '#28=(unsigned-byte 32)) #28# (deftype real (&optional (si::start '* s"
 "i::start-p) (si::end '*)) (if si::start-p (let (si::rat-start si::real-start si:"
 ":rat-end si::real-end) (cond ((consp si::start) (setf si::start (first si::start"
 ") si::rat-start (list (rational si::start)) si::real-start (list (float si::star"
 "t)))) ((numberp si::start) (setf si::rat-start (rational si::start) si::real-sta"
 "rt (float si::start))) (t (setf si::rat-start si::start si::real-start si::start"
 "))) (cond ((consp si::end) (setf si::end (first si::end) si::rat-end (list (rati"
 "onal si::end)) si::real-end (list (float si::end)))) ((numberp si::end) (setf si"
 "::rat-end (rational si::end) si::real-end (float si::end))) (t (setf si::rat-end"
 " si::end si::real-end si::end))) `(or (rational ,si::rat-start ,si::rat-end) (fl"
 "oat ,si::real-start ,si::real-end))) '#2#)) (deftype short-float (&rest si::args"
 ") (if si::args `(single-float ,@si::args) 'single-float)) (deftype long-float (&"
 "rest si::args) (if si::args `(double-float ,@si::args) 'double-float)) (deftype "
 "bit nil '#29=(integer 0 1)) #29# (deftype mod (si::n) `(integer 0 ,(1- si::n))) "
 "(deftype signed-byte (&optional (si::s #1#)) (if (or (null si::s) (eq si::s '*))"
 " '#3# `(integer ,(- (expt 2 (1- si::s))) ,(1- (expt 2 (1- si::s)))))) (deftype u"
 "nsigned-byte (&optional (si::s #1#)) (if (or (null si::s) (eq si::s '*)) '#4# `("
 "integer 0 ,(1- (expt 2 si::s))))) (deftype null nil '#30=(member nil)) #30# (def"
 "type sequence nil '#31=(or cons null (array * (*)))) #31# (deftype list nil '#32"
 "=(or cons null)) #32# (deftype si::proper-list nil '#33=(or (cons t si::proper-l"
 "ist) null)) #33# (deftype si::property-list nil '#34=(or (cons t (cons t si::pro"
 "perty-list)) null)) #34# (deftype atom nil '#35=(not cons)) #35# (deftype vector"
 " (&optional (si::element-type '*) (si::size '*)) `(array ,si::element-type (,si:"
 ":size))) (deftype extended-char nil '#36=(and character (not base-char))) #36# ("
 "deftype string (&optional (si::size #1#)) (if (eq si::size '*) '#5# `(or (array "
 "base-char (,si::size)) (array character (,si::size))))) (deftype base-string (&o"
 "ptional (si::size '*)) (if (eq si::size '*) '#6# `(array base-char (,si::size)))"
 ") (deftype ext::extended-string (&optional (si::size '*)) (if (eq si::size '*) '"
 "#7# `(array character (,si::size)))) (deftype bit-vector (&optional (si::size '*"
 ")) (if (eq si::size '*) '#8# `(array bit (,si::size)))) (deftype simple-vector ("
 "&optional (si::size '*)) (if (eq si::size '*) '#9# `(simple-array t (,si::size))"
 ")) (deftype simple-string (&optional (si::size #1#)) (if si::size `(or (simple-a"
 "rray base-char (,si::size)) (simple-array character (,si::size))) '#10#)) (defty"
 "pe simple-base-string (&optional (si::size #1#)) (if si::size `(simple-array bas"
 "e-char (,si::size)) '#11#)) (deftype simple-bit-vector (&optional (si::size #1#)"
 ") (if si::size `(simple-array bit (,si::size)) '#12#)) (deftype ext::array-index"
 " nil '#37=(integer 0 536870910)) #37# ((array . arrayp) (atom . atom) (base-char"
 " . si::base-char-p) (base-string . si::base-string-p) (bit-vector . bit-vector-p"
 ") (character . characterp) (compiled-function . compiled-function-p) (complex . "
 "complexp) (ext::complex-array . si::complex-array-p) (cons . consp) (float . flo"
 "atp) (si::foreign-data . si::foreign-data-p) (function . functionp) (hash-table "
 ". hash-table-p) (integer . integerp) (fixnum . ext::fixnump) (keyword . keywordp"
 ") (list . listp) (logical-pathname . si::logical-pathname-p) (nil . ext::constan"
 "tly-nil) (null . null) (number . numberp) (package . packagep) (random-state . r"
 "andom-state-p) (rational . rationalp) (pathname . pathnamep) (readtable . readta"
 "blep) (real . realp) (simple-array . si::simple-array-p) (simple-string . simple"
 "-string-p) (simple-vector . simple-vector-p) (stream . streamp) (string . string"
 "p) (structure . si::structurep) (symbol . symbolp) (t . ext::constantly-t) (vect"
 "or . vectorp)) #13# ((symbol) (keyword nil symbol) (package) (compiled-function)"
 " #'(or compiled-function generic-function) (integer (integer * *)) (single-float"
 " (single-float * *)) (double-float (double-float * *)) (ratio (ratio * *)) (rati"
 "onal (or integer ratio)) (float (or single-float double-float)) (real (or intege"
 "r single-float double-float ratio)) (complex (complex real)) (number (or real co"
 "mplex)) (character) (base-char nil character) (standard-char nil base-char) (con"
 "s) (null (member nil)) (list (or cons (member nil))) (array (array * *)) (simple"
 "-array (simple-array * *)) (simple-vector (simple-array t (*))) (simple-bit-vect"
 "or (simple-array bit (*))) (vector (array * (*))) (string (array character (*)))"
 " (base-string (array base-char (*))) (simple-string (simple-array character (*))"
 ") (simple-base-string (simple-array base-char (*))) (bit-vector (array bit (*)))"
 " (sequence (or cons (member nil) (array * (*)))) (hash-table) (pathname) (logica"
 "l-pathname nil pathname) (broadcast-stream) (concatenated-stream) (echo-stream) "
 "(file-stream) (string-stream) (synonym-stream) (two-way-stream) (ext::sequence-s"
 "tream) (ext::ansi-stream (or broadcast-stream concatenated-stream echo-stream fi"
 "le-stream string-stream synonym-stream two-way-stream ext::sequence-stream gray:"
 ":fundamental-stream)) (stream ext::ansi-stream) (readtable) (mp::process) (mp::l"
 "ock) (mp::rwlock) (mp::condition-variable) (mp::semaphore) (mp::barrier) (mp::ma"
 "ilbox) (si::foreign-data) (si::code-block)) ";
#define compiler_data_text_size 8124
