static const char compiler_data_text[] = 
"(declare (ext::assume-right-type)) si::loop-unsafe si::loop-copylist* si::*loop-"
 "real-data-type* (list nil) si::with-loop-list-collection-head 0 0 0 'nil 0 si::l"
 "oop-collect-rplacd si::loop-collect-answer si::loop-minimax si::copy-loop-minima"
 "x (6) si::make-loop-minimax-internal si::*loop-minimax-type-infinities-alist* :a"
 "nswer-variable :temp-variable :flag-variable :operations :infinity-data si::with"
 "-minimax-value (min max) si::loop-accumulate-minimax-value si::loop-store-table-"
 "data si::loop-universe si::copy-loop-universe (8) si::make-loop-universe si::*lo"
 "op-universe* 0 0 :extended 0 (member nil t :extended) si::ansi :keywords :for-ke"
 "ywords :iteration-keywords :path-keywords :ansi :implicit-for-required :type-key"
 "words :type-symbols si::*loop-destructuring-hooks* si::loop-really-desetq si::*l"
 "oop-desetq-temporary* si::loop-really-desetq si::*loop-source-code* si::*loop-or"
 "iginal-source-code* si::*loop-source-context* si::*loop-names* si::*loop-macro-e"
 "nvironment* si::*loop-named-variables* si::*loop-variables* si::*loop-declaratio"
 "ns* si::*loop-desetq-crocks* si::*loop-wrappers* si::*loop-bind-stack* si::*loop"
 "-nodeclare* si::*loop-iteration-variables* si::*loop-prologue* si::*loop-before-"
 "loop* si::*loop-body* si::*loop-after-body* si::*loop-emitted-body* si::*loop-ep"
 "ilogue* si::*loop-after-epilogue* si::*loop-final-value-culprit* si::*loop-insid"
 "e-conditional* si::*loop-when-it-variable* si::*loop-never-stepped-variable* si:"
 ":*loop-collection-cruft* si::loop-constantp si::*loop-duplicate-code* si::*loop-"
 "iteration-flag-variable* 0 0 0 si::next-loop ((go si::next-loop)) si::end-loop s"
 "i::loop-body si::*special-code-sizes* si::*estimate-code-size-punt* si::estimate"
 "-code-size si::desetq 0 0 si::duplicatable-code-p si::simple-style-warning (go s"
 "i::end-loop) loop-finish si::*ignores* si::subst-gensyms-for-nil si::loop-build-"
 "destructuring-bindings (and si::else) si::loop-collector-name si::loop-disallow-"
 "anonymous-collectors (si::always si::never si::thereis) si::loop-disallow-aggreg"
 "ate-booleans (or float (complex float)) si::of-type si::loop-variable-p si::it :"
 "and :else si::loop-do-if :initially si::loop-do-initially :finally si::loop-do-f"
 "inally si::loop-do-do si::loop-do-named si::loop-do-return si::loop-collector si"
 "::copy-loop-collector si::make-loop-collector si::into :class :history :dtype (l"
 "ist nconc append) si::loop-list-collection si::sum si::loop-sum-collection si::m"
 "axmin si::loop-maxmin-collection si::loop-do-always si::loop-do-thereis si::loop"
 "-do-while :with := si::loop-do-with si::loop-do-for :repeat si::loop-do-repeat :"
 "then (nil nil) si::loop-ansi-for-equals si::loop-for-across :by #'si::cons-cdr s"
 "i::loop-for-on si::loop-for-in si::loop-path si::copy-loop-path (5) si::make-loo"
 "p-path :names :user-data :preposition-groups :inclusive-permitted (:each :the) ("
 ":its :each :his :her) :in :inclusive 0 0 si::loop-for-being si::using :of 0 0 :f"
 "rom 0 :downfrom 0 :upfrom 0 :down (:upto :to :downto :above :below) :upto :to :d"
 "ownto :above :below 0 0 ((:from :upfrom :downfrom) (:to :upto :downto :above :be"
 "low) (:by)) si::loop-for-arithmetic si::hash-key 0 si::hash-value 0 (member si::"
 "hash-key si::hash-value) si::which 0 0 si::loop-hash-table-iteration-path si::lo"
 "op-package-symbols-iteration-path (si::named (si::loop-do-named)) (si::initially"
 " (si::loop-do-initially)) (si::finally (si::loop-do-finally)) (do (si::loop-do-d"
 "o)) (si::doing (si::loop-do-do)) (return (si::loop-do-return)) (si::collect (si:"
 ":loop-list-collection list)) (si::collecting (si::loop-list-collection list)) (a"
 "ppend (si::loop-list-collection append)) (si::appending (si::loop-list-collectio"
 "n append)) (nconc (si::loop-list-collection nconc)) (si::nconcing (si::loop-list"
 "-collection nconc)) si::counting ((si::sum (si::loop-sum-collection si::sum numb"
 "er number)) (si::summing (si::loop-sum-collection si::sum number number)) (si::m"
 "aximize (si::loop-maxmin-collection max)) (si::minimize (si::loop-maxmin-collect"
 "ion min)) (si::maximizing (si::loop-maxmin-collection max)) (si::minimizing (si:"
 ":loop-maxmin-collection min)) (si::always (si::loop-do-always t nil)) (si::never"
 " (si::loop-do-always t t)) (si::thereis (si::loop-do-thereis t)) (si::while (si:"
 ":loop-do-while nil :while)) (si::until (si::loop-do-while t :until)) (when (si::"
 "loop-do-if when nil)) (if (si::loop-do-if if nil)) (unless (si::loop-do-if unles"
 "s t)) (si::with (si::loop-do-with)) (si::repeat (si::loop-do-repeat))) ((= (si::"
 "loop-ansi-for-equals)) (si::across (si::loop-for-across)) (si::in (si::loop-for-"
 "in)) (si::on (si::loop-for-on)) (si::from (si::loop-for-arithmetic :from)) (si::"
 "downfrom (si::loop-for-arithmetic :downfrom)) (si::upfrom (si::loop-for-arithmet"
 "ic :upfrom)) (si::below (si::loop-for-arithmetic :below)) (si::above (si::loop-f"
 "or-arithmetic :above)) (si::to (si::loop-for-arithmetic :to)) (si::upto (si::loo"
 "p-for-arithmetic :upto)) (si::downto (si::loop-for-arithmetic :downto)) (si::by "
 "(si::loop-for-arithmetic :by)) (si::being (si::loop-for-being))) ((si::for (si::"
 "loop-do-for)) (si::as (si::loop-do-for))) (array atom bignum bit bit-vector char"
 "acter compiled-function complex cons double-float fixnum float function hash-tab"
 "le integer keyword list long-float nil null number package pathname random-state"
 " ratio rational readtable sequence short-float simple-array simple-bit-vector si"
 "mple-string simple-vector single-float standard-char stream string base-char sym"
 "bol t vector) (si::hash-key si::hash-keys) ((:of :in)) (:which si::hash-key) (si"
 "::hash-value si::hash-values) (:which si::hash-value) (symbol si::symbols) (:sym"
 "bol-types (:internal :external :inherited)) (si::external-symbol si::external-sy"
 "mbols) (:symbol-types (:external)) (si::present-symbol si::present-symbols) (:sy"
 "mbol-types (:internal :external)) si::*loop-ansi-universe* loop 0 0 0 0 0 0 :ans"
 "wer-variable :type :temp-variable :flag-variable :operations :infinity-data si::"
 "loop-minimax-operations si::loop-minimax-flag-variable 0 si::loop-minimax-type s"
 "i::loop-minimax-infinity-data si::loop-minimax-answer-variable si::loop-minimax-"
 "temp-variable 0 0 0 :keywords :iteration-keywords :for-keywords :path-keywords :"
 "type-symbols :type-keywords :ansi :implicit-for-required :keywords :for-keywords"
 " :iteration-keywords :path-keywords :type-keywords :type-symbols :ansi 0 0 0 0 0"
 " 0 si::loop-universe-keywords si::loop-universe-iteration-keywords 0 0 si::loop-"
 "universe-type-symbols si::loop-universe-type-keywords 0 0 0 0 0 0 0 0 :name :cla"
 "ss :history :tempvars :dtype :data si::loop-universe-ansi si::loop-collector-cla"
 "ss si::loop-collector-history si::loop-collector-dtype 0 si::loop-collector-temp"
 "vars 0 0 si::loop-collector-data 0 0 0 0 si::loop-universe-implicit-for-required"
 " 0 si::loop-universe-for-keywords 0 0 0 0 0 0 :names :preposition-groups :inclus"
 "ive-permitted :function :user-data :preposition-groups :inclusive-permitted :use"
 "r-data si::loop-universe-path-keywords 0 si::loop-path-inclusive-permitted si::l"
 "oop-path-function si::loop-path-preposition-groups si::loop-path-user-data 0 0 :"
 "which 0 :symbol-types 0 (si::answer-variable type si::temp-variable si::flag-var"
 "iable si::operations si::infinity-data) ((si::answer-variable nil t nil 0 nil) ("
 "type nil t nil 1 nil) (si::temp-variable nil t nil 2 nil) (si::flag-variable nil"
 " t nil 3 nil) (si::operations nil t nil 4 nil) (si::infinity-data nil t nil 5 ni"
 "l)) (si::make-loop-minimax-internal) ((fixnum most-positive-fixnum most-negative"
 "-fixnum)) (si::keywords si::iteration-keywords si::for-keywords si::path-keyword"
 "s si::type-symbols si::type-keywords si::ansi si::implicit-for-required) ((si::k"
 "eywords nil t nil 0 nil) (si::iteration-keywords nil t nil 1 nil) (si::for-keywo"
 "rds nil t nil 2 nil) (si::path-keywords nil t nil 3 nil) (si::type-symbols nil t"
 " nil 4 nil) (si::type-keywords nil t nil 5 nil) (si::ansi nil t nil 6 nil) (si::"
 "implicit-for-required nil t nil 7 nil)) (si::make-loop-universe) ((return 0) (pr"
 "ogn 0) (null 1) (not 1) (eq 1) (car 1) (cdr 1) (when 1) (unless 1) (if 1) (caar "
 "2) (cadr 2) (cdar 2) (cddr 2) (caaar 3) (caadr 3) (cadar 3) (caddr 3) (cdaar 3) "
 "(cdadr 3) (cddar 3) (cdddr 3) (caaaar 4) (caaadr 4) (caadar 4) (caaddr 4) (cadaa"
 "r 4) (cadadr 4) (caddar 4) (cadddr 4) (cdaaar 4) (cdaadr 4) (cdadar 4) (cdaddr 4"
 ") (cddaar 4) (cddadr 4) (cdddar 4) (cddddr 4)) (block do do* dolist flet labels "
 "lambda let let* locally macrolet multiple-value-bind prog prog* symbol-macrolet "
 "tagbody unwind-protect with-open-file) (si::name class (si::history nil) (si::te"
 "mpvars nil) si::dtype (si::data nil)) ((si::name nil t nil 0 nil) (class nil t n"
 "il 1 nil) (si::history nil t nil 2 nil) (si::tempvars nil t nil 3 nil) (si::dtyp"
 "e nil t nil 4 nil) (si::data nil t nil 5 nil)) (si::make-loop-collector) (si::na"
 "mes si::preposition-groups si::inclusive-permitted function si::user-data) ((si:"
 ":names nil t nil 0 nil) (si::preposition-groups nil t nil 1 nil) (si::inclusive-"
 "permitted nil t nil 2 nil) (function nil t nil 3 nil) (si::user-data nil t nil 4"
 " nil)) (si::make-loop-path) ";
#define compiler_data_text_size 8908
