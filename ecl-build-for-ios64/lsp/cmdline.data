static const char compiler_data_text[] = 
"si::*command-break-enable* ext::command-args :noloadrc :loadrc :stop ((si::outpu"
 "t-file t) (si::c-file nil) (si::h-file nil) (si::data-file nil) (si::verbose t) "
 "(si::system-p nil) (ext::quit nil) (si::*command-break-enable* nil)) ((when ext:"
 ":quit (ext::quit 0))) si::produce-init-code :report-function ext::process-comman"
 "d-args 0 0 0 :args :rules si::make-restart (\"~/.ecl\" \"~/.eclrc\") ((\"--help\" 0 #1"
 "=(progn (princ ext::*help-message* *standard-output*) (ext::quit)) :noloadrc) (\""
 "-?\" 0 #1# :noloadrc) (\"-h\" 0 #1# :noloadrc) (\"-norc\" 0 nil :noloadrc) (\"--versio"
 "n\" 0 (progn (setf ext::quit 0) (format *standard-output* \"ECL ~A~%\" (lisp-implem"
 "entation-version))) :noloadrc) (\"-debug\" 0 (setf si::*command-break-enable* t)) "
 "(\"-nodebug\" 0 (setf si::*command-break-enable* nil)) (\"-eval\" 1 (eval (read-from"
 "-string 1))) (\"-shell\" 1 (progn (setq ext::quit 0) (setq ext::*unprocessed-ecl-c"
 "ommand-args* (rest 1)) (load (first (rest 1)) :verbose nil)) :stop) (\"-load\" 1 ("
 "load 1 :verbose si::verbose)) (\"-dir\" 1 (setf (logical-pathname-translations \"SY"
 "S\") `((\"**;*.*\" ,(merge-pathnames \"**/*.*\" (truename 1)))))) (\"--heap-size\" 1 (e"
 "xt::set-limit 'ext::heap-size (read-from-string 1))) (\"--lisp-stack\" 1 (ext::set"
 "-limit 'ext::lisp-stack (read-from-string 1))) (\"--frame-stack\" 1 (ext::set-limi"
 "t 'ext::frame-stack (read-from-string 1))) (\"--c-stack\" 1 (ext::set-limit 'ext::"
 "c-stack (read-from-string 1))) (\"--trap-fpe\" 0 (si::trap-fpe t t)) (\"--no-trap-f"
 "pe\" 0 (si::trap-fpe t nil)) (\"--encoding\" 1 (dolist (si::i (list *standard-input"
 "* *standard-output* *error-output* *trace-output*)) (setf (stream-external-forma"
 "t si::i) (read-from-string 1)))) (\"--input-encoding\" 1 (setf (stream-external-fo"
 "rmat *standard-input*) (read-from-string 1))) (\"--output-encoding\" 1 (setf (stre"
 "am-external-format *standard-output*) (read-from-string 1))) (\"--error-encoding\""
 " 1 (setf (stream-external-format *error-output*) (read-from-string 1))) (\"-compi"
 "le\" 1 (progn (setq ext::quit (if (nth-value 3 (compile-file 1 :output-file si::o"
 "utput-file :c-file si::c-file :h-file si::h-file :data-file si::data-file :verbo"
 "se si::verbose :system-p si::system-p)) 1 0) si::output-file t si::c-file nil si"
 "::h-file nil si::data-file nil si::system-p nil))) (\"-link\" &rest (progn (requir"
 "e 'si::cmp) (funcall (read-from-string \"c::build-program\") (or si::output-file \""
 "lisp.exe\") :lisp-files '&rest) (setq si::output-file t ext::quit t))) (\"-o\" 1 (s"
 "etq si::output-file 1)) (\"-c\" 1 (setq si::c-file 1)) (\"-h\" 1 (setq si::h-file 1)"
 ") (\"-data\" 1 (setq si::data-file 1)) (\"-q\" 0 (setq si::verbose nil)) (\"-hp\" 0 (s"
 "etf si::*relative-package-names* t)) (\"-nohp\" 0 (setf si::*relative-package-name"
 "s* nil)) (\"-s\" 0 (setq si::system-p t)) (\"--\" 1 (setf ext::*unprocessed-ecl-comm"
 "and-args* (rest 1)) :stop)) ";
#define compiler_data_text_size 2748
