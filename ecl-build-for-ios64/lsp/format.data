static const char compiler_data_text[] = 
":formatter si::*digits* si::flonum-to-string si::scale-exponent si::format-direc"
 "tive si::copy-format-directive si::format-directive-p (8) si::make-format-direct"
 "ive si::*format-directive-expanders* si::*format-directive-interpreters* si::*de"
 "fault-format-error-control-string* si::*default-format-error-offset* si::*output"
 "-layout-mode* :complaint 0 0 :arg :remaining :string :character :colonp :atsignp"
 " :params si::*up-up-and-out-allowed* si::*logical-block-popper* si::*expander-ne"
 "xt-arg-macro* si::expander-next-arg si::*only-simple-args* si::*orig-args-availa"
 "ble* si::*simple-args* si::up-and-out (simple-string string) si::formatter-aux ("
 "simple-string vector) formatter si::need-orig-args 'si::format-error (&rest si::"
 "args) si::args (stream &rest si::orig-args) ((si::args si::orig-args)) (simple-s"
 "tring si::format-directive) (pop si::args) si::expander-next-arg (null si::args)"
 " ((pprint-pop) (pop si::args)) si::expander-pprint-next-arg si::%set-format-dire"
 "ctive-expander si::format-princ #:g280 #:g281 #:g282 #:g283 (length si::args) 0 "
 ":arguments si::format-prin1 #:g352 #:g353 #:g354 #:g355 si::arg (if si::arg (pri"
 "n1 si::arg stream) (princ \"()\" stream)) si::format-print-named-character si::for"
 "mat-print-named-character ((*print-pretty* t)) ((*print-level* nil) (*print-leng"
 "th* nil)) si::format-print-integer #:g468 #:g469 #:g470 #:g471 (:radix nil :esca"
 "pe nil) si::expand-format-integer #:g670 #:g671 #:g672 #:g673 #:g674 si::format-"
 "print-old-roman si::format-print-roman si::format-print-ordinal si::format-print"
 "-cardinal si::cardinal-ones si::cardinal-tens si::cardinal-teens si::cardinal-pe"
 "riods si::ordinal-ones si::ordinal-tens si::format-print-cardinal si::format-pri"
 "nt-ordinal (#\\D #\\C #\\L #\\X #\\V #\\I) (500 100 50 10 5 1) si::format-print-old-ro"
 "man (#\\C #\\X #\\X #\\I #\\I) (100 10 10 1 1 0) si::format-print-roman (eq si::orig-"
 "args si::args) (do ((si::arg-ptr si::orig-args (cdr si::arg-ptr))) ((eq (cdr si:"
 ":arg-ptr) si::args) (car si::arg-ptr))) (\"y\" \"ies\") (write-char #\\s stream) #:g8"
 "00 #:g801 #:g802 #:g803 #:g804 si::format-fixed si::format-fixed #:g899 #:g900 #"
 ":g901 #:g902 #:g903 #:g904 #:g905 si::format-exponential si::format-exponential "
 "#:g1031 #:g1032 #:g1033 #:g1034 #:g1035 #:g1036 #:g1037 si::format-general si::f"
 "ormat-general #:g1143 #:g1144 #:g1145 #:g1146 si::format-dollars si::format-doll"
 "ars #:g1221 si::i (terpri stream) #:g1252 (fresh-line stream) #:g1283 (write-cha"
 "r #\\Page stream) #:g1314 (write-char #\\~ stream) (write-char #\\Newline stream) ("
 "#\\  #\\Newline #\\Tab) #:g1369 #:g1370 :section-relative :section #:g1384 #:g1385 "
 "si::format-relative-tab #:g1399 #:g1400 si::format-absolute-tab \"               "
 "                                                                                "
 "     \" :line-relative si::format-relative-tab si::format-absolute-tab :mandatory"
 " :fill :miser :linear #:g1482 :current #:g1509 (length si::orig-args) si::orig-a"
 "rgs #:g1516 ((si::cur-posn 0 (1+ si::cur-posn)) (si::arg-ptr si::orig-args (cdr "
 "si::arg-ptr))) (eq si::arg-ptr si::args) si::new-posn si::cur-posn (<= 0 si::new"
 "-posn (length si::orig-args)) (setf si::args (nthcdr si::new-posn si::orig-args)"
 ") (list si::new-posn (length si::orig-args)) #:g1523 (condition) (list condition"
 ") :print-banner (si::orig-args si::args) si::nstring-capitalize-first ((string ("
 "make-array 10 :element-type 'character :fill-pointer 0 :adjustable t))) (stream "
 "string) #:g1633 (si::prev-args si::args) (setf si::args si::prev-args) si::*outs"
 "ide-args* #:g1709 #:g1710 #:g1711 (null si::outside-args) (return-from si::outsi"
 "de-loop nil) (return) si::up-up-and-out :args (setf si::args (si::formatter-aux "
 "stream si::inside-string si::orig-args si::args)) ((when (null si::args) (return"
 "))) ((si::outside-args si::args) (si::args si::orig-args)) (declare (ignorable s"
 "i::orig-args si::outside-args si::args)) si::outside-loop (si::args si::orig-arg"
 "s) (declare (ignorable si::orig-args si::args)) #:g1771 si::inside-string si::*i"
 "llegal-inside-justification* si::illegal-inside-justification-p #:g1872 #:g1873 "
 "#:g1874 #:g1875 (si::segments nil) ((si::newline-segment nil) (si::extra-space 0"
 ") (si::line-len 72)) si::newline-segment (stream) #:g1903 #:g1904 (or 72) si::ex"
 "tra-space si::line-len si::segments si::format-justification (si::newline-segmen"
 "t si::extra-space si::line-len) (nil 0 0) si::format-justification ((setf si::ar"
 "gs nil)) :per-line-prefix :prefix :suffix (si::args si::arg) ((si::orig-args si:"
 ":arg)) (si::orig-args) si::expand-format-logical-block :from-end 0 0 0 :string :"
 "start :end :character :colonp :atsignp :params si::format-directive-end 0 si::fo"
 "rmat-directive-character 0 0 0 0 0 si::format-directive-colonp si::format-direct"
 "ive-atsignp si::format-directive-params 0 0 0 0 0 0 0 0 0 0 0 0 0 si::pretty-str"
 "eam-p 0 si::format-directive-string 0 0 0 0 si::format-directive-start ((string "
 "t :type simple-string) (si::start 0 :type #1=(and unsigned-byte fixnum)) (si::en"
 "d 0 :type #2=(and unsigned-byte fixnum)) (character #\\  :type base-char) (si::co"
 "lonp nil :type #3=(member t nil)) (si::atsignp nil :type #4=(member t nil)) (si:"
 ":params nil :type list)) ((si::typed-structure-name si::format-directive) (strin"
 "g t simple-string nil 1 nil) (si::start 0 #1# nil 2 nil) (si::end 0 #2# nil 3 ni"
 "l) (character #\\  base-char nil 4 nil) (si::colonp nil #3# nil 5 nil) (si::atsig"
 "np nil #4# nil 6 nil) (si::params nil list nil 7 nil)) (si::make-format-directiv"
 "e) (deftype si::format-directive nil 'vector) #A(t (10) (nil \"one\" \"two\" \"three\""
 " \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\")) #A(t (10) (nil nil \"twenty\" \"thirt"
 "y\" \"forty\" \"fifty\" \"sixty\" \"seventy\" \"eighty\" \"ninety\")) #A(t (10) (\"ten\" \"eleve"
 "n\" \"twelve\" \"thirteen\" \"fourteen\" \"fifteen\" \"sixteen\" \"seventeen\" \"eighteen\" \"ni"
 "neteen\")) #A(t (22) (\"\" \" thousand\" \" million\" \" billion\" \" trillion\" \" quadrill"
 "ion\" \" quintillion\" \" sextillion\" \" septillion\" \" octillion\" \" nonillion\" \" deci"
 "llion\" \" undecillion\" \" duodecillion\" \" tredecillion\" \" quattuordecillion\" \" qui"
 "ndecillion\" \" sexdecillion\" \" septendecillion\" \" octodecillion\" \" novemdecillion"
 "\" \" vigintillion\")) #A(t (10) (nil \"first\" \"second\" \"third\" \"fourth\" \"fifth\" \"si"
 "xth\" \"seventh\" \"eighth\" \"ninth\")) #A(t (10) (nil \"tenth\" \"twentieth\" \"thirtieth\""
 " \"fortieth\" \"fiftieth\" \"sixtieth\" \"seventieth\" \"eightieth\" \"ninetieth\")) (\"~W\" \""
 "~:W\" \"~@W\" \"~:@W\" \"~_\" \"~:_\" \"~@_\" \"~:@_\" \"~:>\" \"~:@>\" \"~I\" \"~:I\" \"~@I\" \"~:@I\" \""
 "~:T\" \"~:@T\") ";
#define compiler_data_text_size 6333
