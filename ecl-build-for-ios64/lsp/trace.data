static const char compiler_data_text[] = 
"si::*trace-level* si::*trace-max-indent* si::trace* trace si::trace* si::untrace"
 "* untrace si::untrace* si::*inside-trace* :break :break-after :step :cond :cond-"
 "before :cond-after :print-after (&rest si::args) (values (si::*trace-level* (1+ "
 "si::*trace-level*))) si::args ((si::*inside-trace* t)) si::trace-print 'si::ente"
 "r (si::*inside-trace*) 'ext::exit (values-list values) si::trace-one si::enter s"
 "i::trace-print si::traced-old-definition si::delete-from-trace-list si::add-to-t"
 "race-list si::untrace-one si::*step-form* si::*step-tag* si::*step-functions* si"
 "::step-commands si::step* step si::step* si::steppable-function si::*tpl-level* "
 ":quiet :commands si::break-commands si::*tpl-commands* :broken-at :prompt-hook s"
 "i::stepper si::step-next si::step-skip si::step-print si::step-quit 0 0 0 0 0 0 "
 "0 0 0 0 0 0 0 0 si::tpl 0 0 0 0 (\"Stepper commands\" ((:newline) (si::step-next) "
 ":constant \"newline\t\tAdvance to the next form\" \"newline\t\t\t\t\t\t[Stepper command]~@\n"
 "\t~@\n\tStep to next form.~%\") ((:s :skip) si::step-skip nil \":s(kip)\t\tSkip current"
 " form or until function\" \":skip &optional arg\t\t\t\t[Stepper command]~@\n\t:s &option"
 "al arg\t\t\t\t[Abbreviation]~@\n\t~@\n\tContinue evaluation without stepping.  Without a"
 "rgument, resume\n\tstepping after the current form.  With numeric argument (n),\n\tr"
 "esume stepping at the n-th level above.  With function name, resume\n\twhen given "
 "function is called.~%\") ((:pr :print) (si::step-print) :constant \":pr(int)\tPrett"
 "y print current form\" \":print\t\t\t\t\t\t[Stepper command]~@\n\t:p\t\t\t\t\t\t[Abbreviation]~@"
 "\n\t~@\n\tPretty print current form.~%\") ((:form) si::*step-form* :constant \":form\t\t"
 "Current form\" \":form\t\t\t\t\t\t[Stepper command]~@\n\t~@\n\tReturn the current form.  Not"
 "hing is done, but the current form~@\n\tis returned as the value of this command. "
 " As a consequence,~@\n\tit is printed by the top level in the usual way and saved "
 "in~@\n\tthe variable *.  The main purpose of this command is to allow~@\n\tthe curre"
 "nt form to be examined further by accessing *.~%\") ((:x :exit) (si::step-quit) :"
 "constant \":x or :exit\tFinish evaluation and exit stepper\" \":exit\t\t\t\t\t\t[Stepper c"
 "ommand]~@\n       :x\t\t\t\t\t\t[Abbreviation]~@\n       ~@\n       Finish evaluation wit"
 "hout stepping.~%\")) ";
#define compiler_data_text_size 2180
