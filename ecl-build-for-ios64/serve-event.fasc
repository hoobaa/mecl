(#Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 15 2 77 77 77 19 10 3 29) #A(t (4) ("SERVE-EVENT" ("CL" "FFI" "UFFI") ("WITH-FD-HANDLER" "ADD-FD-HANDLER" "REMOVE-FD-HANDLER" "SERVE-EVENT" "SERVE-ALL-EVENTS") si::dodefpackage)) #1=#P"/Users/strobolights/dev/mecl/ecl-build-for-ios64/compile.lsp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SERVE-EVENT" si::select-package)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) ("#include <errno.h>" "#include <sys/select.h>" ffi::clines)) #1# 0) #Y(si::bytecodes nil nil (75 73 29) #A(t (0) ()) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 1 0 73 29) #A(t (8) (serve-event::+eintr+ #2="The special form c-inline cannot be used in the interpreter: ~A" :int "EINTR" :one-liner t error si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 77 77 77 77 15 4 9 3 77 77 15 5 19 15 6 15 0 19 1 19 78 15 15 7 1 17 12 19 2 18 1 0 73 29) #3=#A(t (20) (serve-event::handler "HANDLER-" ((serve-event::direction nil :type #4=(member :input :output)) (serve-event::descriptor 0) (function nil :type function)) ((serve-event::direction nil #4# nil 0 nil) (serve-event::descriptor 0 t nil 1 nil) (function nil function nil 2 nil)) ((serve-event::make-handler (serve-event::descriptor serve-event::direction function))) serve-event::handler-p si::define-structure serve-event::make-handler serve-event::descriptor serve-event::direction function typep si::structure-type-error (member :input :output) (member :input :output) 0 si::make-structure #Y(serve-event::make-handler nil nil (24 45 8 24 45 9 24 45 10 26 13 0 15 10 19 2 11 76 39 12 13 0 15 10 15 0 15 10 19 4 12 13 1 15 13 19 2 11 76 39 12 13 1 15 14 15 0 15 9 19 4 12 15 15 13 1 13 2 13 0 19 4 16 29) #3# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (serve-event::*descriptor-handlers* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 1 0 73 29) #5=#A(t (19) (serve-event::coerce-to-descriptor serve-event::stream-or-fd serve-event::direction #:g21724 fixnum typep file-stream ext::file-stream-fd two-way-stream :input two-way-stream-input-stream :output two-way-stream-output-stream stream gray::stream-file-descriptor (fixnum file-stream two-way-stream stream) si::etypecase-error #Y(serve-event::coerce-to-descriptor nil nil (24 45 1 24 45 2 26 10 1 45 3 13 0 15 4 19 2 5 39 6 10 2 73 38 80 13 0 15 6 19 2 5 39 7 10 2 16 7 38 65 13 0 15 8 19 2 5 39 31 10 1 42 9 7 10 2 16 10 38 12 42 11 7 10 2 16 12 38 3 75 73 12 13 1 19 2 0 38 26 13 0 15 13 19 2 5 39 10 13 2 13 1 19 2 14 38 8 13 0 15 15 19 2 16 43 1 29) #5# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #6=#A(t (20) (serve-event::add-fd-handler serve-event::stream-or-fd serve-event::direction function (:input :output) member simple-type-error :format-control "Invalid direction ~S, must be either ~
                            :INPUT or :OUTPUT." :format-arguments :datum :expected-type (member :input :output) error serve-event::coerce-to-descriptor serve-event::make-handler serve-event::handler serve-event::*descriptor-handlers* #Y(serve-event::add-fd-handler nil nil (24 45 1 24 45 2 24 45 3 26 13 1 15 4 19 2 5 76 39 25 15 6 14 7 15 8 14 9 10 1 6 1 12 14 10 13 1 14 11 15 12 19 9 13 13 2 13 1 19 2 14 12 13 1 13 0 19 3 15 45 16 13 0 11 17 3 52 17 10 0 73 43 1 29) #6# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #7=#A(t (6) (serve-event::remove-fd-handler serve-event::handler serve-event::*descriptor-handlers* delete #Y(serve-event::remove-fd-handler nil nil (24 45 1 26 13 0 14 2 19 2 3 52 2 73 29) #7# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 21 12 14 22 9 2 19 4 23 1 0 73 29) #8=#A(t (24) (serve-event::with-fd-handler #:g21730 #:g21729 #:g21731 si::dm-too-few-arguments #:g21732 #:g21733 serve-event::fd serve-event::direction function serve-event::body si::dm-too-many-arguments gensym serve-event::handler let unwind-protect progn setf serve-event::add-fd-handler when serve-event::remove-fd-handler #Y(serve-event::with-fd-handler nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 76 39 6 13 5 19 1 4 10 1 4 12 10 1 5 51 1 22 45 8 10 2 76 39 6 13 6 19 1 4 10 2 4 12 10 2 5 51 2 22 45 9 10 5 45 10 10 4 39 6 13 8 19 1 11 19 0 12 45 13 15 14 10 0 6 1 12 15 15 15 16 15 17 13 0 15 18 13 4 13 3 10 2 6 4 6 3 12 10 1 7 3 12 15 19 13 0 15 20 10 0 6 2 6 3 6 3 6 3 73 43 1 29) #8# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 14 10 9 2 19 4 11 1 0 73 29) #9=#A(t (12) (serve-event::fd-zero #:g21735 #:g21734 #:g21736 si::dm-too-few-arguments serve-event::fdset si::dm-too-many-arguments ffi::c-inline (#10=(:object) :void #11="FD_ZERO((fd_set*)#0->foreign.data)" :one-liner t :side-effects t) #Y(serve-event::fd-zero nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 39 6 13 3 19 1 6 15 7 10 0 6 1 12 1 8 7 3 73 29) #9# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 14 11 9 3 19 4 12 1 0 73 29) #12=#A(t (13) (serve-event::fd-set #:g21738 #:g21737 #:g21739 si::dm-too-few-arguments serve-event::fd serve-event::fdset si::dm-too-many-arguments ffi::c-inline (#13=(:int :object) :void #14="FD_SET(#0, (fd_set*)#1->foreign.data);" :one-liner t :side-effects t) #Y(serve-event::fd-set nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 39 6 13 4 19 1 7 15 8 13 1 10 0 6 2 12 1 9 7 3 73 29) #12# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 10 12 14 11 9 3 19 4 12 1 0 73 29) #15=#A(t (13) (serve-event::fd-isset #:g21741 #:g21740 #:g21742 si::dm-too-few-arguments serve-event::fd serve-event::fdset si::dm-too-many-arguments ffi::c-inline (#16=(:int :object) :int #17="FD_ISSET(#0, (fd_set*)#1->foreign.data)" :one-liner t :side-effects t) #Y(serve-event::fd-isset nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 39 6 13 4 19 1 7 15 8 13 1 10 0 6 2 12 1 9 7 3 73 29) #15# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #18=#A(t (10) (serve-event::fdset-size #2# :int "sizeof(fd_set)" :one-liner t :side-effects error #Y(serve-event::fdset-size nil nil (26 15 1 77 77 15 2 15 3 14 4 14 5 14 6 75 6 8 12 19 2 7 29) #18# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 54 12 19 2 55 1 0 73 29) #19=#A(t (56) (serve-event::serve-event serve-event::seconds serve-event::fdset-size serve-event::fsize :array :unsigned-char ffi::allocate-foreign-object serve-event::rfd serve-event::wfd #2# #10# :void #11# :one-liner t :side-effects error serve-event::maxfd serve-event::*descriptor-handlers* si::%dolist-var serve-event::handler serve-event::handler-descriptor serve-event::fd serve-event::handler-direction #:g21751 :input #13# #14# :output (:input :output) si::ecase-error > 1+ (:object :object :int) (values :int :int) "{ @(return 0) = select(#2, (fd_set*)#0->foreign.data,
                                                      (fd_set*)#1->foreign.data,
                                                      NULL, NULL);
                             @(return 1) = errno; }" (:object :object :int :double) (values :int :int) "{ struct timeval tv;
                             double seconds = #3;
                                tv.tv_sec = seconds;
                                tv.tv_usec = (seconds * 1e6);
                                @(return 0) = select(#2, (fd_set*)#0->foreign.data,
                                                         (fd_set*)#1->foreign.data,
                                                         NULL, &tv);
                                @(return 1) = errno; }" serve-event::errno serve-event::retval zerop minusp serve-event::+eintr+ = "Error during select" plusp #:g21754 #16# :int #17# (:input :output) serve-event::handler-function ffi::free-foreign-object #Y(serve-event::serve-event nil nil (25 40 2 77 46 1 26 19 0 2 45 3 14 4 14 5 10 0 6 3 12 19 1 6 45 7 64 486 14 4 14 5 10 1 6 3 12 19 1 6 45 8 64 461 15 9 10 1 6 1 12 15 10 15 11 15 12 14 13 14 14 14 15 11 14 6 8 12 19 2 16 15 9 10 0 6 1 12 15 10 15 11 15 12 14 13 14 14 14 15 11 14 6 8 12 19 2 16 8 0 45 17 11 18 45 19 75 45 20 38 119 10 1 4 51 0 13 0 19 1 21 45 22 13 1 19 1 23 45 24 10 0 42 25 32 15 9 13 1 10 6 6 2 12 15 26 15 11 15 27 14 13 14 14 14 15 11 14 6 8 12 19 2 16 38 42 42 28 32 15 9 13 1 10 5 6 2 12 15 26 15 11 15 27 14 13 14 14 14 15 11 14 6 8 12 19 2 16 38 8 13 0 15 29 19 2 30 43 1 13 0 13 3 19 2 31 39 5 10 0 51 3 43 1 10 1 5 51 1 10 1 40 -121 43 2 10 4 76 39 35 15 9 13 2 13 1 10 0 16 32 6 3 12 15 33 15 34 15 35 14 13 77 14 15 11 14 6 8 12 19 2 16 38 36 15 9 13 2 13 1 10 0 16 32 12 10 4 6 4 12 15 36 15 37 15 38 14 13 77 14 15 11 14 6 8 12 19 2 16 47 1 39 45 40 10 0 16 41 39 5 75 73 38 176 10 0 16 42 39 21 13 1 14 43 19 2 44 39 5 75 73 38 6 15 45 19 1 16 38 150 10 0 16 46 73 39 143 11 18 45 19 75 45 20 38 125 10 1 4 51 0 13 0 19 1 21 45 22 13 1 19 1 23 45 47 10 0 42 25 32 15 9 13 1 10 8 6 2 12 15 48 15 49 15 50 14 13 14 14 14 15 11 14 6 8 12 19 2 16 38 42 42 28 32 15 9 13 1 10 7 6 2 12 15 48 15 49 15 50 14 13 14 14 14 15 11 14 6 8 12 19 2 16 38 8 13 0 15 51 19 2 30 43 1 16 46 39 16 13 1 19 1 52 12 13 1 19 1 21 12 20 1 23 43 1 10 1 5 51 1 10 1 40 -127 43 2 11 14 73 43 2 43 1 65 13 0 19 1 53 66 43 1 65 13 0 19 1 53 66 43 1 43 1 29) #19# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #20=#A(t (8) (serve-event::serve-all-events serve-event::timeout serve-event::serve-event serve-event::sval serve-event::res t #Y(serve-event::serve-all-events nil nil (25 40 2 77 46 1 26 77 13 0 19 1 2 12 46 3 46 4 38 13 11 5 51 0 9 0 19 1 2 12 53 1 10 1 76 39 -16 10 0 73 43 2 29) #20# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) (serve-event::serve-event provide)) #1# 0))
