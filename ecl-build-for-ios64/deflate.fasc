(#Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 15 2 77 77 77 19 10 3 29) #A(t (4) ("DEFLATE" ("COMMON-LISP") ("DECOMPRESSION-ERROR" "DEFLATE-DECOMPRESSION-ERROR" "ZLIB-DECOMPRESSION-ERROR" "GZIP-DECOMPRESSION-ERROR" "INFLATE-STREAM" "INFLATE-ZLIB-STREAM" "PARSE-ZLIB-HEADER" "PARSE-ZLIB-FOOTER" "INFLATE-GZIP-STREAM" "PARSE-GZIP-HEADER" "PARSE-GZIP-FOOTER" "GUNZIP") si::dodefpackage)) #1=#P"/Users/strobolights/dev/mecl/ecl-build-for-ios64/compile.lsp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("DEFLATE" si::select-package)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((optimize (safety 0) (speed 3))) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (deflate::decompression-error (simple-error) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 13 12 1 14 7 3 6 1 12 77 19 4 15 1 0 73 29) #2=#A(t (16) (deflate::deflate-decompression-error (deflate::decompression-error) :initfunction deflate::c deflate::s si::+io-syntax-progv-list+ #3=#:%progv-list *print-readably* #4="Error detected during deflate decompression: ~?" simple-condition-format-control simple-condition-format-arguments format #Y(nil nil nil (24 45 3 24 45 4 26 11 5 45 6 10 0 4 12 10 0 5 67 75 48 7 13 1 15 8 13 2 19 1 9 12 13 2 19 1 10 12 19 4 11 44 1 68 43 1 29) #2# #1# 0) #Y(nil nil nil (26 34 12 73 29) #2# #1# 0) (:initform (lambda (deflate::c deflate::s) (with-standard-io-syntax (let ((*print-readably* nil)) (format deflate::s #4# (simple-condition-format-control deflate::c) (simple-condition-format-arguments deflate::c))))) :name si::report-function) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 13 12 1 14 7 3 6 1 12 77 19 4 15 1 0 73 29) #5=#A(t (16) (deflate::zlib-decompression-error (deflate::decompression-error) :initfunction deflate::c deflate::s si::+io-syntax-progv-list+ #3# *print-readably* #6="Error detected during zlib decompression: ~?" simple-condition-format-control simple-condition-format-arguments format #Y(nil nil nil (24 45 3 24 45 4 26 11 5 45 6 10 0 4 12 10 0 5 67 75 48 7 13 1 15 8 13 2 19 1 9 12 13 2 19 1 10 12 19 4 11 44 1 68 43 1 29) #5# #1# 0) #Y(nil nil nil (26 34 12 73 29) #5# #1# 0) (:initform (lambda (deflate::c deflate::s) (with-standard-io-syntax (let ((*print-readably* nil)) (format deflate::s #6# (simple-condition-format-control deflate::c) (simple-condition-format-arguments deflate::c))))) :name si::report-function) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 13 12 1 14 7 3 6 1 12 77 19 4 15 1 0 73 29) #7=#A(t (16) (deflate::gzip-decompression-error (deflate::decompression-error) :initfunction deflate::c deflate::s si::+io-syntax-progv-list+ #3# *print-readably* #8="Error detected during zlib decompression: ~?" simple-condition-format-control simple-condition-format-arguments format #Y(nil nil nil (24 45 3 24 45 4 26 11 5 45 6 10 0 4 12 10 0 5 67 75 48 7 13 1 15 8 13 2 19 1 9 12 13 2 19 1 10 12 19 4 11 44 1 68 43 1 29) #7# #1# 0) #Y(nil nil nil (26 34 12 73 29) #7# #1# 0) (:initform (lambda (deflate::c deflate::s) (with-standard-io-syntax (let ((*print-readably* nil)) (format deflate::s #8# (simple-condition-format-control deflate::c) (simple-condition-format-arguments deflate::c))))) :name si::report-function) clos::load-defclass)) #1# 0) #Y(si::bytecodes nil nil (15 0 8 1 17 1 1 0 73 29) #A(t (2) (deflate::+adler-32-start-value+ si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 1 17 2 1 0 73 29) #A(t (3) (deflate::+adler-32-base+ 65521 si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function ((unsigned-byte 32) (simple-array (unsigned-byte 8) (*)) fixnum) (unsigned-byte 32)) deflate::update-adler32-checksum)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 1 0 73 29) #9=#A(t (19) (deflate::update-adler32-checksum deflate::crc deflate::buffer deflate::end byte ldb deflate::s2 deflate::s1 si::%dotimes-var deflate::i aref + deflate::+adler-32-base+ mod 1+ < dpb #Y(deflate::update-adler32-checksum nil nil (24 45 1 24 45 2 24 45 3 26 9 16 9 0 19 2 4 12 13 2 19 2 5 12 9 16 9 16 19 2 4 12 13 2 19 2 5 12 46 6 46 7 10 2 45 8 8 0 45 9 38 41 13 2 13 5 13 0 19 2 10 12 19 2 11 12 11 12 17 13 51 2 13 3 13 2 19 2 11 12 11 12 17 13 51 3 10 0 16 14 51 0 13 0 13 1 19 2 15 40 -48 43 2 13 1 9 16 9 16 19 2 4 12 13 0 19 3 16 43 2 29) #9# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 8 0 17 1 1 0 73 29) #A(t (2) (deflate::+crc-32-start-value+ si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 1 17 2 1 0 73 29) #A(t (3) (deflate::+crc-32-polynomial+ 3988292384 si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function nil (simple-array (unsigned-byte 32) (256))) deflate::generate-crc32-table)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #10=#A(t (20) (deflate::generate-crc32-table :element-type (unsigned-byte 32) make-array deflate::result length si::%dotimes-var deflate::i deflate::cur deflate::k logand = ash deflate::+crc-32-polynomial+ logxor 1+ < si::aset #Y(deflate::generate-crc32-table nil nil (26 9 256 14 1 15 2 19 3 3 45 4 10 0 16 5 45 6 8 0 45 7 38 86 10 0 45 8 8 8 45 6 8 0 45 9 38 44 9 1 13 2 9 1 19 2 10 12 19 2 11 39 15 13 2 8 -1 17 12 12 14 13 19 2 14 38 7 13 2 8 -1 17 12 51 2 10 0 16 15 51 0 13 0 13 1 19 2 16 40 -51 43 2 13 3 13 1 13 0 19 3 17 43 1 10 0 16 15 51 0 13 0 13 1 19 2 16 40 -93 10 2 73 43 2 43 1 29) #10# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((ftype (function ((unsigned-byte 32) (simple-array (unsigned-byte 8) (*)) fixnum) (unsigned-byte 32)) deflate::update-crc32-checksum)) mapc)) #1# 0) #Y(si::bytecodes nil nil (19 0 19 78 4 15 0 1 17 12 19 2 18 1 0 73 29) #11=#A(t (20) (deflate::update-crc32-checksum deflate::crc deflate::buffer deflate::end 0 4294967295 logxor deflate::cur deflate::table si::%dotimes-var deflate::i aref logand deflate::index ash 1+ < #Y(deflate::update-crc32-checksum nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 2 15 5 19 2 6 12 46 7 46 8 10 2 45 9 8 0 45 10 38 50 9 255 13 3 13 5 13 0 19 2 11 12 19 2 6 12 19 2 12 45 13 13 3 13 0 19 2 11 12 13 4 8 -8 17 14 12 19 2 6 51 4 43 1 10 0 16 15 51 0 13 0 13 1 19 2 16 40 -57 43 2 13 1 15 5 19 2 6 43 2 29) #11# #1# 0) si::fset deflate::generate-crc32-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 1 17 2 1 0 73 29) #A(t (3) (deflate::+sliding-window-size+ 32768 si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 5 77 77 15 6 19 15 7 15 0 19 1 36 78 32 15 8 1 34 12 19 2 35 1 0 73 29) #12=#A(t (37) (deflate::sliding-window-stream "SLIDING-WINDOW-STREAM-" ((stream nil :type stream :read-only t) (deflate::buffer #13=(make-array deflate::+sliding-window-size+ :element-type '(unsigned-byte 8)) :type #14=(simple-array (unsigned-byte 8) (32768)) :read-only t) (deflate::buffer-end 0 :type fixnum) (deflate::checksum nil :type symbol :read-only t) (deflate::checksum-value 0 :type #15=(unsigned-byte 32))) ((stream nil stream t 0 nil) (deflate::buffer #13# #14# t 1 nil) (deflate::buffer-end 0 fixnum nil 2 nil) (deflate::checksum nil symbol t 3 nil) (deflate::checksum-value 0 #15# nil 4 nil)) deflate::copy-sliding-window-stream (deflate::make-sliding-window-stream) deflate::sliding-window-stream-p si::define-structure deflate::make-sliding-window-stream (nil :checksum-value :checksum :buffer-end :buffer :stream) #:stream deflate::+sliding-window-size+ :element-type (unsigned-byte 8) make-array #:buffer #:buffer-end #:checksum #:checksum-value (unsigned-byte 32) typep (unsigned-byte 32) deflate::checksum-value si::structure-type-error symbol deflate::checksum fixnum deflate::buffer-end (simple-array (unsigned-byte 8) (32768)) (simple-array (unsigned-byte 8) (32768)) deflate::buffer stream 0 si::make-structure #Y(deflate::make-sliding-window-stream nil nil (28 9 22 40 2 77 46 10 22 40 11 14 11 14 12 15 13 19 3 14 12 46 15 22 40 3 9 0 46 16 22 40 2 77 46 17 22 40 3 9 0 46 18 13 0 15 19 19 2 20 76 39 12 13 0 15 21 15 0 15 22 19 4 23 13 1 15 24 19 2 20 76 39 12 13 1 15 24 15 0 15 25 19 4 23 13 2 15 26 19 2 20 76 39 12 13 2 15 26 15 0 15 27 19 4 23 13 3 15 28 19 2 20 76 39 12 13 3 15 29 15 0 15 30 19 4 23 13 4 15 31 19 2 20 76 39 12 13 4 15 31 15 0 15 31 19 4 23 15 32 13 4 13 3 13 2 13 1 13 0 19 6 33 29) #12# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((inline deflate::sliding-window-stream-write-byte)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 26 12 19 2 27 1 0 73 29) #16=#A(t (28) (deflate::sliding-window-stream-write-byte stream byte deflate::sliding-window-stream-buffer-end deflate::end deflate::+sliding-window-size+ < deflate::sliding-window-stream-buffer deflate::sliding-window-stream-stream write-sequence deflate::sliding-window-stream-checksum :adler-32 #:g21903 deflate::sliding-window-stream-checksum-value deflate::update-adler32-checksum #:g21904 deflate::sliding-window-stream si::structure-set :crc-32 #:g21905 deflate::update-crc32-checksum #:g21906 si::aset #:g21910 1+ #:g21911 #Y(deflate::sliding-window-stream-write-byte nil nil (24 45 1 24 45 2 26 13 1 19 1 3 45 4 13 0 14 5 19 2 6 76 39 109 13 2 19 1 7 12 13 2 19 1 8 12 19 2 9 13 2 19 1 10 42 11 41 10 2 45 12 13 3 19 1 13 12 13 3 19 1 7 12 14 5 19 3 14 45 15 13 1 15 16 9 4 13 0 19 4 17 43 1 43 1 38 42 42 18 39 10 2 45 19 13 3 19 1 13 12 13 3 19 1 7 12 14 5 19 3 20 45 21 13 1 15 16 9 4 13 0 19 4 17 43 1 43 1 8 0 51 0 13 2 19 1 7 12 13 0 13 1 19 3 22 10 2 45 23 10 1 16 24 45 25 13 1 15 16 9 2 13 0 19 4 17 43 1 43 1 43 1 29) #16# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #17=#A(t (23) (deflate::sliding-window-stream-flush stream deflate::sliding-window-stream-buffer-end deflate::end zerop deflate::sliding-window-stream-checksum :adler-32 #:g21916 deflate::sliding-window-stream-checksum-value deflate::sliding-window-stream-buffer deflate::update-adler32-checksum #:g21917 deflate::sliding-window-stream si::structure-set :crc-32 #:g21918 deflate::update-crc32-checksum #:g21919 deflate::sliding-window-stream-stream :end write-sequence #Y(deflate::sliding-window-stream-flush nil nil (24 45 1 26 13 0 19 1 2 45 3 10 0 16 4 76 73 39 109 13 1 19 1 5 42 6 41 10 1 45 7 13 2 19 1 8 12 13 2 19 1 9 12 13 1 19 3 10 45 11 13 1 15 12 9 4 13 0 19 4 13 43 1 43 1 38 42 42 14 39 10 1 45 15 13 2 19 1 8 12 13 2 19 1 9 12 13 1 19 3 16 45 17 13 1 15 12 9 4 13 0 19 4 13 43 1 43 1 13 1 19 1 9 12 13 1 19 1 18 12 14 19 13 0 19 4 20 43 1 29) #17# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 0 73 29) #18=#A(t (21) (deflate::sliding-window-stream-copy-bytes stream deflate::distance length deflate::sliding-window-stream-buffer-end deflate::end - deflate::+sliding-window-size+ mod deflate::start deflate::sliding-window-stream-buffer deflate::buffer si::%dotimes-var deflate::i + aref deflate::sliding-window-stream-write-byte 1+ < #Y(deflate::sliding-window-stream-copy-bytes nil nil (24 45 1 24 45 2 24 45 3 26 13 2 19 1 4 45 5 13 0 13 2 19 2 6 12 11 7 17 8 45 9 13 4 19 1 10 45 11 10 3 45 12 8 0 45 13 38 32 13 7 13 2 13 3 13 0 19 2 14 12 11 7 17 8 12 19 2 15 12 19 2 16 10 0 16 17 51 0 75 13 0 13 1 19 2 18 40 -39 73 43 2 43 3 29) #18# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 4 77 77 15 6 19 15 7 15 0 19 1 29 78 25 15 8 1 27 12 19 2 28 1 0 73 29) #19=#A(t (30) (deflate::bit-stream "BIT-STREAM-" ((stream nil :type stream :read-only t) (deflate::next-byte 0 :type fixnum) (deflate::bits 0 :type #20=(unsigned-byte 29)) (deflate::bit-count 0 :type #21=(unsigned-byte 8))) ((stream nil stream t 0 nil) (deflate::next-byte 0 fixnum nil 1 nil) (deflate::bits 0 #20# nil 2 nil) (deflate::bit-count 0 #21# nil 3 nil)) deflate::copy-bit-stream (deflate::make-bit-stream) deflate::bit-stream-p si::define-structure deflate::make-bit-stream (nil :bit-count :bits :next-byte :stream) #:stream #:next-byte #:bits #:bit-count (unsigned-byte 8) typep (unsigned-byte 8) deflate::bit-count si::structure-type-error (unsigned-byte 29) (unsigned-byte 29) deflate::bits fixnum deflate::next-byte stream 0 si::make-structure #Y(deflate::make-bit-stream nil nil (28 9 22 40 2 77 46 10 22 40 3 9 0 46 11 22 40 3 9 0 46 12 22 40 3 9 0 46 13 13 0 15 14 19 2 15 76 39 12 13 0 15 16 15 0 15 17 19 4 18 13 1 15 19 19 2 15 76 39 12 13 1 15 20 15 0 15 21 19 4 18 13 2 15 22 19 2 15 76 39 12 13 2 15 22 15 0 15 23 19 4 18 13 3 15 24 19 2 15 76 39 12 13 3 15 24 15 0 15 24 19 4 18 15 25 13 3 13 2 13 1 13 0 19 5 26 29) #19# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((inline deflate::bit-stream-get-byte)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #22=#A(t (6) (deflate::bit-stream-get-byte stream deflate::bit-stream-stream read-byte #Y(deflate::bit-stream-get-byte nil nil (24 45 1 26 13 0 19 1 2 12 19 1 3 29) #22# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((inline deflate::bit-stream-read-bits)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 29 12 19 2 30 1 0 73 29) #23=#A(t (31) (deflate::bit-stream-read-bits stream deflate::bits 0 deflate::bit-stream-bit-count < #:g21940 deflate::bit-stream-bits deflate::bit-stream-get-byte ash logior #:g21941 deflate::bit-stream si::structure-set #:g21942 + #:g21943 = #:g21944 #:g21945 #:g21946 #:g21947 byte ldb #:g21948 - #:g21949 #:g21950 #:g21951 #Y(deflate::bit-stream-read-bits nil nil (24 45 1 24 45 2 26 57 3 61 2 2 97 13 2 19 1 4 12 13 1 19 2 5 76 39 4 35 0 1 10 2 45 6 13 3 19 1 7 12 13 3 19 1 8 12 13 3 19 1 4 17 9 12 19 2 10 45 11 13 1 15 12 9 2 13 0 19 4 13 43 1 43 1 10 2 45 14 13 3 19 1 4 12 9 8 19 2 15 45 16 13 1 15 12 9 3 13 0 19 4 13 43 1 43 1 35 0 0 62 13 1 19 1 4 12 13 0 19 2 17 39 57 13 1 19 1 7 12 10 1 45 18 8 0 45 19 13 1 15 12 9 2 13 0 19 4 13 43 1 43 1 10 1 45 20 8 0 45 21 13 1 15 12 9 3 13 0 19 4 13 43 1 43 1 22 73 38 87 13 0 9 0 19 2 22 12 13 1 19 1 7 12 19 2 23 12 10 1 45 24 13 2 19 1 7 12 13 1 19 1 25 17 9 45 26 13 1 15 12 9 2 13 0 19 4 13 43 1 43 1 10 1 45 27 13 2 19 1 4 12 13 1 19 2 25 45 28 13 1 15 12 9 3 13 0 19 4 13 43 1 43 1 22 73 29) #23# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((inline deflate::bit-stream-copy-block)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 28 12 19 2 29 1 0 73 29) #24=#A(t (30) (deflate::bit-stream-copy-block stream deflate::out-stream #:g21956 #:g21957 deflate::bit-stream si::structure-set #:g21958 #:g21959 deflate::bit-stream-get-byte ash logior deflate::len byte lognot ldb deflate::nlen = deflate::deflate-decompression-error :format-control "Block length mismatch for stored block: LEN(~D) vs. NLEN(~D)!" :format-arguments error si::%dotimes-var deflate::i deflate::sliding-window-stream-write-byte 1+ < #Y(deflate::bit-stream-copy-block nil nil (24 45 1 24 45 2 26 10 1 45 3 8 0 45 4 13 1 15 5 9 2 13 0 19 4 6 43 1 43 1 10 1 45 7 8 0 45 8 13 1 15 5 9 3 13 0 19 4 6 43 1 43 1 13 1 19 1 9 12 13 1 19 1 9 12 8 8 17 10 12 19 2 11 45 12 9 16 9 0 19 2 13 12 13 2 19 1 9 12 13 2 19 1 9 12 8 8 17 10 12 19 2 11 16 14 12 19 2 15 45 16 13 1 13 0 19 2 17 76 39 19 15 18 14 19 15 20 14 21 13 1 10 0 6 2 12 19 5 22 10 1 45 23 8 0 45 24 38 19 13 4 13 5 19 1 9 12 19 2 25 10 0 16 26 51 0 75 13 0 13 1 19 2 27 40 -26 73 43 2 43 2 29) #24# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 2 77 77 15 6 19 15 7 15 0 19 1 28 78 24 15 8 1 26 12 19 2 27 1 0 73 29) #25=#A(t (29) (deflate::decode-tree "DECODE-TREE-" ((deflate::length-count #26=(make-array 16 :element-type 'fixnum :initial-element 0) :type #27=(simple-array fixnum (*)) :read-only t) (deflate::code-symbols #28=(make-array 16 :element-type 'fixnum :initial-element 0) :type #29=(simple-array fixnum (*)))) ((deflate::length-count #26# #27# t 0 nil) (deflate::code-symbols #28# #29# nil 1 nil)) deflate::copy-decode-tree (deflate::make-decode-tree) deflate::decode-tree-p si::define-structure deflate::make-decode-tree (nil :code-symbols :length-count) :element-type fixnum :initial-element make-array #:length-count #:code-symbols (simple-array fixnum (*)) typep (simple-array fixnum (*)) deflate::code-symbols si::structure-type-error (simple-array fixnum (*)) (simple-array fixnum (*)) deflate::length-count 0 si::make-structure #Y(deflate::make-decode-tree nil nil (28 9 22 40 15 9 16 14 10 15 11 14 12 9 0 19 5 13 12 46 14 22 40 15 9 16 14 10 15 11 14 12 9 0 19 5 13 12 46 15 13 0 15 16 19 2 17 76 39 12 13 0 15 18 15 0 15 19 19 4 20 13 1 15 21 19 2 17 76 39 12 13 1 15 22 15 0 15 23 19 4 20 15 24 13 1 13 0 19 3 25 29) #25# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 43 12 19 2 44 1 0 73 29) #30=#A(t (45) (deflate::make-huffman-decode-tree deflate::code-lengths max :initial-value reduce deflate::max-length 1+ :element-type fixnum :initial-element make-array deflate::next-code length deflate::code-symbols deflate::length-count #:loop-limit22014 deflate::index deflate::code 0 #:loop-across-list22035 #:loop-across-index-22034 #:loop-across-vector-22033 >= aref #:g22042 #:g22043 #:g22045 + #:g22044 si::aset > 1- #:loop-across-list22053 #:loop-across-index-22052 #:loop-across-vector-22051 zerop #:g22064 #:g22065 #:g22067 #:g22066 :length-count :code-symbols deflate::make-decode-tree #Y(deflate::make-huffman-decode-tree nil nil (24 45 1 26 33 2 12 13 0 14 3 9 0 19 4 4 45 5 10 0 16 6 12 14 7 15 8 14 9 9 0 19 5 10 45 11 10 2 16 12 12 14 7 15 8 14 9 9 0 19 5 10 45 13 10 2 16 6 12 14 7 15 8 14 9 9 0 19 5 10 45 14 9 1 13 3 46 15 46 16 75 45 17 57 18 61 2 125 172 77 13 8 9 0 9 0 46 19 46 20 46 21 46 12 57 18 61 2 8 75 10 2 16 12 51 4 13 3 13 4 19 2 22 39 4 35 0 1 13 2 13 3 19 2 23 51 1 10 3 16 6 51 3 10 9 45 24 10 2 45 25 8 1 45 26 13 2 13 1 19 2 23 12 13 0 19 2 27 45 28 13 3 13 2 13 0 19 3 29 43 4 35 0 0 13 9 9 0 9 0 19 3 29 62 43 4 13 2 13 3 19 2 30 39 4 35 0 1 8 0 51 1 13 6 13 2 13 1 19 3 29 10 2 16 6 51 2 13 2 13 3 19 2 30 39 4 35 0 1 13 1 13 4 10 2 16 31 12 19 2 23 12 19 2 27 51 1 35 0 0 62 43 1 43 2 77 13 4 9 0 9 0 46 32 46 33 46 34 46 12 8 0 45 16 57 18 61 2 35 130 10 3 16 12 51 5 13 4 13 5 19 2 22 39 4 35 0 1 13 3 13 4 19 2 23 51 2 10 4 16 6 51 4 10 2 16 35 76 39 54 13 7 13 8 13 2 19 2 23 12 13 1 19 3 29 10 8 45 36 10 3 45 37 8 1 45 38 13 2 13 1 19 2 23 12 13 0 19 2 27 45 39 13 3 13 2 13 0 19 3 29 43 4 13 4 13 5 19 2 22 39 4 35 0 1 13 3 13 4 19 2 23 51 2 10 4 16 6 51 4 10 1 16 6 51 1 35 0 0 62 43 1 43 4 14 40 13 0 14 41 13 1 19 4 42 43 4 29) #30# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((inline deflate::read-huffman-code)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 28 12 19 2 29 1 0 73 29) #31=#A(t (30) (deflate::read-huffman-code deflate::bit-stream deflate::decode-tree deflate::decode-tree-length-count deflate::length-count deflate::decode-tree-code-symbols deflate::code-symbols deflate::code deflate::index first length #:loop-limit22070 count #:loop-it-22071 0 deflate::bit-stream-read-bits >= aref + < - * 1+ deflate::deflate-decompression-error :format-control "Corrupted Data detected during decompression: ~
             Incorrect huffman code (~X) in huffman decode!" :format-arguments error #Y(deflate::read-huffman-code nil nil (24 45 1 24 45 2 26 58 60 220 13 1 19 1 3 45 4 13 2 19 1 5 45 6 8 0 45 7 8 0 45 8 8 0 45 9 9 1 10 4 16 10 12 46 11 46 10 75 45 12 75 45 13 57 14 61 2 19 136 13 12 9 1 19 2 15 51 7 8 0 51 6 8 0 51 5 13 3 13 4 19 2 16 39 4 35 0 1 13 9 13 3 19 2 17 51 2 13 7 13 5 13 2 19 2 18 12 19 2 19 39 20 13 8 13 6 13 7 13 5 19 2 20 12 19 2 18 12 19 2 17 51 1 39 6 10 1 73 36 10 13 7 9 2 19 2 21 12 13 12 9 1 19 2 15 12 19 2 18 51 7 13 6 13 2 19 2 18 51 6 13 5 13 2 19 2 18 12 9 2 19 2 21 51 5 10 3 16 22 51 3 35 0 0 15 23 14 24 15 25 14 26 10 7 6 1 12 19 5 27 62 73 43 1 43 1 43 2 43 1 43 1 43 1 43 1 43 1 63 29) #31# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 15 2 9 144 14 3 9 8 19 4 4 12 15 2 9 112 14 3 9 9 19 4 4 12 15 2 9 24 14 3 9 7 19 4 4 12 15 2 9 8 14 3 9 8 19 4 4 12 19 5 5 12 19 1 6 52 0 1 0 73 29) #A(t (7) (deflate::*std-lit-decode-tree* si::*make-special vector :initial-element make-sequence concatenate deflate::make-huffman-decode-tree)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 15 2 9 32 14 3 9 5 19 4 4 12 19 1 5 52 0 1 0 73 29) #A(t (6) (deflate::*std-dist-decode-tree* si::*make-special vector :initial-element make-sequence deflate::make-huffman-decode-tree)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (deflate::*code-length-entry-order* si::*make-special #A(t (19) (16 17 18 0 8 7 9 6 10 5 11 4 12 3 13 2 14 1 15)))) #1# 0) #Y(si::bytecodes nil nil (15 0 1 49 12 19 2 50 1 0 73 29) #32=#A(t (51) (deflate::decode-code-length-entries deflate::bit-stream count deflate::decode-tree :element-type fixnum :initial-element make-array deflate::index deflate::result deflate::read-huffman-code deflate::code #:g22162 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 si::aset #:g22167 + 16 deflate::bit-stream-read-bits length si::%dotimes-var deflate::i 1- aref 1+ < #:g22175 17 #:g22183 18 #:g22191 (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 16 17 18) si::ecase-error >= #Y(deflate::decode-code-length-entries nil nil (24 45 1 24 45 2 24 45 3 26 13 1 14 4 15 5 14 6 9 0 19 5 7 12 9 0 46 8 46 9 38 347 13 4 13 2 19 2 10 45 11 10 0 45 12 10 0 41 13 46 41 14 43 41 15 40 41 16 37 41 17 34 41 18 31 41 19 28 41 20 25 41 21 22 41 22 19 41 23 16 41 24 13 41 25 10 41 26 7 41 27 4 42 28 27 13 2 13 3 13 1 19 3 29 8 1 45 30 13 4 13 0 19 2 31 51 4 43 1 38 254 42 32 86 9 3 13 6 9 2 19 2 33 12 19 2 31 45 34 10 0 45 35 8 0 45 36 38 31 13 5 13 6 13 0 19 2 31 12 13 5 10 6 16 37 12 19 2 38 12 19 3 29 10 0 16 39 51 0 13 0 13 1 19 2 40 40 -38 43 2 10 0 45 41 13 5 13 0 19 2 31 51 5 43 1 43 1 38 166 42 42 77 9 3 13 6 9 3 19 2 33 12 19 2 31 45 34 10 0 45 35 8 0 45 36 38 22 13 5 13 6 13 0 19 2 31 12 9 0 19 3 29 10 0 16 39 51 0 13 0 13 1 19 2 40 40 -29 43 2 10 0 45 43 13 5 13 0 19 2 31 51 5 43 1 43 1 38 87 42 44 77 9 11 13 6 9 7 19 2 33 12 19 2 31 45 34 10 0 45 35 8 0 45 36 38 22 13 5 13 6 13 0 19 2 31 12 9 0 19 3 29 10 0 16 39 51 0 13 0 13 1 19 2 40 40 -29 43 2 10 0 45 45 13 5 13 0 19 2 31 51 5 43 1 43 1 38 8 13 0 15 46 19 2 47 43 1 43 1 13 1 13 3 19 2 48 39 -354 10 0 73 43 2 29) #32# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 1 0 73 29) #33=#A(t (29) (deflate::decode-huffman-tables deflate::bit-stream deflate::bit-stream-read-bits deflate::hlit deflate::hdist deflate::hclen :element-type (unsigned-byte 8) :initial-element make-array deflate::code-lengths + #:loop-limit22196 deflate::index deflate::code-length deflate::code-index 0 >= deflate::*code-length-entry-order* aref si::aset 1+ deflate::make-huffman-decode-tree deflate::cl-decode-tree deflate::decode-code-length-entries deflate::entries subseq #Y(deflate::decode-huffman-tables nil nil (24 45 1 26 13 0 9 5 19 2 2 45 3 13 1 9 5 19 2 2 45 4 13 2 9 4 19 2 2 45 5 58 60 107 9 19 14 6 15 7 14 8 9 0 19 5 9 45 10 9 0 13 2 9 4 19 2 11 12 46 12 46 13 75 45 14 75 45 15 57 16 61 2 2 49 13 3 13 4 19 2 17 39 4 35 0 1 13 10 9 3 19 2 2 51 2 14 18 13 3 19 2 19 51 1 13 5 13 1 13 2 19 3 20 10 3 16 21 51 3 35 0 0 13 5 19 1 22 36 6 62 43 1 43 1 43 2 43 1 63 45 23 13 4 13 3 9 257 13 2 9 1 19 4 11 12 13 0 19 3 24 45 25 13 0 9 0 13 4 9 257 19 2 11 12 19 3 26 12 19 1 22 12 13 0 13 4 9 257 19 2 11 12 19 2 26 12 19 1 22 12 72 2 43 1 43 1 43 3 29) #33# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((inline deflate::decode-length-entry)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #34=#A(t (16) (deflate::decode-length-entry symbol deflate::bit-stream <= - * deflate::bit-stream-read-bits + = deflate::deflate-decompression-error :format-control "Strange Length Code in bitstream: ~D" :format-arguments error #Y(deflate::decode-length-entry nil nil (24 45 1 24 45 2 26 13 1 9 264 19 2 3 39 10 13 1 9 254 19 2 4 38 221 13 1 9 268 19 2 3 39 30 9 11 13 1 9 265 19 2 4 12 9 2 19 2 5 12 13 0 9 1 19 2 6 12 19 3 7 38 183 13 1 9 272 19 2 3 39 30 9 19 13 1 9 269 19 2 4 12 9 4 19 2 5 12 13 0 9 2 19 2 6 12 19 3 7 38 145 13 1 9 276 19 2 3 39 30 9 35 13 1 9 273 19 2 4 12 9 8 19 2 5 12 13 0 9 3 19 2 6 12 19 3 7 38 107 13 1 9 280 19 2 3 39 30 9 67 13 1 9 277 19 2 4 12 9 16 19 2 5 12 13 0 9 4 19 2 6 12 19 3 7 38 69 13 1 9 284 19 2 3 39 30 9 131 13 1 9 281 19 2 4 12 9 32 19 2 5 12 13 0 9 5 19 2 6 12 19 3 7 38 31 13 1 9 285 19 2 8 39 6 8 258 73 38 17 15 9 14 10 15 11 14 12 10 1 6 1 12 19 5 13 29) #34# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((inline deflate::decode-distance-entry)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #35=#A(t (17) (deflate::decode-distance-entry symbol deflate::bit-stream <= 1+ truncate deflate::offset deflate::order 1- deflate::extra-bits ash deflate::factor * deflate::bit-stream-read-bits + #Y(deflate::decode-distance-entry nil nil (24 45 1 24 45 2 26 13 1 9 3 19 2 3 39 7 10 1 16 4 38 59 13 1 9 2 19 2 5 47 1 6 45 7 10 0 16 8 45 9 9 1 10 0 17 10 45 11 9 1 10 2 17 10 16 4 12 13 3 13 0 19 2 12 12 13 4 13 1 19 2 13 12 19 3 14 43 2 43 2 29) #35# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #36=#A(t (17) (deflate::decode-huffman-block deflate::bit-stream deflate::window-stream deflate::lit-decode-tree deflate::dist-decode-tree deflate::read-huffman-code symbol <= deflate::sliding-window-stream-write-byte deflate::decode-length-entry deflate::decode-distance-entry deflate::distance length deflate::sliding-window-stream-copy-bytes = #Y(deflate::decode-huffman-block nil nil (24 45 1 24 45 2 24 45 3 24 45 4 26 13 3 13 1 19 2 5 45 6 38 66 13 0 9 255 19 2 7 39 10 13 3 13 0 19 2 8 38 38 13 0 13 4 19 2 9 12 13 4 13 1 19 2 5 12 13 4 19 2 10 12 46 11 46 12 13 5 13 1 13 0 19 3 13 43 2 13 4 13 2 19 2 5 12 53 0 13 0 9 256 19 2 14 39 -73 75 73 43 1 29) #36# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 26 12 19 2 27 1 0 73 29) #37=#A(t (28) (deflate::decode-block deflate::bit-stream deflate::window-stream deflate::bit-stream-read-bits zerop deflate::finalp type #:g22201 0 deflate::bit-stream-copy-block 1 deflate::*std-lit-decode-tree* deflate::*std-dist-decode-tree* deflate::decode-huffman-block 2 deflate::decode-huffman-tables deflate::dist-decode-tree deflate::lit-decode-tree 3 deflate::deflate-decompression-error :format-control "Encountered Reserved Block Type ~D!" :format-arguments error (0 1 2 3) si::ecase-error #Y(deflate::decode-block nil nil (24 45 1 24 45 2 26 13 1 9 1 19 2 3 16 4 76 45 5 13 2 9 2 19 2 3 45 6 10 0 45 7 10 0 42 8 10 13 4 13 3 19 2 9 38 73 42 10 14 13 4 13 3 14 11 14 12 19 4 13 38 57 42 14 26 13 4 19 1 15 47 1 16 45 17 13 6 13 5 13 0 13 1 19 4 13 43 2 38 29 42 18 19 15 19 14 20 15 21 14 22 10 1 6 1 12 19 5 23 38 8 13 0 15 24 19 2 25 43 1 10 1 76 73 43 2 29) #37# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #38=#A(t (20) (deflate::parse-zlib-header deflate::input-stream read-byte deflate::flags deflate::compression-method * + mod zerop deflate::zlib-decompression-error :format-control "Corrupted Header ~2,'0X,~2,'0X!" :format-arguments error byte ldb deflate::parse-zlib-checksum deflate::dict #Y(deflate::parse-zlib-header nil nil (24 45 1 26 13 0 19 1 2 12 13 0 19 1 2 12 46 3 46 4 13 0 9 256 19 2 5 12 13 1 19 2 6 12 8 31 17 7 16 8 76 39 19 15 9 14 10 15 11 14 12 13 0 10 1 6 2 12 19 5 13 9 1 9 5 19 2 14 12 13 1 19 2 15 16 8 76 39 6 13 2 19 1 16 45 17 9 4 9 0 19 2 14 12 13 1 19 2 15 12 9 4 9 4 19 2 14 12 13 1 19 2 15 12 13 0 9 2 9 6 19 2 14 12 13 2 19 2 15 12 72 4 43 1 43 2 29) #38# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #39=#A(t (7) (deflate::parse-zlib-checksum deflate::input-stream read-byte * + #Y(deflate::parse-zlib-checksum nil nil (24 45 1 26 13 0 19 1 2 12 9 256 9 256 9 256 19 4 3 12 13 0 19 1 2 12 9 256 9 256 19 3 3 12 13 0 19 1 2 12 9 256 19 2 3 12 13 0 19 1 2 12 19 4 4 29) #39# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #40=#A(t (5) (deflate::parse-zlib-footer deflate::input-stream deflate::parse-zlib-checksum #Y(deflate::parse-zlib-footer nil nil (24 45 1 26 13 0 19 1 2 29) #40# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 8 31 17 1 1 0 73 29) #A(t (2) (deflate::+gzip-header-id1+ si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 8 139 17 1 1 0 73 29) #A(t (2) (deflate::+gzip-header-id2+ si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #41=#A(t (27) (deflate::parse-gzip-header deflate::input-stream read-byte deflate::flags deflate::compression-method deflate::id2 deflate::id1 deflate::+gzip-header-id1+ = deflate::+gzip-header-id2+ deflate::gzip-decompression-error :format-control "Header missing magic values ~2,'0X,~2,'0X (got ~2,'0X,~2,'0X instead)!" :format-arguments error "Unknown compression-method in Header ~2,'0X!" byte ldb zerop "Unknown flags in Header ~2,'0X!" deflate::parse-gzip-mtime deflate::parse-gzip-extra deflate::parse-gzip-string * + #Y(deflate::parse-gzip-header nil nil (24 45 1 26 13 0 19 1 2 12 13 0 19 1 2 12 13 0 19 1 2 12 13 0 19 1 2 12 46 3 46 4 46 5 46 6 13 0 14 7 19 2 8 39 8 13 1 14 9 19 2 8 76 39 23 15 10 14 11 15 12 14 13 14 7 14 9 13 0 10 1 6 4 12 19 5 14 13 2 9 8 19 2 8 76 39 17 15 10 14 11 15 15 14 13 10 2 6 1 12 19 5 14 9 3 9 5 19 2 16 12 13 3 19 2 17 16 18 76 39 17 15 10 14 11 15 19 14 13 10 3 6 1 12 19 5 14 13 2 9 1 9 1 9 0 19 2 16 12 13 3 19 2 17 12 19 2 8 12 13 4 19 1 20 12 13 4 19 1 2 12 13 4 19 1 2 12 9 1 9 2 19 2 16 12 13 3 19 2 17 16 18 76 73 39 6 13 4 19 1 21 12 9 1 9 3 19 2 16 12 13 3 19 2 17 16 18 76 73 39 6 13 4 19 1 22 12 9 1 9 4 19 2 16 12 13 3 19 2 17 16 18 76 73 39 6 13 4 19 1 22 12 9 1 9 1 19 2 16 12 13 3 19 2 17 16 18 76 73 39 22 13 4 19 1 2 12 13 4 9 256 19 2 2 12 19 1 23 12 19 2 24 12 72 9 43 4 29) #41# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #42=#A(t (10) (deflate::parse-gzip-mtime deflate::input-stream read-byte * + time zerop 2208988800 #Y(deflate::parse-gzip-mtime nil nil (24 45 1 26 13 0 19 1 2 12 13 0 19 1 2 12 9 256 19 2 3 12 13 0 19 1 2 12 9 256 9 256 19 3 3 12 13 0 19 1 2 12 9 256 9 256 9 256 19 4 3 12 19 4 4 45 5 10 0 16 6 39 5 75 73 38 8 13 0 15 7 19 2 4 43 1 29) #42# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #43=#A(t (13) (deflate::parse-gzip-extra deflate::input-stream read-byte * + length :element-type (unsigned-byte 8) make-array deflate::result read-sequence #Y(deflate::parse-gzip-extra nil nil (24 45 1 26 13 0 19 1 2 12 13 0 19 1 2 12 9 256 19 2 3 12 19 2 4 45 5 13 0 14 6 15 7 19 3 8 45 9 13 0 13 2 19 2 10 10 0 73 43 2 29) #43# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #44=#A(t (13) (deflate::parse-gzip-string deflate::input-stream make-string-output-stream string deflate::value 0 read-byte zerop code-char write-char get-output-stream-string #Y(deflate::parse-gzip-string nil nil (24 45 1 26 19 0 2 45 3 75 45 4 57 5 61 2 2 30 13 3 19 1 6 51 1 10 1 16 7 39 4 35 0 1 10 1 16 8 12 13 2 19 2 9 35 0 0 62 43 1 10 0 16 10 43 1 29) #44# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #45=#A(t (7) (deflate::parse-gzip-checksum deflate::input-stream read-byte * + #Y(deflate::parse-gzip-checksum nil nil (24 45 1 26 13 0 19 1 2 12 13 0 19 1 2 12 9 256 19 2 3 12 13 0 19 1 2 12 9 256 9 256 19 3 3 12 13 0 19 1 2 12 9 256 9 256 9 256 19 4 3 12 19 4 4 29) #45# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #46=#A(t (8) (deflate::parse-gzip-footer deflate::input-stream deflate::parse-gzip-checksum read-byte * + #Y(deflate::parse-gzip-footer nil nil (24 45 1 26 13 0 19 1 2 12 13 0 19 1 3 12 13 0 19 1 3 12 9 256 19 2 4 12 13 0 19 1 3 12 9 256 9 256 19 3 4 12 13 0 19 1 3 12 9 256 9 256 9 256 19 4 4 12 19 4 5 12 72 2 29) #46# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 24 12 19 2 25 1 0 73 29) #47=#A(t (26) (deflate::inflate-stream deflate::input-stream deflate::output-stream (nil :checksum) deflate::checksum :stream :checksum :checksum-value #:g22203 nil :crc-32 deflate::+crc-32-start-value+ :adler-32 deflate::+adler-32-start-value+ (nil :crc-32 :adler-32) si::ecase-error deflate::make-sliding-window-stream deflate::window-stream deflate::make-bit-stream deflate::bit-stream 0 deflate::decode-block deflate::sliding-window-stream-flush deflate::sliding-window-stream-checksum-value #Y(deflate::inflate-stream nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 58 60 110 14 5 13 2 14 6 13 1 14 7 10 1 45 8 10 0 42 9 6 8 0 73 38 24 42 10 6 11 11 73 38 16 42 12 6 11 13 73 38 8 13 0 15 14 19 2 15 12 43 1 19 6 16 45 17 14 5 13 4 19 2 18 45 19 57 20 61 2 2 17 13 1 13 2 19 2 21 76 39 4 35 0 1 35 0 0 13 2 19 1 22 10 4 39 8 13 2 19 1 23 36 3 62 73 43 1 43 1 63 29) #47# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 28 12 19 2 29 1 0 73 29) #48=#A(t (30) (deflate::inflate-zlib-stream deflate::input-stream deflate::output-stream (nil :check-checksum) deflate::check-checksum deflate::parse-zlib-header deflate::flevel deflate::dictid deflate::cinfo deflate::cm = deflate::zlib-decompression-error :format-control "Unknown compression method ~D!" :format-arguments error <= "Unsupported sliding window size 2^~D = ~D!" + expt "Unknown preset dictionary id ~8,'0X!" :checksum :adler-32 deflate::inflate-stream deflate::parse-zlib-footer deflate::checksum-old deflate::checksum-new "Checksum mismatch for decompressed stream: ~8,'0X != ~8,'0X!" #Y(deflate::inflate-zlib-stream nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 13 2 19 1 5 47 3 6 47 2 7 47 1 8 45 9 13 0 9 8 19 2 10 76 39 17 15 11 14 12 15 13 14 14 10 0 6 1 12 19 5 15 13 1 9 7 19 2 16 76 39 34 15 11 14 12 15 17 14 14 9 8 13 1 19 2 18 12 9 2 9 8 13 1 19 2 18 17 19 6 2 12 19 5 15 10 2 76 76 39 17 15 11 14 12 15 20 14 14 10 2 6 1 12 19 5 15 13 6 13 5 14 21 10 4 73 39 4 11 22 73 12 19 4 23 12 13 6 19 1 24 12 46 25 46 26 10 6 39 9 13 1 13 0 19 2 10 76 39 19 15 11 14 12 15 27 14 14 13 1 10 0 6 2 12 19 5 15 13 1 13 5 72 2 43 2 43 4 29) #48# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 1 0 73 29) #49=#A(t (29) (deflate::inflate-gzip-stream deflate::input-stream deflate::output-stream (nil :check-checksum) deflate::check-checksum deflate::parse-gzip-header deflate::fcomment deflate::fname deflate::fextra deflate::os deflate::xfl deflate::mtime deflate::ftext deflate::cm = deflate::gzip-decompression-error :format-control "Unknown compression method ~D!" :format-arguments error :checksum :crc-32 deflate::inflate-stream deflate::parse-gzip-footer deflate::checksum-old deflate::checksum-new "Checksum mismatch for decompressed stream: ~8,'0X != ~8,'0X!" #Y(deflate::inflate-gzip-stream nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 13 2 19 1 5 47 7 6 47 6 7 47 5 8 47 4 9 47 3 10 47 2 11 47 1 12 45 13 13 0 9 8 19 2 14 76 39 17 15 15 14 16 15 17 14 18 10 0 6 1 12 19 5 19 13 10 13 9 14 20 10 8 73 39 4 11 21 73 12 19 4 22 12 13 10 19 1 23 12 46 24 46 25 10 10 39 9 13 1 13 0 19 2 14 76 39 19 15 15 14 16 15 26 14 18 13 1 10 0 6 2 12 19 5 19 13 1 13 8 13 4 13 9 72 4 43 2 43 8 29) #49# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 1 0 73 29) #50=#A(t (20) (deflate::gunzip deflate::input-file deflate::output-file :element-type (unsigned-byte 8) open deflate::input :direction :output :if-exists :supersede (unsigned-byte 8) deflate::output deflate::inflate-gzip-stream close :abort t probe-file #Y(deflate::gunzip nil nil (24 45 1 24 45 2 26 13 1 14 3 15 4 19 3 5 45 6 64 69 13 1 14 7 14 8 14 9 14 10 14 3 15 11 19 7 5 45 12 64 20 13 1 13 0 19 2 13 69 10 0 39 6 13 0 19 1 14 70 65 10 0 39 10 13 0 14 15 14 16 19 3 14 66 43 1 69 10 0 39 6 13 0 19 1 14 70 65 10 0 39 10 13 0 14 15 14 16 19 3 14 66 43 1 10 0 16 17 29) #50# #1# 0) si::fset)) #1# 0))
