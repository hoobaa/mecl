(#Y(si::bytecodes nil nil (15 0 15 1 77 15 2 77 77 15 3 77 77 77 19 10 4 29) #A(t (5) ("PROFILE" ("PROF" "SB-PROFILE") "CL" ("PROFILE" "REPORT" "RESET" "UNPROFILE" "UNPROFILE-ALL") si::dodefpackage)) #1=#P"/Users/strobolights/dev/mecl/ecl/src/ios-build/compile.lsp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("PROFILE" si::select-package)) #1# 0) #Y(si::bytecodes nil nil (15 0 11 1 17 2 1 0 73 29) #A(t (3) (profile::+ticks-per-second+ internal-time-units-per-second si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 6 19 0 3 52 0 1 0 73 29) #A(t (4) (profile::*profile-lock* si::*make-special boundp mp::make-lock)) #1# 0) #Y(si::bytecodes nil nil (75 73 29) #A(t (0) ()) #1# 0) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) ("
extern ECL_API size_t GC_get_total_bytes();
" ffi::clines)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 14 4 11 5 6 6 12 19 2 6 17 7 1 0 73 29) #A(t (8) (profile::+wrap+ #2="The special form c-inline cannot be used in the interpreter: ~A" :object "ecl_make_unsigned_integer(~((size_t)0))" :one-liner t error si::*make-constant)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #3=#A(t (15) (profile::get-bytes-consed profile::orig #2# :object "ecl_make_unsigned_integer(GC_get_total_bytes())" :one-liner t error profile::bytes < profile::+wrap+ - + #Y(profile::get-bytes-consed nil nil (24 45 1 26 15 2 77 77 15 3 15 4 14 5 11 6 6 6 12 19 2 7 45 8 13 0 13 1 19 2 9 39 16 14 10 13 1 19 2 11 12 13 0 19 2 12 38 8 13 0 13 1 19 2 11 43 1 29) #3# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 15 2 19 3 3 29) #A(t (4) (profile::counter (deftype profile::counter nil '#4=(integer 0 *)) #4# si::do-deftype)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 10 14 3 15 4 19 2 5 52 0 1 0 73 29) #A(t (6) (profile::*profiled-fun-name->info* si::*make-special boundp :test equal make-hash-table)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 77 77 77 77 15 4 9 5 77 77 15 5 19 15 6 15 0 19 1 26 78 22 15 7 1 24 12 19 2 25 1 0 73 29) #5=#A(t (27) (profile::profile-info "PROFILE-INFO-" ((profile::name #6=(profile::missing-arg) :read-only t) (profile::encapsulated-fun #7=(profile::missing-arg) :type function :read-only t) (profile::encapsulation-fun #8=(profile::missing-arg) :type function :read-only t) (profile::read-stats-fun #9=(profile::missing-arg) :type function :read-only t) (profile::clear-stats-fun #10=(profile::missing-arg) :type function :read-only t)) ((profile::name #6# t t 0 nil) (profile::encapsulated-fun #7# function t 1 nil) (profile::encapsulation-fun #8# function t 2 nil) (profile::read-stats-fun #9# function t 3 nil) (profile::clear-stats-fun #10# function t 4 nil)) (profile::make-profile-info) profile::profile-info-p si::define-structure profile::make-profile-info (nil :clear-stats-fun :read-stats-fun :encapsulation-fun :encapsulated-fun :name) profile::missing-arg #:name #:encapsulated-fun #:encapsulation-fun #:read-stats-fun #:clear-stats-fun function typep profile::clear-stats-fun si::structure-type-error profile::read-stats-fun profile::encapsulation-fun profile::encapsulated-fun 0 si::make-structure #Y(profile::make-profile-info nil nil (28 8 22 40 5 19 0 9 12 46 10 22 40 5 19 0 9 12 46 11 22 40 5 19 0 9 12 46 12 22 40 5 19 0 9 12 46 13 22 40 5 19 0 9 12 46 14 13 0 15 15 19 2 16 76 39 12 13 0 15 15 15 0 15 17 19 4 18 13 1 15 15 19 2 16 76 39 12 13 1 15 15 15 0 15 19 19 4 18 13 2 15 15 19 2 16 76 39 12 13 2 15 15 15 0 15 20 19 4 18 13 3 15 15 19 2 16 76 39 12 13 3 15 15 15 0 15 21 19 4 18 15 22 13 4 13 3 13 2 13 1 13 0 19 6 23 29) #5# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 1 0 73 29) #A(t (3) (profile::*enclosed-ticks* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 1 0 73 29) #A(t (3) (profile::*enclosed-consing* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((type profile::counter profile::*enclosed-ticks* profile::*enclosed-consing*)) mapc)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 1 0 73 29) #A(t (3) (profile::*enclosed-profiles* si::*make-special boundp)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((type profile::counter profile::*enclosed-profiles*)) mapc)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 73 29) #A(t (2) (profile::*computing-profiling-data-for* si::*make-special)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 77 77 77 77 15 4 9 3 77 77 15 5 19 15 6 15 0 19 1 23 78 19 15 7 1 21 12 19 2 22 1 0 73 29) #11=#A(t (24) (profile::overhead "OVERHEAD-" ((profile::call #12=(profile::missing-arg) :type single-float :read-only t) (profile::internal #13=(profile::missing-arg) :type single-float :read-only t) (profile::total #14=(profile::missing-arg) :type single-float :read-only t)) ((profile::call #12# single-float t 0 nil) (profile::internal #13# single-float t 1 nil) (profile::total #14# single-float t 2 nil)) (profile::make-overhead) profile::overhead-p si::define-structure profile::make-overhead (nil :total :internal :call) profile::missing-arg #:call #:internal #:total single-float typep profile::total si::structure-type-error profile::internal profile::call 0 si::make-structure #Y(profile::make-overhead nil nil (28 8 22 40 5 19 0 9 12 46 10 22 40 5 19 0 9 12 46 11 22 40 5 19 0 9 12 46 12 13 0 15 13 19 2 14 76 39 12 13 0 15 13 15 0 15 15 19 4 16 13 1 15 13 19 2 14 76 39 12 13 1 15 13 15 0 15 17 19 4 16 13 2 15 13 19 2 14 76 39 12 13 2 15 13 15 0 15 18 19 4 16 15 19 13 2 13 1 13 0 19 4 20 29) #11# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 73 29) #A(t (2) (profile::*overhead* si::*make-special)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((type profile::overhead profile::*overhead*)) mapc)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (profile::*overhead* makunbound)) #1# 0) #Y(si::bytecodes nil nil (75 73 29) #A(t (0) ()) #1# 0) #Y(si::bytecodes nil nil (15 0 1 37 12 19 2 38 1 0 73 29) #15=#A(t (39) (profile::profile-encapsulation-lambdas profile::encapsulated-fun count profile::ticks profile::consing profile::profiles profile::args profile::*computing-profiling-data-for* boundp profile::unprofile-all "~@<When computing profiling data for ~S, the profiled function ~S was called. To get out of this infinite recursion, all functions have been unprofiled. (Since the profiling system evidently uses ~S in its computations, it looks as though it's a bad idea to profile it.)~:@>" error #:g24594 + profile::*enclosed-ticks* profile::*enclosed-consing* profile::*enclosed-profiles* get-internal-run-time profile::get-bytes-consed profile::start-consed profile::start-ticks profile::old-enclosed-profiles profile::old-enclosed-consing profile::old-enclosed-ticks profile::inner-enclosed-profiles profile::dconsing profile::dticks apply - profile::net-dticks #:g24602 profile::net-dconsing #:g24604 #:g24606 #Y(nil nil nil (27 45 6 1 7 16 8 39 15 19 0 9 15 10 14 7 13 5 13 5 19 4 11 8 1 45 12 13 5 13 0 19 2 13 51 5 43 1 9 0 9 0 9 0 14 14 14 15 14 16 19 0 17 12 9 0 19 1 18 12 46 19 46 20 46 21 46 22 46 23 46 24 46 25 46 26 64 21 8 0 52 14 8 0 52 16 8 0 52 15 13 13 13 8 19 2 27 65 19 0 17 12 13 6 19 2 28 51 0 13 7 19 1 18 51 1 11 16 51 2 13 0 14 14 19 2 28 45 29 10 0 45 30 13 13 13 0 19 2 13 51 13 43 1 43 1 13 1 14 15 19 2 28 45 31 10 0 45 32 13 12 13 0 19 2 13 51 12 43 1 43 1 10 2 45 33 13 10 13 0 19 2 13 51 10 43 1 13 3 13 0 19 2 13 52 14 13 4 13 1 19 2 13 52 15 13 5 13 2 9 1 19 3 13 52 16 66 43 8 29) #15# #1# 0) #Y(nil nil nil (26 13 3 13 2 13 1 13 0 72 4 29) #15# #1# 0) #Y(nil nil nil (26 8 0 51 3 8 0 51 2 8 0 51 1 8 0 51 0 73 29) #15# #1# 0) #Y(profile::profile-encapsulation-lambdas nil nil (24 45 1 26 8 0 45 2 8 0 45 3 8 0 45 4 8 0 45 5 34 34 12 34 35 12 34 36 12 72 3 43 4 29) #15# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 1 0 73 29) #16=#A(t (29) (profile::mapc-on-named-funs function profile::names si::%dolist-var profile::name #:g24623 symbol typep list profile::legal-fun-name-or-type-error string find-package package (:inherited :internal :external) t si::packages-iterator #:g24624 #:g24625 symbol-package eq fboundp macro-function special-operator-p setf profile::setf-name (symbol list string) si::etypecase-error #Y(profile::mapc-on-named-funs nil nil (24 45 1 24 45 2 26 10 0 45 3 75 45 4 38 193 10 1 4 51 0 10 0 45 5 13 0 15 6 19 2 7 39 10 13 4 13 1 20 1 23 38 159 13 0 15 8 19 2 7 39 15 13 1 19 1 9 13 4 13 1 20 1 23 38 136 13 0 15 10 19 2 7 39 120 10 1 16 11 45 12 58 60 107 13 1 15 13 14 14 19 3 15 45 16 75 45 17 75 45 6 38 82 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 10 0 16 18 12 10 4 17 19 39 52 10 0 16 20 39 14 13 0 19 1 21 76 39 6 10 0 16 22 76 39 8 13 9 13 0 20 1 23 15 23 10 0 6 2 45 24 10 0 16 20 39 8 13 10 13 0 20 1 23 43 1 75 39 -83 43 3 63 43 1 38 8 13 0 15 25 19 2 26 43 1 10 1 5 51 1 10 1 40 -195 43 2 0 29) #16# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 33 12 19 2 8 1 0 73 29) #17=#A(t (34) (profile::profile-1-unprofiled-fun profile::name fdefinition profile::encapsulated-fun profile::profile-encapsulation-lambdas profile::clear-stats-fun profile::read-stats-fun profile::encapsulation-fun si::fset profile::*profile-lock* #:lock24647 mp::lock-owner #:owner24648 mp::lock-count #:count24649 ext::*interrupts-enabled* #:outer-interrupts-enabled24651 si::*allow-with-interrupts* #:outer-allow-with-interrupts24650 mp::get-lock profile::*profiled-fun-name->info* :name :encapsulated-fun :encapsulation-fun :read-stats-fun :clear-stats-fun profile::make-profile-info si::hash-set mp::*current-process* eq > mp::giveup-lock si::check-pending-interrupts #Y(profile::profile-1-unprofiled-fun nil nil (24 45 1 26 10 0 16 2 45 3 13 0 19 1 4 47 2 5 47 1 6 45 7 13 4 13 0 19 2 8 11 9 45 10 10 0 16 11 45 12 10 1 16 13 45 14 11 15 45 16 75 48 15 11 17 45 18 75 48 17 64 44 10 1 48 15 13 4 19 1 19 13 9 14 20 14 21 13 9 14 22 13 8 14 23 13 5 14 24 13 6 14 25 13 7 19 10 26 12 19 3 27 44 1 65 14 28 10 4 16 11 17 29 39 20 13 3 11 28 17 29 76 40 11 10 4 16 13 12 13 2 19 2 30 39 5 10 4 16 31 66 43 2 44 2 69 11 15 39 4 19 0 32 70 43 3 0 43 3 43 1 29) #17# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 1 26 12 19 2 27 1 0 73 29) #18=#A(t (28) (profile::profile-1-fun profile::name fboundp profile::*profile-lock* #:lock24678 mp::lock-owner #:owner24679 mp::lock-count #:count24680 ext::*interrupts-enabled* #:outer-interrupts-enabled24682 si::*allow-with-interrupts* #:outer-allow-with-interrupts24681 mp::get-lock profile::*profiled-fun-name->info* gethash mp::*current-process* eq > mp::giveup-lock si::check-pending-interrupts "~S is already profiled, so unprofiling it first." warn profile::unprofile-1-fun profile::profile-1-unprofiled-fun "ignoring undefined function ~S" #Y(profile::profile-1-fun nil nil (24 45 1 26 10 0 16 2 39 124 11 3 45 4 10 0 16 5 45 6 10 1 16 7 45 8 11 9 45 10 75 48 9 11 11 45 12 75 48 11 64 20 10 1 48 9 13 4 19 1 13 13 5 14 14 19 2 15 44 1 65 14 16 10 4 16 5 17 17 39 20 13 3 11 16 17 17 76 40 11 10 4 16 7 12 13 2 19 2 18 39 5 10 4 16 19 66 43 2 44 2 69 11 9 39 4 19 0 20 70 43 3 39 13 15 21 13 0 19 2 22 13 0 19 1 23 13 0 19 1 24 38 8 15 25 13 0 19 2 22 0 29) #18# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 34 12 19 2 30 1 0 73 29) #19=#A(t (35) (profile::unprofile-1-fun profile::name profile::*profile-lock* #:lock24722 mp::lock-owner #:owner24723 mp::lock-count #:count24724 ext::*interrupts-enabled* #:outer-interrupts-enabled24726 si::*allow-with-interrupts* #:outer-allow-with-interrupts24725 mp::get-lock profile::*profiled-fun-name->info* gethash mp::*current-process* eq > mp::giveup-lock si::check-pending-interrupts profile::pinfo #:lock24736 #:owner24737 #:count24738 #:outer-interrupts-enabled24740 #:outer-allow-with-interrupts24739 remhash fdefinition profile::profile-info-encapsulation-fun profile::profile-info-encapsulated-fun si::fset "preserving current definition of redefined function ~S" warn "~S is not a profiled function." #Y(profile::unprofile-1-fun nil nil (24 45 1 26 11 2 45 3 10 0 16 4 45 5 10 1 16 6 45 7 11 8 45 9 75 48 8 11 10 45 11 75 48 10 64 20 10 1 48 8 13 4 19 1 12 13 5 14 13 19 2 14 44 1 65 14 15 10 4 16 4 17 16 39 20 13 3 11 15 17 16 76 40 11 10 4 16 6 12 13 2 19 2 17 39 5 10 4 16 18 66 43 2 44 2 69 11 8 39 4 19 0 19 70 43 3 45 20 10 0 39 138 11 2 45 21 10 0 16 4 45 22 10 1 16 6 45 23 11 8 45 24 75 48 8 11 10 45 25 75 48 10 64 19 10 1 48 8 13 4 19 1 12 13 6 11 13 17 26 44 1 65 14 15 10 4 16 4 17 16 39 20 13 3 11 15 17 16 76 40 11 10 4 16 6 12 13 2 19 2 17 39 5 10 4 16 18 66 43 2 44 2 69 11 8 39 4 19 0 19 70 43 3 10 1 16 27 12 13 0 19 1 28 17 16 39 14 13 1 13 0 19 1 29 12 19 2 30 38 8 15 31 13 1 19 2 32 38 8 15 33 13 1 19 2 32 43 1 0 29) #19# #1# 0))) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 14 10 9 1 19 4 11 1 0 73 29) #20=#A(t (12) (profile::profile #:g24753 #:g24752 #:g24754 profile::names (loop profile::for profile::k profile::being profile::each profile::hash-key profile::in profile::*profiled-fun-name->info* profile::collecting profile::k) profile::mapc-on-named-funs #'profile::profile-1-fun quote #Y(profile::profile nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 45 4 10 0 76 39 6 1 5 73 38 14 15 6 15 7 15 8 10 0 6 2 6 3 73 29) #20# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 9 12 14 10 9 1 19 4 11 1 0 73 29) #21=#A(t (12) (profile::unprofile #:g24756 #:g24755 #:g24757 profile::names profile::mapc-on-named-funs #'profile::unprofile-1-fun quote (profile::unprofile-all) #Y(profile::unprofile nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 45 4 10 0 39 16 15 5 15 6 15 7 10 0 6 2 6 3 73 38 4 1 8 73 29) #21# #1# 0) t si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #22=#A(t (27) (profile::unprofile-all profile::*profile-lock* #:lock24780 mp::lock-owner #:owner24781 mp::lock-count #:count24782 ext::*interrupts-enabled* #:outer-interrupts-enabled24784 si::*allow-with-interrupts* #:outer-allow-with-interrupts24783 mp::get-lock profile::*profiled-fun-name->info* si::hash-table-iterator #:g24778 0 profile::profile-info profile::name #:g24779 profile::unprofile-1-fun mp::*current-process* eq > mp::giveup-lock si::check-pending-interrupts #Y(profile::unprofile-all nil nil (26 11 1 45 2 10 0 16 3 45 4 10 1 16 5 45 6 11 7 45 8 75 48 7 11 9 45 10 75 48 9 64 64 10 1 48 7 13 4 19 1 11 11 12 16 13 45 14 58 60 41 57 15 61 1 1 13 2 20 0 23 47 2 16 47 1 17 45 18 10 0 76 39 5 75 73 36 4 13 1 19 1 19 43 3 35 0 0 62 73 63 43 1 44 1 65 14 20 10 4 16 3 17 21 39 20 13 3 11 20 17 21 76 40 11 10 4 16 5 12 13 2 19 2 22 39 5 10 4 16 23 66 43 2 44 2 69 11 7 39 4 19 0 24 70 43 3 29) #22# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #23=#A(t (27) (profile::reset profile::*profile-lock* #:lock24820 mp::lock-owner #:owner24821 mp::lock-count #:count24822 ext::*interrupts-enabled* #:outer-interrupts-enabled24824 si::*allow-with-interrupts* #:outer-allow-with-interrupts24823 mp::get-lock profile::*profiled-fun-name->info* si::hash-table-iterator #:g24818 0 profile::profile-info profile::name #:g24819 profile::profile-info-clear-stats-fun mp::*current-process* eq > mp::giveup-lock si::check-pending-interrupts #Y(profile::reset nil nil (26 11 1 45 2 10 0 16 3 45 4 10 1 16 5 45 6 11 7 45 8 75 48 7 11 9 45 10 75 48 9 64 68 10 1 48 7 13 4 19 1 11 11 12 16 13 45 14 58 60 45 57 15 61 1 1 13 2 20 0 23 47 2 16 47 1 17 45 18 10 0 76 39 5 75 73 36 4 13 2 19 1 19 12 20 0 23 43 3 35 0 0 62 73 63 43 1 44 1 65 14 20 10 4 16 3 17 21 39 20 13 3 11 20 17 21 76 40 11 10 4 16 5 12 13 2 19 2 22 39 5 10 4 16 23 66 43 2 44 2 69 11 7 39 4 19 0 24 70 43 3 29) #23# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 77 77 77 77 15 4 9 4 77 77 15 5 19 15 6 15 0 19 1 17 78 13 15 7 1 15 12 19 2 16 1 0 73 29) #24=#A(t (18) (profile::time-info "TIME-INFO-" (profile::name profile::calls profile::seconds profile::consing) ((profile::name nil t nil 0 nil) (profile::calls nil t nil 1 nil) (profile::seconds nil t nil 2 nil) (profile::consing nil t nil 3 nil)) (profile::make-time-info) profile::time-info-p si::define-structure profile::make-time-info (nil :consing :seconds :calls :name) #:name #:calls #:seconds #:consing 0 si::make-structure #Y(profile::make-time-info nil nil (28 8 22 40 2 77 46 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 15 13 13 3 13 2 13 1 13 0 19 5 14 29) #24# #1# 0) si::fset find-class)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #25=#A(t (17) (profile::compensate-time profile::calls profile::ticks profile::profile float profile::+ticks-per-second+ / profile::*overhead* profile::overhead-internal * profile::overhead-total - profile::raw-compensated #26=0.0 max #Y(profile::compensate-time nil nil (24 45 1 24 45 2 24 45 3 26 13 1 19 1 4 12 14 5 19 1 4 12 19 2 6 12 14 7 19 1 8 12 13 2 19 1 4 12 19 2 9 12 14 7 19 1 10 12 14 7 19 1 8 12 19 2 11 12 13 0 19 1 4 12 19 2 9 12 19 3 11 45 12 13 0 15 13 19 2 14 43 1 29) #25# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 56 12 19 2 57 1 0 73 29) #27=#A(t (58) (profile::report profile::*overhead* boundp profile::compute-overhead profile::no-call-name-list profile::time-info-list profile::*profile-lock* #:lock24865 mp::lock-owner #:owner24866 mp::lock-count #:count24867 ext::*interrupts-enabled* #:outer-interrupts-enabled24869 si::*allow-with-interrupts* #:outer-allow-with-interrupts24868 mp::get-lock profile::*profiled-fun-name->info* si::hash-table-iterator #:g24863 0 profile::pinfo profile::name #:g24864 fdefinition profile::profile-info-encapsulation-fun eq "Function ~S has been redefined, so times may be inaccurate.~@
               PROFILE it again to record calls to the new definition." warn profile::profile-info-read-stats-fun profile::profile profile::consing profile::ticks profile::calls zerop :name :calls :seconds profile::compensate-time :consing profile::make-time-info mp::*current-process* > mp::giveup-lock si::check-pending-interrupts >= :key profile::time-info-seconds sort profile::print-profile-table *trace-output* "~%These functions were not called:~%~{~<~%~:; ~S~>~}~%" string< symbol-name #Y(nil nil nil (24 45 22 26 10 0 16 53 29) #27# #1# 0) format #Y(profile::report nil nil (26 1 1 16 2 76 39 6 19 0 3 52 1 77 77 46 4 46 5 11 6 45 7 10 0 16 8 45 9 10 1 16 10 45 11 11 12 45 13 75 48 12 11 14 45 15 75 48 14 64 151 10 1 48 12 13 4 19 1 16 11 17 16 18 45 19 58 60 128 57 20 61 1 1 13 2 20 0 23 47 2 21 47 1 22 45 23 10 0 76 39 5 75 73 36 4 10 1 16 24 12 13 2 19 1 25 17 26 76 39 8 15 27 13 1 19 2 28 13 2 19 1 29 12 20 0 23 47 3 30 47 2 31 47 1 32 45 33 10 0 16 34 39 10 13 5 10 16 3 51 16 38 34 14 35 13 5 14 36 13 0 14 37 13 0 13 1 13 3 19 3 38 12 14 39 13 2 19 8 40 12 10 15 3 51 15 43 4 43 3 35 0 0 62 73 63 43 1 44 1 65 14 41 10 4 16 8 17 26 39 20 13 3 11 41 17 26 76 40 11 10 4 16 10 12 13 2 19 2 42 39 5 10 4 16 43 66 43 2 44 2 69 11 12 39 4 19 0 44 70 43 3 13 0 33 45 12 14 46 33 47 12 19 4 48 51 0 13 0 19 1 49 10 1 39 22 14 50 15 51 13 1 33 52 12 14 46 34 54 12 19 4 48 12 19 3 55 0 43 2 29) #27# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 56 12 19 2 57 1 0 73 29) #28=#A(t (58) (profile::print-profile-table profile::time-info-list #26# "seconds" length "consed" "calls" profile::name-width profile::sec/call-width profile::calls-width profile::consed-width profile::seconds-width profile::total-calls profile::total-consed profile::total-seconds si::%dolist-var profile::time-info profile::time-info-seconds #:g24908 + profile::time-info-consing #:g24910 profile::time-info-calls #:g24912 "~10,3F" format max "~:D" "~:D" * si::%dotimes-var profile::i #\- *trace-output* write-char 1+ < terpri #Y(profile::dashes nil nil (26 13 3 13 4 13 5 13 6 13 7 9 5 9 3 19 2 29 12 19 6 19 45 30 8 0 45 31 38 14 15 32 14 33 19 2 34 10 0 16 35 51 0 13 0 13 1 19 2 36 40 -21 43 2 14 33 19 1 37 29) #28# #1# 0) "~&~@{ ~v:@<~A~>~^|~}~%" "seconds" "consed" "calls" "sec/call" "name" "~v,3F | ~v:D | ~v:D | ~10,6F | ~S~%" float / profile::time-info-name "~v,3F | ~v:D | ~v:D |            | Total~%" "~%estimated total profiling overhead: ~4,2F seconds~%" profile::*overhead* profile::overhead-total "~&overhead estimation parameters:~%  ~Ss/call, ~Ss total profiling, ~Ss internal profiling~%" profile::overhead-call profile::overhead-internal #Y(profile::print-profile-table nil nil (24 45 1 26 15 2 9 0 9 0 1 3 16 4 12 1 5 16 4 12 1 6 16 4 12 9 10 9 6 46 7 46 8 46 9 46 10 46 11 46 12 46 13 46 14 10 8 45 15 75 45 16 38 65 10 1 4 51 0 13 0 19 1 17 45 18 13 3 13 0 19 2 19 51 3 43 1 13 0 19 1 20 45 21 13 4 13 0 19 2 19 51 4 43 1 13 0 19 1 22 45 23 13 5 13 0 19 2 19 51 5 43 1 10 1 5 51 1 10 1 40 -67 43 2 77 15 24 13 0 19 3 25 16 4 12 13 3 19 2 26 51 3 77 15 27 13 2 19 3 25 16 4 12 13 5 19 2 26 51 5 77 15 28 13 1 19 3 25 16 4 12 13 4 19 2 26 51 4 30 1 38 14 33 15 39 13 4 15 40 10 5 16 35 12 15 41 10 6 16 35 12 15 42 10 7 16 35 12 15 43 10 8 16 35 12 15 44 19 12 25 32 0 18 0 10 9 45 15 75 45 16 38 68 10 1 4 51 0 14 33 15 45 13 6 13 0 19 1 17 12 13 7 13 0 19 1 20 12 13 8 13 0 19 1 22 12 13 0 19 1 17 12 13 0 19 1 22 12 19 1 46 12 19 2 47 12 13 0 19 1 48 12 19 10 25 10 1 5 51 1 10 1 40 -70 43 2 32 0 18 0 14 33 15 49 13 4 13 1 13 5 13 2 13 6 13 3 19 8 25 14 33 15 50 14 51 19 1 52 12 13 3 19 1 46 12 19 2 29 12 19 3 25 14 33 15 53 14 51 19 1 54 12 14 51 19 1 52 12 14 51 19 1 55 12 19 5 25 43 1 43 8 29) #28# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((type unsigned-byte profile::*timer-overhead-iterations*)) mapc)) #1# 0) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (profile::*timer-overhead-iterations* si::*make-special 500000)) #1# 0) #Y(si::bytecodes nil nil (15 0 15 1 19 2 2 29) #A(t (3) (proclaim ((notinline profile::compute-overhead-aux)) mapc)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 2 12 19 2 3 1 0 73 29) #29=#A(t (4) (profile::compute-overhead-aux profile::x #Y(profile::compute-overhead-aux nil nil (24 45 1 26 75 73 29) #29# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 54 12 19 2 55 1 0 73 29) #30=#A(t (56) (profile::compute-overhead *debug-io* "~&measuring PROFILE overhead.." format get-internal-run-time profile::compute-overhead-aux symbol-function profile::fun profile::start profile::*timer-overhead-iterations* si::%dotimes-var profile::i 1+ < - float profile::+ticks-per-second+ / #Y(profile::frob nil nil (26 19 0 4 12 1 5 16 6 12 46 7 46 8 11 9 45 10 8 0 45 11 38 14 13 3 13 3 20 1 23 10 0 16 12 51 0 13 0 13 1 19 2 13 40 -21 43 2 19 0 4 12 13 0 19 2 14 12 19 1 15 12 14 16 19 1 15 12 14 9 19 1 15 12 19 3 17 43 2 29) #30# #1# 0) profile::internal-overhead profile::total-overhead profile::call-overhead profile::profile-1-fun (profile::compute-overhead-aux) profile::mapc-on-named-funs profile::*profile-lock* #:lock24933 mp::lock-owner #:owner24934 mp::lock-count #:count24935 ext::*interrupts-enabled* #:outer-interrupts-enabled24937 si::*allow-with-interrupts* #:outer-allow-with-interrupts24936 mp::get-lock profile::*profiled-fun-name->info* gethash mp::*current-process* eq > mp::giveup-lock si::check-pending-interrupts profile::pinfo profile::profile-info-read-stats-fun profile::read-stats-fun time profile::unprofile-1-fun (profile::compute-overhead-aux) :call :total :internal profile::make-overhead "done~%" #Y(profile::compute-overhead nil nil (26 14 1 15 2 19 2 3 30 1 18 32 0 18 0 12 77 77 46 19 46 20 46 21 64 22 33 22 12 15 23 19 2 24 32 3 18 0 12 13 0 19 2 14 51 1 65 11 25 45 26 10 0 16 27 45 28 10 1 16 29 45 30 11 31 45 32 75 48 31 11 33 45 34 75 48 33 64 20 10 1 48 31 13 4 19 1 35 15 5 14 36 19 2 37 44 1 65 14 38 10 4 16 27 17 39 39 20 13 3 11 38 17 39 76 40 11 10 4 16 29 12 13 2 19 2 40 39 5 10 4 16 41 66 43 2 44 2 69 11 31 39 4 19 0 42 70 43 3 45 43 13 0 19 1 44 45 45 9 1 13 0 20 0 23 74 45 46 13 0 19 1 15 12 14 16 19 1 15 12 14 9 19 1 15 12 19 3 17 51 5 43 3 33 47 12 15 48 19 2 24 66 14 49 13 0 14 50 13 1 14 51 13 2 19 6 52 12 14 1 15 53 19 2 3 22 73 43 3 43 1 29) #30# #1# 0) si::fset)) #1# 0) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #31=#A(t (5) (profile::profile-deinit profile::*overhead* makunbound #Y(profile::profile-deinit nil nil (26 1 1 16 2 29) #31# #1# 0) si::fset)) #1# 0))
