;;; @configure_input@

(defconstant +cmp-module-files+
'("src:new-cmp;cmppackage.lsp"
  "src:cmp;cmptypes.lsp"
  "src:cmp;cmpglobals.lsp"
  "build:cmp;cmpdefs.lsp"
  "src:new-cmp;cmptables.lsp"
  "src:new-cmp;cmpdata.lsp"
  "src:new-cmp;cmpmac.lsp"
  "src:new-cmp;cmpform.lsp"
  "src:new-cmp;cmploc.lsp"
  "src:cmp;cmputil.lsp"
  "src:cmp;cmptype-arith.lsp"
  "src:cmp;cmptype-prop.lsp"
  "src:cmp;cmptype.lsp"
  "src:new-cmp;cmptranslate.lsp"
  "src:new-cmp;cmpblock.lsp"
  "src:new-cmp;cmpcall.lsp"
  "src:new-cmp;cmpcatch.lsp"
  "src:cmp;cmpenv-api.lsp"
  "src:cmp;cmpenv-fun.lsp"
  "src:cmp;cmpenv-decl.lsp"
  "src:cmp;cmppolicy.lsp"
  "src:new-cmp;cmpeval.lsp"
  "src:new-cmp;cmpcffi.lsp"
  "src:new-cmp;cmpflet.lsp"
  "src:new-cmp;cmpfun.lsp"
  "src:new-cmp;cmpif.lsp"
  "src:new-cmp;cmplam.lsp"
  "src:new-cmp;cmplet.lsp"
  ;"src:new-cmp;cmploc.lsp"
  "src:new-cmp;cmpmap.lsp"
  "src:new-cmp;cmpstack.lsp"
  "src:new-cmp;cmpmulti.lsp"
  "src:new-cmp;cmpspecial.lsp"
  "src:new-cmp;cmptag.lsp"
  "src:new-cmp;cmptop.lsp"
  "src:new-cmp;cmpvar.lsp"
  "src:new-cmp;cmpnum.lsp"
  "src:cmp;cmpname.lsp"
  "src:cmp;cmpopt.lsp"
  "src:cmp;cmpopt-cons.lsp"
  "src:cmp;cmpopt-constant.lsp"
  "src:cmp;cmpopt-sequence.lsp"
  "src:new-cmp;cmpprop.lsp"
  "src:new-cmp;cmpclos.lsp"
  "src:new-cmp;cmpstructures.lsp"
  "src:cmp;cmparray.lsp"
  "src:new-cmp;cmppass.lsp"
  "src:new-cmp;cmpc.lsp"
  "src:cmp;cmpc-wt.lsp"
  "src:new-cmp;cmpc-loc.lsp"
  "src:new-cmp;cmpc-set.lsp"
  "src:new-cmp;cmpc-ffi.lsp"
  "src:new-cmp;cmpc-bind.lsp"
  "src:new-cmp;cmpc-inline.lsp"
  "src:new-cmp;cmpc-data.lsp"
  "src:new-cmp;cmpc-pass.lsp"
  "src:new-cmp;cmpc-ops.lsp"
  "src:new-cmp;cmpc-tables.lsp"
  "src:new-cmp;cmpc-cbk.lsp"
  "src:new-cmp;cmpc-top.lsp"
  "src:new-cmp;cmpmain.lsp"
  "src:cmp;proclamations.lsp"
  "src:cmp;sysfun.lsp"))

(let ((si::*keep-documentation* nil))
  (mapc #'(lambda (x) (load x :verbose t)) +cmp-module-files+))

